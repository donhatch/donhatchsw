/* vim: set filetype=java: */
package com.donhatchsw.awt;
#include "macros.h"
/**
* Wrapper class for Graphics
* that does a subset of the Graphics2D API
* (But with saner API.)
*/
public class MyGraphics
{
    public MyGraphics(java.awt.Graphics g,
                      java.awt.Dimension gsize,
                      double x0, double x1, double y0, double y1)
    {
        this.g = g;
        this.gsize = gsize;
        fitToWindow(x0, x1, y0, y1);
    }

    //
    // Set translate and scale
    // so that x0,x1,y0,y1
    // map to left,right,bottom,top.
    //
    public void fit(double x0,   double x1,    double y0,     double y1,
                    double left, double right, double bottom, double top)
    {
        scaleX = (right-left) / (x1-x0);
        scaleY = (top-bottom) / (y1-y0);
        translateX = left - scaleX*x0;
        translateY = bottom - scaleY*y0;
    }
    public void fitToWindow(double x0, double x1, double y0, double y1)
    {
        fit(x0, x1,             y0,              y1,
            .5, gsize.width-.5, gsize.height-.5, .5);
    }

    public void translate(double x, double y)
    {
        translateX += x*scaleX;
        translateY += y*scaleY;
    }

    public void pick(double x, double y, double result[/*2*/])
    {
        result[0] = (x-translateX)/scaleX;
        result[1] = (y-translateY)/scaleY;
    }

    // XXX name is dorky
    public void unpick(double x, double y, double result[/*2*/])
    {
        result[0] = x*scaleX + translateX;
        result[1] = y*scaleY + translateY;
    }


    public void fillWindow()
    {
        g.fillRect(0,0, gsize.width,gsize.height);
    }
    public void drawLine(double x0, double y0, double x1, double y1) 
    {
        // "the pen hangs down and to the right of the coordinate",
        // so adjust the coordinate by half a pixel up and to the left...
        g.drawLine((int)(x0 * scaleX + translateX - .5),
                   (int)(y0 * scaleY + translateY - .5),
                   (int)(x1 * scaleX + translateX - .5),
                   (int)(y1 * scaleY + translateY - .5));
    }
    public void drawPoint(double x, double y, int nPixels)
    {
        int x0 = (int)(x * scaleX + translateX - .5*nPixels);
        int y0 = (int)(y * scaleY + translateY - .5*nPixels);
        if (verbose >= 2) System.out.println("in drawPoint("+x+","+y+","+nPixels+") -> "+x0+","+y0);
        // have to check, otherwise java fillRect does weird wraparound stuff
        // XXX should check in floating-point
        if (x0 < -nPixels
         || x0 > gsize.width+nPixels
         || y0 < -nPixels
         || y0 > gsize.height+nPixels)
            return;
        g.fillRect(x0, y0, nPixels, nPixels);
    }
    public void drawHollowPoint(double x, double y, int nPixels)
    {
        int x0 = (int)(x * scaleX + translateX - .5*nPixels);
        int y0 = (int)(y * scaleY + translateY - .5*nPixels);
        if (verbose >= 2) System.out.println("in drawHollowPoint("+x+","+y+","+nPixels+") -> "+x0+","+y0);
        // have to check, otherwise java fillRect does weird wraparound stuff
        // XXX should check in floating-point
        if (x0 < -nPixels
         || x0 > gsize.width+nPixels
         || y0 < -nPixels
         || y0 > gsize.height+nPixels)
            return;
        g.drawRect(x0, y0, nPixels-1, nPixels-1);
    }
    public void drawHollowCirclePoint(double x, double y, int nPixels)
    {
        int x0 = (int)(x * scaleX + translateX - .5*nPixels);
        int y0 = (int)(y * scaleY + translateY - .5*nPixels);
        if (verbose >= 2) System.out.println("in drawHollowPoint("+x+","+y+","+nPixels+") -> "+x0+","+y0);
        // have to check, otherwise java fillRect does weird wraparound stuff
        // XXX should check in floating-point
        if (x0 < -nPixels
         || x0 > gsize.width+nPixels
         || y0 < -nPixels
         || y0 > gsize.height+nPixels)
            return;
        g.drawArc(x0, y0, nPixels-1, nPixels-1, 0, 360);
    }
    public void drawHollowRegularPolygonPoint(double x, double y,
                                              int n, // gonality
                                              int nPixels)
    {
        // XXX the fudge is empirical, to make it match the drawHollowPoint square. lame! somewhere between 1.24264068711 and 1.24264068712, and it still warbles :-(
        double radiusX = Math.abs((.5*(nPixels-1)+1.24264068711) / scaleX);
        double radiusY = Math.abs((.5*(nPixels-1)+1.24264068711) / scaleY);

        FORI (i, n)
        {
            // XXX could do this with half as much math by reusing
            double t0 = -Math.PI/2 + 2*Math.PI*(i-.5)/n;
            double t1 = -Math.PI/2 + 2*Math.PI*(i+.5)/n;
            double x0 = x + radiusX*Math.cos(t0);
            double y0 = y + radiusY*Math.sin(t0);
            double x1 = x + radiusX*Math.cos(t1);
            double y1 = y + radiusY*Math.sin(t1);
            drawLine(x0,y0, x1,y1);
        }
    }

    public void drawString(String s, double x, double y)
    {
        g.drawString(s, (int)(x * scaleX + translateX),
                        (int)(y * scaleY + translateY));
    }
    public void drawString(String s, double x, double y, 
                                     double xJustify, // -1,0,1 -> L,C,R
                                     double yJustify) // -1,0,1 -> T,C,B
    {
        java.awt.FontMetrics fm = g.getFontMetrics();

        /*
        x:
            -1 -> 0
            0 -> -.5
            1 -> -1

        y:
            -1 -> 1
            0 -> .5
            1 -> 0
        */

        g.drawString(s, (int)(x * scaleX + translateX - fm.stringWidth(s)*(xJustify+1.)*.5),
                        (int)(y * scaleY + translateY + fm.getAscent()*(1.-yJustify)*.5));
                        // XXX centered height seems to come out a bit low-- maybe fiddle with leading?
    }
    public void drawStringCentered(String s, double x, double y)
    {
        drawString(s, x, y, 0, 0);
    }
    public void drawStringRightJustified(String s, double x, double y)
    {
        drawString(s, x, y, 1, 0);
    }
    public void drawStringLeftJustified(String s, double x, double y)
    {
        drawString(s, x, y, -1, 0);
    }
    // XXX should be more of these...
    public double getFontHeight()
    {
        java.awt.FontMetrics fm = g.getFontMetrics();
        return Math.abs(fm.getHeight() / scaleY);
    }

#if 1 // commented out so we don't have to depend on VecMath or MyMath  (NOT, it's needed for the SmoothlyVaryingViewingParameter demo)
    public void smartDrawArcNonClipped(
        double focusX, double focusY, // a point on the arc
        double focusAngleRadians,     // from center to focus
        double c,                     // curvature, i.e. 1/radius
        double start, double end)     // arc goes from focusAngle+start to focusAngle+end in arc length
    {
        int nSegs = MAX(10, (int)(ABS((end-start)*c) / (1*(Math.PI/180)))); // 1 degree-- delicate tradeoff, if we make it too fine, it looks all warbly because the endpoints are snapped to unit pixel coords
        //PRINT(nSegs);

        double cosFocusAngle = Math.cos(focusAngleRadians);
        double sinFocusAngle = Math.sin(focusAngleRadians);
        double normalAndTangent[][] = {
            { cosFocusAngle, sinFocusAngle}, // unit normal vector
            {-sinFocusAngle, cosFocusAngle}, // unit tangent vector
        };

        double prevPoint[] = new double[2];
        double point[] = new double[2];
        double coeff[] = new double[2];
        int i;
        FOR (i, nSegs+1)
        {
            double t = LERP(start, end, (double)i/nSegs);
            // coeff of normal vector: -(1-cos(t*c))/c
            //coeff[0] = -com.donhatchsw.util.MyMath.cosf1_over_x(t*c) * t;
            coeff[0] = -com.donhatchsw.util.MyMath.cosf1_over_xx(t*c) * (t*c) * t;
            // coeff of tangent vector: sin(t*c)/c
            coeff[1] = com.donhatchsw.util.MyMath.sin_over_x(t*c) * t;

            com.donhatchsw.util.VecMath.vxm(point, coeff, normalAndTangent);
            if (i > 0)
                this.drawLine(focusX + prevPoint[0], focusY + prevPoint[1],
                              focusX + point[0],     focusY + point[1]);
            com.donhatchsw.util.VecMath.copyvec(prevPoint, point);
        }
    } // smartDrawArcNonClipped

    // XXX Arc drawing on Linux/Netscape is so broken it's unbelievable...
    public void drawArc(double x, double y, double width, double height,
                        double startRadians, double arcRadians)
    {
        // XXX try smart way (still need to clip, but let's try it first)
        double centerX = x + width*.5;
        double centerY = y + height*.5;
        double radius = .25*(width+height); // XXX ignoring aspect for now
        double curvature = 1./radius;
        double focusAngleRadians = startRadians;
        double start = 0.;
        double end = arcRadians * radius;
        double focusX = centerX + radius * Math.cos(focusAngleRadians);
        double focusY = centerY + radius * Math.sin(focusAngleRadians);
        smartDrawArcNonClipped(focusX, focusY,
                                focusAngleRadians,
                                curvature,
                                start, end);
    } // drawArc

    public void fillArc(double x, double y, double width, double height,
                        double startRadians, double arcRadians)
    {
        g.fillArc((int)Math.round(x * scaleX + translateX - 1), // FUDGE
                  (int)Math.round((y+height) * scaleY + translateY - 1), // FUDGE
                  (int)Math.round(width * scaleX + .5), // FUDGE
                  (int)Math.round(-height * scaleY + .5), // FUDGE
                  (int)Math.round(RTOD(startRadians)), (int)Math.round(RTOD(arcRadians)));
    } // fillArc


#endif // 0

    public void drawArrow(double x0, double y0,
                          double x1, double y1,
                          double relativeHeadSize,
                          double headRadians)
    {
        drawLine(x0,y0,x1,y1);

        double headSize = relativeHeadSize * com.donhatchsw.util.MyMath.hypot(x1-x0, y1-y0);

        // More trig than necessary, but whatever
        double ang = Math.atan2(y1-y0, x1-x0);
        double leftAng = ang+Math.PI - headRadians*.5;
        double rightAng = ang+Math.PI + headRadians*.5;

        drawLine(x1,y1,
                 x1 + headSize*Math.cos(leftAng),
                 y1 + headSize*Math.sin(leftAng));
        drawLine(x1,y1,
                 x1 + headSize*Math.cos(rightAng),
                 y1 + headSize*Math.sin(rightAng));
    } // drawArrow

    public java.awt.Color getColor() 
    {
        return g.getColor();
    }
    public void setColor(java.awt.Color color) 
    {
        g.setColor(color);
    }

    private java.awt.Graphics g;
    private java.awt.Dimension gsize;
    private double scaleX = 1;
    private double scaleY = 1;
    private double translateX = 0;
    private double translateY = 0;
    public int verbose = 0; // XXX interface to this?
} // class MyGraphics
