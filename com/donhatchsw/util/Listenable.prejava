/* vim: set filetype=java: */
package com.donhatchsw.util;
#include "macros.h"

/**
* Wrappers for boolean, int, float, double, java.awt.Color
* that notify interested listeners when the value changes.
* This is useful for keeping multiple user
* interfaces that control the same variable
* in sync.
*  See Java Tip 79:
*      http://www.javaworld.com/javaworld/javatips/jw-javatip79.html
* XXX ARGH! weak refs are not implemented in 1.1.  in that case we don't use them, but we'll have memory leaks instead.
*/
public abstract class Listenable
{
    public Listenable() {} // seems to be needed for javac 1.2 but not >= 1.3

    private static boolean weakRefsExist()
    {
        try {
            Class<?> dummy = Class.forName("java.lang.ref.WeakReference");
            return true;
        } catch (ClassNotFoundException e) {
            //System.out.println("BONK! weak refs do not exist");
            return false;
        }
    }
    private static boolean useWeakRefs = weakRefsExist(); // true in >= 1.2

    public interface Listener
    {
        public void valueChanged();
    }

    /** Returns listener, for chaining of a kind, in case listener needs to be added to a list of strong refs or something */
    public Listener addListener(Listener listener)
    {
        synchronized(listeners)
        {
            if (useWeakRefs)
            {
                java.lang.ref.WeakReference<Listener> wr = new java.lang.ref.WeakReference<Listener>(listener);
                listeners.add(wr);
            }
            else
                listeners.add(listener);
        }
        return listener;
    }
    public void removeListener(Listener listener)
    {
        synchronized(listeners)
        {
            int n = listeners.size();
            for (int i = 0; i < n; ++i)
            {
                if (useWeakRefs)
                {
                    java.lang.ref.WeakReference<?> wr = (java.lang.ref.WeakReference<?>)listeners.get(i);  // TODO: WeakReference<Listener>, when I get something properly templatized
                    if (wr.get() == listener)
                    {
                        listeners.remove(i);
                        return;
                    }
                }
                else
                {
                    if (listeners.get(i) == listener)
                    {
                        listeners.remove(i);
                        return;
                    }
                }
            }
        }
        throw new IllegalArgumentException("Listener.removeListener tried to remove a listener that wasn't attached");
    }
    public abstract void set(Listenable from);
    public abstract void resetToDefault();
    public abstract boolean isDefault();
    public abstract java.lang.String toString(); // force subclass to define it

    private com.donhatchsw.compat.ArrayList listeners =
        new com.donhatchsw.compat.ArrayList();

    protected void notifyListenersThatValueChanged()
    {
        synchronized(listeners) // XXX this should be a read-only synchronization that allows multiple readers to run simultaneously, if I can figure out how to do that.  actually if I do that, need to change to full synchronization if it looks like we have to modify it.  copy-on-write?
        {
            // Some people recommend removing listeners that throw,
            // but I think that's too harsh, since it's often
            // a temporary condition.
            // However, we do need to make sure we notify all the listeners.
            Throwable lastCaught = null;

            int n = listeners.size();
            int nOut = 0;
            for (int i = 0; i < n; ++i)
            {
                Object listenerRef = listeners.get(i);
                Listener listener = null;
                if (useWeakRefs)
                {
                    listener = (Listener)((java.lang.ref.WeakReference)listenerRef).get();
                    if (listener == null)
                        System.out.println("WARNING: Listenable.Listener.notifyListenersThatValueChanged: CLEARING LAPSED LISTENER on listenable with value "+this);
                }
                else
                    listener = (Listener)listenerRef;
                if (listener != null)
                {
                    try
                    {
                        listener.valueChanged();
                    }
                    catch (Throwable e)
                    {
                        if (lastCaught != null)
                        {
                            System.err.println("(Listenable.notifyListenersThatValueChanged: printing previous caught)");
                            System.err.print("Exception in Listenable.notifyListenersThatValueChanged listener: ");
                            lastCaught.printStackTrace();
                        }
                        lastCaught = e;
                    }
                    if (nOut++ != i)
                        listeners.set(nOut-1, listenerRef);
                }
            }
            // listeners.removeRange(nOut, n); // ARGH! removeRange is protected, see http://stackoverflow.com/questions/2289183/why-is-javas-abstractlists-removerange-method-protected for a laugh
            while (n > nOut)
                listeners.remove(--n);

            if (lastCaught != null)
            {
                System.err.println("(Listenable.notifyListenersThatValueChanged: re-throwing last caught)");
                // can't just throw Throwable; can only throw unchecked exceptions
                if (lastCaught instanceof RuntimeException)
                    throw (RuntimeException)lastCaught;
                else if (lastCaught instanceof Error)
                    throw (Error)lastCaught;
                else
                    CHECK(false); // all unchecked exceptions are RuntimeError or Error, this shouldn't happen
            }
        }
    } // notifyListenersThatValueChanged

    public static class Boolean extends Listenable
    {
        private boolean value, defaultValue;
        public Boolean(boolean defaultValue)
        {
            this.defaultValue = defaultValue;
            this.value = this.defaultValue;
        }
        public boolean getDefaultValue() { return defaultValue; }
        public boolean get() { return value; }
        public void set(boolean newValue)
        {
            if (newValue != value)
            {
                value = newValue;
                this.notifyListenersThatValueChanged(); // "this." necessary or javac 1.2 gets confused
            }
        }

        // Listenable overrides
        OVERRIDE public void set(Listenable from) { set(((Boolean)from).get()); }
        OVERRIDE public void resetToDefault() { set(getDefaultValue()); }
        OVERRIDE public boolean isDefault() { return get() == getDefaultValue(); }
        OVERRIDE public java.lang.String toString() { return ""+get(); }
    }

    public static abstract class Number extends Listenable
    {
        public abstract double getDouble();
        public abstract void setDouble(double newValue);
        public abstract double minDouble();
        public abstract double maxDouble();
        public abstract double defaultDouble();
    }

    public static class Int extends Number
    {
        private int value, minValue, maxValue, defaultValue;
        public Int(int minValue, int maxValue, int defaultValue)
        {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.defaultValue = defaultValue;
            this.value = defaultValue;
        }
        public int min() { return minValue; }
        public int max() { return maxValue; }
        public int getDefaultValue() { return defaultValue; }
        public int get() { return value; }
        public void set(int newValue)
        {
            if (newValue != value)
            {
                value = newValue;
                this.notifyListenersThatValueChanged(); // "this." necessary or javac 1.2 gets confused
            }
        }
        public void cycle(int inc)
        {
            set(MOD((value-minValue) + inc, maxValue+1-minValue) + minValue);
        }

        // Listenable overrides
        OVERRIDE public void set(Listenable from) { set(((Int)from).get()); }
        OVERRIDE public void resetToDefault() { set(getDefaultValue()); }
        OVERRIDE public boolean isDefault() { return get() == getDefaultValue(); }
        OVERRIDE public java.lang.String toString() { return ""+get(); }

        // Number overrides
        OVERRIDE public double getDouble() { return (double)value; }
        OVERRIDE public void setDouble(double newValue) { set((int)newValue); }
        OVERRIDE public double minDouble() { return (double)minValue; }
        OVERRIDE public double maxDouble() { return (double)maxValue; }
        OVERRIDE public double defaultDouble() { return (double)defaultValue; }
    }

    public static class Long extends Number
    {
        private long value, minValue, maxValue, defaultValue;
        public Long(long minValue, long maxValue, long defaultValue)
        {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.defaultValue = defaultValue;
            this.value = defaultValue;
        }
        public long min() { return minValue; }
        public long max() { return maxValue; }
        public long getDefaultValue() { return defaultValue; }
        public long get() { return value; }
        public void set(long newValue)
        {
            if (newValue != value)
            {
                value = newValue;
                this.notifyListenersThatValueChanged(); // "this." necessary or javac 1.2 gets confused
            }
        }
        public void cycle(long inc)
        {
            set(MOD((value-minValue) + inc, maxValue+1-minValue) + minValue);
        }

        // Listenable overrides
        OVERRIDE public void set(Listenable from) { set(((Long)from).get()); }
        OVERRIDE public void resetToDefault() { set(getDefaultValue()); }
        OVERRIDE public boolean isDefault() { return get() == getDefaultValue(); }
        OVERRIDE public java.lang.String toString() { return ""+get(); }

        // Number overrides
        OVERRIDE public double getDouble() { return (double)value; }
        OVERRIDE public void setDouble(double newValue) { set((long)newValue); }
        OVERRIDE public double minDouble() { return (double)minValue; }
        OVERRIDE public double maxDouble() { return (double)maxValue; }
        OVERRIDE public double defaultDouble() { return (double)defaultValue; }
    }

    public static class Float extends Number
    {
        private float value, minValue, maxValue, defaultValue;
        public Float(float minValue, float maxValue, float defaultValue)
        {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.defaultValue = defaultValue;
            this.value = this.defaultValue;
        }
        public float min() { return minValue; }
        public float max() { return maxValue; }
        public float getDefaultValue() { return defaultValue; }
        public float get() { return value; }
        public void set(float newValue)
        {
            if (newValue != value)
            {
                value = newValue;
                this.notifyListenersThatValueChanged(); // "this." necessary or javac 1.2 gets confused
            }
        }

        // Listenable overrides
        OVERRIDE public void set(Listenable from) { set(((Float)from).get()); }
        OVERRIDE public void resetToDefault() { set(getDefaultValue()); }
        OVERRIDE public boolean isDefault() { return get() == getDefaultValue(); }
        OVERRIDE public java.lang.String toString() { return ""+get(); }

        // Number overrides
        OVERRIDE public double getDouble() { return (double)value; }
        OVERRIDE public void setDouble(double newValue) { set((float)newValue); }
        OVERRIDE public double minDouble() { return (double)minValue; }
        OVERRIDE public double maxDouble() { return (double)maxValue; }
        OVERRIDE public double defaultDouble() { return (double)defaultValue; }
    }
    public static class Double extends Number
    {
        private double value, minValue, maxValue, defaultValue;
        public Double(double minValue, double maxValue, double defaultValue)
        {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.defaultValue = defaultValue;
            this.value = this.defaultValue;
        }
        public double min() { return minValue; }
        public double max() { return maxValue; }
        public double getDefaultValue() { return defaultValue; }
        public double get() { return value; }
        public void set(double newValue)
        {
            if (newValue != value)
            {
                value = newValue;
                this.notifyListenersThatValueChanged(); // "this." necessary or javac 1.2 gets confused
            }
        }

        // Listenable overrides
        OVERRIDE public void set(Listenable from) { set(((Double)from).get()); }
        OVERRIDE public void resetToDefault() { set(getDefaultValue()); }
        OVERRIDE public boolean isDefault() { return get() == getDefaultValue(); }
        OVERRIDE public java.lang.String toString() { return ""+get(); }

        // Number overrides
        OVERRIDE public double getDouble() { return value; }
        OVERRIDE public void setDouble(double newValue) { set(newValue); }
        OVERRIDE public double minDouble() { return minValue; }
        OVERRIDE public double maxDouble() { return maxValue; }
        OVERRIDE public double defaultDouble() { return defaultValue; }
    }
    public static class String extends Listenable
    {
        private java.lang.String value, defaultValue;
        public String(java.lang.String defaultValue)
        {
            this.defaultValue = defaultValue;
            this.value = this.defaultValue; // immutable so can share
        }
        public java.lang.String getDefaultValue() { return defaultValue; }
        public java.lang.String get() { return value; }
        public void set(java.lang.String newValue)
        {
            if (!newValue.equals(value))
            {
                value = newValue;
                this.notifyListenersThatValueChanged(); // "this." necessary or javac 1.2 gets confused
            }
        }

        // Listenable overrides
        OVERRIDE public void set(Listenable from) { set(((String)from).get()); }
        OVERRIDE public void resetToDefault() { set(getDefaultValue()); }
        OVERRIDE public boolean isDefault() { return get().equals(getDefaultValue()); }
        OVERRIDE public java.lang.String toString() { return ""+get(); }
    }
    public static class Color extends Listenable
    {
        private java.awt.Color value, defaultValue;
        public Color(java.awt.Color defaultValue)
        {
            this.defaultValue = defaultValue;
            this.value = this.defaultValue; // immutable so can share
        }
        public java.awt.Color getDefaultValue() { return defaultValue; }
        public java.awt.Color get() { return value; }
        public void set(java.awt.Color newValue)
        {
            if (!newValue.equals(value))
            {
                value = newValue;
                this.notifyListenersThatValueChanged(); // "this." necessary or javac 1.2 gets confused
            }
        }

        // Listenable overrides
        OVERRIDE public void set(Listenable from) { set(((Color)from).get()); }
        OVERRIDE public void resetToDefault() { set(getDefaultValue()); }
        OVERRIDE public boolean isDefault() { return get().equals(getDefaultValue()); }
        OVERRIDE public java.lang.String toString() { return ""+get(); }
    }
    public static class FloatVector extends Listenable
    {
        private float value[], defaultValue[];
        public FloatVector(float defaultValue[])
        {
            this.defaultValue = VecMath.copyvec(defaultValue);
            this.value = VecMath.copyvec(this.defaultValue); // don't share
        }
        public float[] getDefaultValue() { return defaultValue; }
        public float[] get() { return value; }
        public void set(float newValue[])
        {
            if (!VecMath.equalsExactly(newValue, value))
            {
                // assumes all vectors will have the same dimension, and never null
                VecMath.copyvec(value, newValue);
                this.notifyListenersThatValueChanged(); // "this." necessary or javac 1.2 gets confused
            }
        }

        // Listenable overrides
        OVERRIDE public void set(Listenable from) { set(((FloatVector)from).get()); }
        OVERRIDE public void resetToDefault() { set(getDefaultValue()); }
        OVERRIDE public boolean isDefault() { return VecMath.equalsExactly(get(),getDefaultValue()); }
        OVERRIDE public java.lang.String toString() { return Arrays.toStringCompact(get()); }
    }
    public static class FloatMatrix extends Listenable
    {
        private float value[][], defaultValue[][];
        public FloatMatrix(float defaultValue[][])
        {
            this.defaultValue = VecMath.copymat(defaultValue);
            this.value = VecMath.copymat(this.defaultValue); // don't share
        }
        public float[][] getDefaultValue() { return defaultValue; }
        public float[][] get() { return value; }
        public void set(float newValue[][])
        {
            if (!VecMath.equalsExactly(newValue, value))
            {
                // assumes all matrices will have the same dimensions, and never null
                VecMath.copymat(value, newValue);
                this.notifyListenersThatValueChanged(); // "this." necessary or javac 1.2 gets confused
            }
        }

        // Listenable overrides
        OVERRIDE public void set(Listenable from) { set(((FloatMatrix)from).get()); }
        OVERRIDE public void resetToDefault() { set(getDefaultValue()); }
        OVERRIDE public boolean isDefault() { return VecMath.equalsExactly(get(),getDefaultValue()); }
        OVERRIDE public java.lang.String toString()
        {
            if (false)
                return Arrays.toStringCompact(get());
            else
            {
                // Special case hack to make identity matrix more concise...
                // omit ".0" from the ends of numbers.
                StringBuffer sb = new StringBuffer();
                sb.append('{');
                for (int i = 0; i < value.length; ++i)
                {
                    if (i > 0)
                        sb.append(',');
                    sb.append('{');
                    for (int j = 0; j < value[i].length; ++j)
                    {
                        if (j > 0)
                            sb.append(',');
                        sb.append(value[i][j]);
                        if (sb.substring(sb.length()-2).equals(".0")) // safe because sb.length() is at least 2 by now
                            sb.delete(sb.length()-2, sb.length());
                    }
                    sb.append('}');
                }
                sb.append('}');
                return sb.toString();
            }
        }
    }


    /**
    * Return an array consisting of all Listenables
    * in all public Listenable and Listenable[] members
    * in the given object.
    */
    public static Listenable[] allListenablesInObject(Object obj)
    {
        com.donhatchsw.compat.ArrayList list = new com.donhatchsw.compat.ArrayList();

        Class<?> objClass = obj.getClass();
        java.lang.reflect.Field[] fields = objClass.getFields();
        for (int iField = 0; iField < fields.length; iField++)
        {
            java.lang.reflect.Field field = fields[iField];
            Class<?> fieldType = field.getType();
            try {
                if (Listenable.class.isAssignableFrom(fieldType)) // if Listenable is a superclass of fieldType
                {
                    //System.out.println("    found Listenable field "+field);
                    list.add(field.get(obj));
                }
                else if (Listenable[].class.isAssignableFrom(fieldType)) // if Listenable[] is a superclass of fieldType
                {
                    //System.out.println("    found Listenable[] field "+field);
                    Listenable array[] = (Listenable[])field.get(obj);
                    for (int i = 0; i < array.length; ++i)
                        list.add(array[i]);
                }
            } catch (IllegalAccessException e) {}
        }
        Listenable array[] = new Listenable[list.size()];
        list.toArray(array);
        return array;
    } // allListenablesInObject

} // class Listenable
