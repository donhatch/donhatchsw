package com.donhatchsw.util;

/**
* Wrappers for boolean, int, float, double, java.awt.Color
* that notify interested listeners when the value changes.
* This is useful for keeping multiple user
* interfaces that control the same variable
* in sync.
*/
public abstract class Listenable
{
    public interface Listener
    {
        public void valueChanged();
    }

    // XXX need to use weak refs
    public void addListener(Listener listener)
    {
        // XXX assert it's not there
        listeners.remove(listener);
        listeners.add(listener);
    }
    public void removeListener(Listener listener)
    {
        // XXX assert it's there
        listeners.remove(listener);
    }
    public abstract void resetToDefault();
    public abstract boolean isDefault();

    private com.donhatchsw.compat.ArrayList listeners =
        new com.donhatchsw.compat.ArrayList();

    protected void notifyListenersThatValueChanged()
    {
        int n = listeners.size();
        for (int i = 0; i < n; ++i)
            ((Listener)listeners.get(i)).valueChanged();
    }

    public static class Boolean extends Listenable
    {
        private boolean value, defaultValue;
        public Boolean(boolean defaultValue)
        {
            this.defaultValue = defaultValue;
            this.value = defaultValue;
        }
        public boolean getDefaultValue() { return defaultValue; }
        public boolean get() { return value; }
        public void set(boolean newValue)
        {
            if (newValue != value)
            {
                value = newValue;
                notifyListenersThatValueChanged();
            }
        }
        public void resetToDefault() { set(getDefaultValue()); }
        public boolean isDefault() { return get() == getDefaultValue(); }
    }
    public static class Int extends Listenable
    {
        private int value, minValue, maxValue, defaultValue;
        public Int(int minValue, int maxValue, int defaultValue)
        {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.defaultValue = defaultValue;
            this.value = defaultValue;
        }
        public int getDefaultValue() { return defaultValue; }
        public int get() { return value; }
        public void set(int newValue)
        {
            if (newValue != value)
            {
                value = newValue;
                notifyListenersThatValueChanged();
            }
        }
        public void resetToDefault() { set(getDefaultValue()); }
        public boolean isDefault() { return get() == getDefaultValue(); }
    }
    public static class Float extends Listenable
    {
        private float value, minValue, maxValue, defaultValue;
        public Float(float minValue, float maxValue, float defaultValue)
        {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.defaultValue = defaultValue;
            this.value = defaultValue;
        }
        public float getMinValue() { return minValue; }
        public float getMaxValue() { return maxValue; }
        public float getDefaultValue() { return defaultValue; }
        public float get() { return value; }
        public void set(float newValue)
        {
            if (newValue != value)
            {
                value = newValue;
                notifyListenersThatValueChanged();
            }
        }
        public void resetToDefault() { set(getDefaultValue()); }
        public boolean isDefault() { return get() == getDefaultValue(); }
    }
    public static class Double extends Listenable
    {
        private double value, minValue, maxValue, defaultValue;
        public Double(double minValue, double maxValue, double defaultValue)
        {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.defaultValue = defaultValue;
            this.value = defaultValue;
        }
        public double getMinValue() { return minValue; }
        public double getMaxValue() { return maxValue; }
        public double getDefaultValue() { return defaultValue; }
        public double get() { return value; }
        public void set(double newValue)
        {
            if (newValue != value)
            {
                value = newValue;
                notifyListenersThatValueChanged();
            }
        }
        public void resetToDefault() { set(getDefaultValue()); }
        public boolean isDefault() { return get() == getDefaultValue(); }
    }
    public static class Color extends Listenable
    {
        private java.awt.Color value, defaultValue;
        public Color(java.awt.Color defaultValue)
        {
            this.defaultValue = defaultValue;
            this.value = defaultValue;
        }
        public java.awt.Color getDefaultValue() { return defaultValue; }
        public java.awt.Color get() { return value; }
        public void set(java.awt.Color newValue)
        {
            if (!newValue.equals(value))
            {
                value = newValue;
                notifyListenersThatValueChanged();
            }
        }
        public void resetToDefault() { set(getDefaultValue()); }
        public boolean isDefault() { return get().equals(getDefaultValue()); }
    }
} // class Listenable
