// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// !!! THIS FILE WAS AUTOMATICALLY GENERATED BY javacpp; DO NOT EDIT !!!
// 102 # 1 "com/donhatchsw/util/BlueNoise.prejava"
// 103 # 1 "<built-in>"
// 104 # 1 "<command-line>"
// 105 # 1 "/usr/include/stdc-predef.h" 1 3 4

// 107 # 1 "/usr/include/stdc-predef.h" 3 4
/* Copyright (C) 1991-2019 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */




/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */

/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */
// 142 # 52 "/usr/include/stdc-predef.h" 3 4
/* wchar_t uses Unicode 10.0.0.  Version 10.0 of the Unicode Standard is
   synchronized with ISO/IEC 10646:2017, fifth edition, plus
   the following additions from Amendment 1 to the fifth edition:
   - 56 emoji characters
   - 285 hentaigana
   - 3 additional Zanabazar Square characters */
// 149 # 1 "<command-line>" 2
// 150 # 1 "com/donhatchsw/util/BlueNoise.prejava"

// 152 # 1 "com/donhatchsw/util/BlueNoise.prejava"
// From Eurographics 2012, Ebeida/Mitchell/Patney/Davidson/Owens
// "A Simple Algorithm for Maximal Poisson-Disk Sampling in High Dimensions"
package com.donhatchsw.util;
// 156 # 1 "com/donhatchsw/util/macros.h" 1
//
// macros.h
//
// 160 # 14 "com/donhatchsw/util/macros.h"
// NOTE: this causes a,b to be evaluated twice on failure, so is not ideal. might be better to do a block... ?
// 162 # 30 "com/donhatchsw/util/macros.h"
// Note: the additional "(a)==(b)||" is to make it work correctly for infinities...
// and causes the args to be evaluated twice.
// 165 # 67 "com/donhatchsw/util/macros.h"
// XXX ... what a mess
// 167 # 5 "com/donhatchsw/util/BlueNoise.prejava" 2

import com.donhatchsw.util.Arrays;
import com.donhatchsw.util.VecMath;

// Temporarily, so PRINT, OUT, etc. will go to System.err instead of System.out


// TODO: blue noise on unit sphere
// TODO: varying disk radii
public class BlueNoise
{

    private static class Cell
    {
        public double min[];
        public double max[];
        public int baseGridIndex;
        public void init(double min[], double max[], int baseGridIndex)
        {
            this.min = min; // acquires ownership
            this.max = max; // acquires ownership
            this.baseGridIndex = baseGridIndex;
        }
        public Cell(double min[], double max[], int baseGridIndex)
        {
            init(min, max, baseGridIndex);
        }
        public String toString()
        {
            return "["+VecMath.toString(min)+" .. "+VecMath.toString(max)+"]("+baseGridIndex+")";
        }
    } // class Cell

    private static boolean contains(Cell cell, double[] point)
    {
        for (int i = 0; (i) < (point.length); ++i)
            if (!((cell.min[i] <=(point[i]))&&((point[i])<= cell.max[i])))
                return false;
        return true;
    }

    private static void expandIndex(int iBaseGrid[], int nBaseGrid, int IBaseGrid)
    {
        int d = iBaseGrid.length;
        for (int i = 0; (i) < (d); ++i)
        {
            iBaseGrid[i] = IBaseGrid % nBaseGrid;
            IBaseGrid /= nBaseGrid;
        }
        do { if (!((IBaseGrid)==(0))) throw new Error("CHECK failed at "+"com/donhatchsw/util/BlueNoise.prejava"+"("+54 +"): (" + "IBaseGrid" + ")" + "==" + "(" + "0" + ") ("+(IBaseGrid)+" vs. "+(0)+")"); } while (false);
    }
    static int contractIndex(int nBaseGrid, int iBaseGrid[])
    {
        int d = iBaseGrid.length;
        int answer = 0;
        for (int i = (d)-1; (i) >= 0; --i)
            answer = answer*nBaseGrid + iBaseGrid[i];
        return answer;
    }

    private static double wrappedDistSqrd(double a[], double b[])
    {
        double answer = 0.;
        int n = a.length;
        for (int i = 0; (i) < (n); ++i)
        {
            double dist = b[i] - a[i];
            if (dist > .5)
                dist -= 1.;
            else if (dist < -.5)
                dist += 1.;
            do { if (!(((-.5 <=(dist))&&((dist)<= .5)))) throw new Error("CHECK failed at "+"com/donhatchsw/util/BlueNoise.prejava"+"("+76 +"): " + "INRANGE(-.5 <=, dist, <= .5)" + ""); } while (false);
            answer += dist*dist;
        }
        return answer;
    } // wrappedDistSqrd
    private static double wrappedMaxDistSqrd(double a[], double b0[], double b1[])
    {
        double answer = 0.;
        int n = a.length;
        for (int i = 0; (i) < (n); ++i)
        {
            double ai = a[i];
            double b0i = b0[i];
            double b1i = b1[i];
            double biAvg = (b0i+b1i)*.5;
            double avgDist = biAvg - a[i];
            if (avgDist < -.5)
                ai -= 1.;
            else if (avgDist > .5)
                ai += 1.;
            double dist = (ai < biAvg ? b1i : b0i) - ai; // might be negative or positive
            answer += dist*dist;
        }
        return answer;
    } // wrappedMaxDistSqrd

    static boolean BRUTEFORCE = false;

    private static boolean isCoveredByADisk(double nonOverlappingDiskRadius,
                                            int maxIndexDifferenceOfInterest,
                                            int nBaseGrid,
                                            double baseGridExpanded[][/*1*/][],
                                            double point[/*d*/],
                                            int startIndex,
                                            int template[])
    {
        int d = point.length;
        double thresholdDist2 = ((nonOverlappingDiskRadius*2.)*(nonOverlappingDiskRadius*2.));
        if (BRUTEFORCE || startIndex == -1)
        {
            // XXX brute force for starters
            int NBaseGridExpanded = baseGridExpanded.length;
            for (int IBaseGridExpanded = 0; (IBaseGridExpanded) < (NBaseGridExpanded); ++IBaseGridExpanded)
            {
                // dup code below
                double sample[] = baseGridExpanded[IBaseGridExpanded][0];
                if (sample != null)
                {
                    //System.err.println("              (in func) sample = "+VecMath.toString(sample));
                    double thisDist2 = wrappedDistSqrd(sample, point);
                    if (thisDist2 < thresholdDist2)
                    {
                        //System.err.println("                  yes");
                        return true;
                    }
                    else
                    {
                        //System.err.println("                  no");
                    }
                }
            }
        }
        else
        {
            for (int iTemplate = 0; (iTemplate) < (template.length); ++iTemplate)
            {
                int index = startIndex + template[iTemplate];
                double sample[] = baseGridExpanded[index][0];
                if (sample != null)
                {
                    double thisDist2 = wrappedDistSqrd(sample, point);
                    if (thisDist2 < thresholdDist2)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    private static boolean isCompletelyCoveredByADisk(double nonOverlappingDiskRadius,
                                                      int maxIndexDifferenceOfInterest,
                                                      int nBaseGrid,
                                                      double baseGridExpanded[][/*1*/][],
                                                      double min[/*d*/], double max[/*d*/],
                                                      int startIndex,
                                                      int template[])
    {
        int verboseLevel = 0;
        if (verboseLevel >= 1) System.err.println("    in isCompletelyCoveredByADisk");
        int d = min.length;
        double thresholdDist2 = ((nonOverlappingDiskRadius*2.)*(nonOverlappingDiskRadius*2.));

        if (BRUTEFORCE || startIndex == -1)
        {
            // XXX brute force for starters
            int NBaseGridExpanded = baseGridExpanded.length;
            for (int IBaseGridExpanded = 0; (IBaseGridExpanded) < (NBaseGridExpanded); ++IBaseGridExpanded)
            {
                // dup code from below
                double sample[] = baseGridExpanded[IBaseGridExpanded][0];
                if (sample != null)
                {
                    double thisDist2 = wrappedMaxDistSqrd(sample, min, max);
                    if (thisDist2 < thresholdDist2)
                    {
                        //System.err.println("        yup. (brute force)");
                        if (verboseLevel >= 1) System.err.println("    out isCompletelyCoveredByADisk (yes, completely covered by disk centered at "+VecMath.toString(sample)+") because thisDist2="+thisDist2+" < "+thresholdDist2+"=thresholdDist2 i.e. thisDist="+Math.sqrt(thisDist2)+" < "+Math.sqrt(thresholdDist2)+"=thresholdDist");
                        return true;
                    }
                }
            }
        }
        else
        {
            for (int iTemplate = 0; (iTemplate) < (template.length); ++iTemplate)
            {
                int index = startIndex + template[iTemplate];
                double sample[] = baseGridExpanded[index][0];
                if (sample != null)
                {
                    double thisDist2 = wrappedMaxDistSqrd(sample, min, max);
                    if (thisDist2 < thresholdDist2)
                    {
                        //System.err.println("        yes!");
                        if (verboseLevel >= 1) System.err.println("    out isCompletelyCoveredByADisk (yes, completely covered by disk centered at "+VecMath.toString(sample)+")");
                        return true;
                    }
                }
            }
        }
        if (verboseLevel >= 1) System.err.println("    out isCompletelyCoveredByADisk (nope)");
        return false;
    }
    private static int intpow(int a, int b)
    {
        int answer = 1;
        for (int i = 0; (i) < (b); ++i)
            answer *= a;
        return answer;
    }

    public static int calcMaxIndexDifferenceOfInterest(double nonOverlappingDiskRadius,
                                                       double cellWidth)
    {
        // Say cellWidth is 1.
        // If overlappingDiskRadius>1 then answer=1.
        // If overlappingDiskRadius in (1,2) then a disk can completely cover one cell width
        // so answer is 2.
        // If overlappingDiskRadius in (2,3) then a disk can completely cover 2 cell widths
        // so answer is 3.
        // So answer is ceil(overlappingDiskRadius); however,
        // when exactly on a boundary, can round down, so say floor(...+1) instead of ceil(...).
        int answer = (int)Math.floor(2.*nonOverlappingDiskRadius / cellWidth) + 1;
        return answer;
    }

    // Maximal blue noise in unit box [-.5,.5]^n, toroidally wrapped.
    public static double[][] blueNoiseInUnitBox(int d, double nonOverlappingDiskRadius,
                                                java.util.Random rng)
    {
        int verboseLevel = 0;
        if (verboseLevel >= 1) System.err.println("    in blueNoiseInUnitBox");
        if (verboseLevel >= 1) System.err.println("      d="+d);
        if (verboseLevel >= 1) System.err.println("      nonOverlappingDiskRadius="+nonOverlappingDiskRadius);
        // http://www.cs.sandia.gov/~samitch/papers/eurographics_mps-final-with-appendix.pdf
        double A = .5; // see paper
        double B = 2; // see paper... although I don't use it because I don't quite understand

        // Choose base grid cell size so its diagonal
        // is <= (min distance between two samples) = 2*nonOverlappingDiskRadius.
        double minBaseGridCellDiagonal = 2. * nonOverlappingDiskRadius;
        if (verboseLevel >= 1) System.err.println("      minBaseGridCellDiagonal = "+minBaseGridCellDiagonal);
        double minBaseGridCellWidth = minBaseGridCellDiagonal / Math.sqrt(d);
        if (verboseLevel >= 1) System.err.println("      minBaseGridCellWidth = "+minBaseGridCellWidth);

        int nBaseGrid = (int)Math.ceil(1./minBaseGridCellWidth);
        if (verboseLevel >= 1) System.err.println("      nBaseGrid = "+nBaseGrid);
        double baseGridCellWidth = 1./nBaseGrid;
        if (verboseLevel >= 1) System.err.println("      baseGridCellWidth = "+baseGridCellWidth);
        int maxIndexDifferenceOfInterest = calcMaxIndexDifferenceOfInterest(nonOverlappingDiskRadius, baseGridCellWidth);
        if (verboseLevel >= 1) System.err.println("      maxIndexDifferenceOfInterest = "+maxIndexDifferenceOfInterest);

        int NBaseGrid = intpow(nBaseGrid, d);
        int nBaseGridExpanded = nBaseGrid + 2*maxIndexDifferenceOfInterest;
        if (verboseLevel >= 1) System.err.println("      nBaseGridExpanded = "+nBaseGridExpanded);
        int NBaseGridExpanded = intpow(nBaseGridExpanded, d);

        double answer[][] = new double[NBaseGrid][]; // max possible
        int nAnswer = 0;
        {
            double baseGridExpanded[][][] = new double[NBaseGridExpanded][][];
            {
                int iBaseGrid[] = new int[d]; // scratch for loop
                int iBaseGridExpanded[] = new int[d]; // scratch for loop
                // Fill in initial corner
                for (int IBaseGrid = 0; (IBaseGrid) < (NBaseGrid); ++IBaseGrid)
                {
                    expandIndex(iBaseGrid, nBaseGrid, IBaseGrid);
                    int IBaseGridExpanded = contractIndex(nBaseGridExpanded, iBaseGrid);
                    baseGridExpanded[IBaseGridExpanded] = new double[1][]; // null initially
                }
                // Fill in dup entries, pointing to entries in initial corner
                for (int IBaseGridExpanded = 0; (IBaseGridExpanded) < (NBaseGridExpanded); ++IBaseGridExpanded)
                {
                    if (baseGridExpanded[IBaseGridExpanded] == null)
                    {
                        expandIndex(iBaseGridExpanded, nBaseGridExpanded, IBaseGridExpanded);
                        for (int i = 0; (i) < (d); ++i)
                            iBaseGridExpanded[i] %= nBaseGrid;
                        baseGridExpanded[IBaseGridExpanded] = baseGridExpanded[contractIndex(nBaseGridExpanded, iBaseGridExpanded)];
                    }
                }
            }
            Cell activeCells[] = new Cell[NBaseGrid];
            {
                int iBaseGrid[] = new int[d]; // scratch for loop
                for (int IBaseGrid = 0; (IBaseGrid) < (NBaseGrid); ++IBaseGrid)
                {
                    expandIndex(iBaseGrid, nBaseGrid, IBaseGrid);
                    //System.err.println("          iBaseGrid = "+Arrays.toStringCompact(iBaseGrid));
                    double min[] = new double[d];
                    double max[] = new double[d];
                    for (int i = 0; (i) < (d); ++i)
                    {
                        min[i] = (iBaseGrid[i]+0)/(double)nBaseGrid - .5;
                        max[i] = (iBaseGrid[i]+1)/(double)nBaseGrid - .5;
                    }
                    for (int i = 0; (i) < (d); ++i)
                        iBaseGrid[i] += maxIndexDifferenceOfInterest;
                    int IBaseGridExpanded = contractIndex(nBaseGridExpanded, iBaseGrid);

                    activeCells[IBaseGrid] = new Cell(min, max, IBaseGridExpanded);
                    //System.err.println("          activeCells["+IBaseGrid+"] = "+activeCells[IBaseGrid]);
                }
            }

            int template[] = new int[intpow(2*maxIndexDifferenceOfInterest+1, d)]; // max possible
            {
                int nTemplate = 0;
                int index[] = new int[d]; // scratch for loop
                for (int Index = 0; (Index) < (template.length); ++Index)
                {
                    expandIndex(index, 2*maxIndexDifferenceOfInterest+1, Index);
                    for (int i = 0; (i) < (d); ++i)
                        index[i] -= maxIndexDifferenceOfInterest;
                    if (true) // XXX TODO: make the right condition here!
                    {
                        // convert to delta of flat indices into baseGridExpanded
                        int delta = contractIndex(nBaseGridExpanded, index);
                        template[nTemplate++] = delta;
                    }
                }
                template = (int[])Arrays.subarray(template, 0, nTemplate);
            }
            if (verboseLevel >= 1) System.err.println("      template = "+Arrays.toStringCompact(template));

            int nActiveCells = NBaseGrid;
            while (nActiveCells > 0)
            {
                if (verboseLevel >= 1) System.err.println("      nActiveCells = "+nActiveCells);

                // throw darts
                int nThrows = (int)Math.ceil(A * activeCells.length);
                for (int iThrow = 0; (iThrow) < (nThrows); ++iThrow)
                {
                    // select an active cell uniformly at random
                    int iCell = rng.nextInt(nActiveCells);
                    Cell cell = activeCells[iCell];
                    if (baseGridExpanded[cell.baseGridIndex][0] != null) // if parent base grid cell has a sample
                    {
                        // remove activeCells[iCell]
                        activeCells[iCell] = activeCells[--nActiveCells];
                    }
                    else
                    {
                        // throw candidate dart into the cell, uniform random
                        double[] dart = new double[d];
                        for (int i = 0; (i) < (d); ++i)
                        {
                            double t = rng.nextDouble();
                            dart[i] = ((1-(t))*(cell.min[i]) + (t)*(cell.max[i]));
                        }
                        //System.err.println("              dart: "+VecMath.toString(dart));
                        if (!isCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, dart, cell.baseGridIndex, template))
                        {
                            //CHECK(!isCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, dart, -1, template));
                            // promote dart to sample by adding it to the base grid and answer
                            //System.err.println("                  promoting to sample!");
                            baseGridExpanded[cell.baseGridIndex][0] = dart;
                            answer[nAnswer++] = dart;

                            // remove activeCells[iCell]
                            activeCells[iCell] = activeCells[--nActiveCells];
                            // additional cells might be covered, but these are ignored for now
                        }
                    }
                    if (nActiveCells == 0)
                        break;
                }

                // subdivide each cell into 2^d subcells, and
                // retain the uncovered ones.
                // The paper refers to "B" and "b" but I don't understand it.
                Cell subcells[] = new Cell[nActiveCells * (1<<d)];
                int nSubCells = 0;
                double min[] = new double[d];
                double max[] = new double[d];
                for (int iCell = 0; (iCell) < (nActiveCells); ++iCell)
                {
                    Cell cell = activeCells[iCell];
                    if (!isCompletelyCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, cell.min, cell.max, cell.baseGridIndex, template))
                    {
                        //CHECK(!isCompletelyCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, cell.min, cell.max, -1, template));
                        for (int iSub = 0; (iSub) < (1<<d); ++iSub)
                        {
                            for (int i = 0; (i) < (d); ++i)
                            {
                                int bit = (iSub>>i) & 1;
                                if (bit == 0)
                                {
                                    min[i] = cell.min[i];
                                    max[i] = (cell.min[i]+cell.max[i])/2.;
                                }
                                else
                                {
                                    min[i] = (cell.min[i]+cell.max[i])/2.;
                                    max[i] = cell.max[i];
                                }
                            }
                            // If we can't easily prove that the subcell is covered, then retain it
                            if (!isCompletelyCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, min, max, cell.baseGridIndex, template))
                            {
                                //CHECK(!isCompletelyCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, min, max, -1, template));
                                subcells[nSubCells++] = new Cell(min, max, cell.baseGridIndex);
                                // that acquired ownership of min,max, so reallocate
                                min = new double[d];
                                max = new double[d];
                            }
                        }
                    }
                }

                if (verboseLevel >= 1) System.err.println("          nSubCells = "+nSubCells);

                activeCells = subcells;
                nActiveCells = nSubCells;
            } // while (nActiveCells > 0)
            if (false)
            {
                // sanity check that no two points are closer than 2*nonOverlappingDiskRadius apart
                System.err.println("  sanity checking that no two points are too close together...");
                for (int iSample = 0; (iSample) < (nAnswer); ++iSample)
                for (int jSample = 0; (jSample) < (nAnswer); ++jSample)
                {
                    if (iSample != jSample)
                    {
                        double dist = VecMath.dist(answer[iSample], answer[jSample]);
                        do { if (!((dist)>=(2*nonOverlappingDiskRadius))) throw new Error("CHECK failed at "+"com/donhatchsw/util/BlueNoise.prejava"+"("+434 +"): (" + "dist" + ")" + ">=" + "(" + "2*nonOverlappingDiskRadius" + ") ("+(dist)+" vs. "+(2*nonOverlappingDiskRadius)+")"); } while (false);
                    }
                }
            }
            if (false)
            {
                // sanity check that nothing uncovered remains
                System.err.println("  sanity checking that nothing uncovered remains...");
                int nChecks = 1000;
                double checkPoint[] = new double[d]; // scratch for loop
                for (int iCheck = 0; (iCheck) < (nChecks); ++iCheck)
                {
                    for (int i = 0; (i) < (d); ++i)
                    {
                        checkPoint[i] = rng.nextDouble() - .5;
                    }
                    boolean isCovered = false;
                    //System.err.println("          checkPoint = "+VecMath.toString(checkPoint));
                    for (int iSample = 0; (iSample) < (nAnswer); ++iSample)
                    {
                        //System.err.println("              sample = "+VecMath.toString(answer[iSample]));
                        double scratchPoint[] = VecMath.copyvec(checkPoint);
                        for (int i = 0; (i) < (d); ++i)
                            if (scratchPoint[i] > answer[iSample][i]+.5)
                                scratchPoint[i] -= 1.;
                            else if (scratchPoint[i] < answer[iSample][i]-.5)
                                scratchPoint[i] += 1.;
                        if (VecMath.dist(scratchPoint, answer[iSample]) < 2*nonOverlappingDiskRadius)
                        {
                            //System.err.println("                  yes, covered");
                            isCovered = true;
                        }
                        else
                        {
                            //System.err.println("                  no, not covered");
                        }
                    }
                    int baseGridIndex = -1; // -1 means check all base grid cells
                    do { if (!((isCovered)==(isCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, checkPoint, baseGridIndex, template)))) throw new Error("CHECK failed at "+"com/donhatchsw/util/BlueNoise.prejava"+"("+472 +"): (" + "isCovered" + ")" + "==" + "(" + "isCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, checkPoint, baseGridIndex, template)" + ") ("+(isCovered)+" vs. "+(isCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, checkPoint, baseGridIndex, template))+")"); } while (false);
                    if (!isCovered)
                    {
                        System.err.println("checkPoint = "+VecMath.toString(checkPoint));
                    }
                    do { if (!(isCovered)) throw new Error("CHECK failed at "+"com/donhatchsw/util/BlueNoise.prejava"+"("+477 +"): " + "isCovered" + ""); } while (false);
                }
                System.err.println("  done.");
            }
        }
        answer = (double[][])Arrays.subarray(answer, 0, nAnswer);

        if (verboseLevel >= 1) System.err.println("    out blueNoiseInUnitBox");
        return answer;
    } // blueNoiseInUnitBox
    // Maximal blue noise on 2-dimensional surface of sphere in 3d.
    public static double[][] blueNoiseOnUnitSphere3d(int n, double nonOverlappingDiskRadius)
    {
        do {if (true) throw new Error("Unimplemented at "+"com/donhatchsw/util/BlueNoise.prejava"+"("+490 +")"); } while (false); // TODO: implement me!
        return null;
    } // blueNoiseOnUnitSphere


    // L'Huiler's formula, as referred to in
    // http://math.stackexchange.com/questions/9819/area-of-a-spherical-triangle
    // Works best when triangle is small and well-shaped, as it is in our case.
    private static double absSphericalTriangleArea(double v0[],
                                                   double v1[],
                                                   double v2[])
    {
        double a = VecMath.angleBetweenUnitVectors(v1,v2);
        double b = VecMath.angleBetweenUnitVectors(v2,v0);
        double c = VecMath.angleBetweenUnitVectors(v0,v1);
        double absArea = 4. * Math.atan(Math.sqrt(Math.tan((a+b-c)/4.)
                                                * Math.tan((b+c-a)/4.)
                                                * Math.tan((c+a-b)/4.)
                                                * Math.tan((a+b+c)/4.)));
        return absArea;
    }
    private static double absSphericalQuadArea(double v0[],
                                        double v1[],
                                        double v2[],
                                        double v3[])
    {
        // CBB: I'm sure there's a version in which the diagonals cancel
        return absSphericalTriangleArea(v0,v1,v2)
             + absSphericalTriangleArea(v2,v3,v0);
    }

    // Return (x,y,z) normalized.
    private static void normalize1(double answer[], double x, double y, double z)
    {
        double length = Math.sqrt(x*x + y*y + z*z);
        answer[0] = x / length;
        answer[1] = y / length;
        answer[2] = z / length;
    }
    private static double[] normalize(double x, double y, double z)
    {
        double answer[] = new double[3];
        normalize1(answer, x, y, z);
        return answer;
    }
    private static double projectedSphericalQuadArea(double X0, double X1,
                                                     double Y0, double Y1)
    {
        // TODO: take 4 scratch vectors as params
        double v00[] = normalize(X0,Y0,1.);
        double v10[] = normalize(X1,Y0,1.);
        double v11[] = normalize(X1,Y1,1.);
        double v01[] = normalize(X0,Y1,1.);
        return absSphericalQuadArea(v00,v10,v11,v01);
    }


    // little test program
    public static void main(String args[])
    {
        if (true)
        {
            do { if (!(((((absSphericalTriangleArea(new double[]{1,0,0}, new double[]{0,1,0}, new double[]{0,0,1}))-(Math.PI/2)) <= (1e-12)) && (((Math.PI/2)-(absSphericalTriangleArea(new double[]{1,0,0}, new double[]{0,1,0}, new double[]{0,0,1}))) <= (1e-12))))) throw new Error("CHECK failed at "+"com/donhatchsw/util/BlueNoise.prejava"+"("+552 +"): " + "EQ(absSphericalTriangleArea(new double[]{1,0,0}, new double[]{0,1,0}, new double[]{0,0,1}), Math.PI/2, 1e-12)" + ""); } while (false)

                                                                                      ;
        }

        if (args.length == 1 && args[0].equals("E"))
        {
            // Try to print the 1d E function.
            // I think E(x)/x converges to approx .7476249.
            // Yes! It's called Renyi's parking constant.
            // https://en.wikipedia.org/wiki/Alfr%C3%A9d_R%C3%A9nyi
            // Which says it's approximately 74.75979% (sequence A050996 in the OEIS): https://oeis.org/A050996
            // Hmm, http://mathworld.wolfram.com/RenyisParkingConstants.html covers it,
            // but is it the same as mine? Oh, their M(x) = my E(x-1), M(x+1) = E(x)... so maybe it's right.
            // And another good-looking paper from 2014:
            // http://arxiv.org/pdf/1406.1781.pdf "RENYI’S PARKING PROBLEM REVISITED"
            // which supposedly gives a faster-converging answer to the 1d case.
            long seed = 0;
            java.util.Random rng = new java.util.Random(seed);
            int nTrialsPerX = 10000;
            double xMin = 0.;
            double xMax = 10.;
            int nIncrs = 100;
            for (int iIncr = 0; (iIncr) < (nIncrs); ++iIncr)
            {
                double x = ((1-((iIncr+1.)/nIncrs))*(xMin) + ((iIncr+1.)/nIncrs)*(xMax)); // skip xMin, include xMax
                int sum = 0;
                for (int iTrial = 0; (iTrial) < (nTrialsPerX); ++iTrial)
                {
                    // E(x) = Ewrapped(x+2)-1, I think.
                    double X = x+2;
                    double blueNoise[][] = blueNoiseInUnitBox(1, .5/X, rng);
                    int N = blueNoise.length;
                    do { if (!(N >= 1)) throw new Error("CHECK failed at "+"com/donhatchsw/util/BlueNoise.prejava"+"("+585 +"): " + "N >= 1" + ""); } while (false);
                    int n = N - 1;
                    sum += n;
                }
                double avg = (double)sum / (double)nTrialsPerX;
                System.out.println(""+x+" "+avg+" "+(avg/x));
            }
            return;
        }
        else if (args.length >= 3)
        {
            int d = Integer.parseInt(args[0]);
            double nonOverlappingDiskRadius = Double.parseDouble(args[1]);
            long seed = args.length>=3 ? Long.parseLong(args[2]) : 0;
            java.util.Random rng = new java.util.Random(seed);
            System.err.println("d = "+d);
            System.err.println("nonOverlappingDiskRadius = "+nonOverlappingDiskRadius);
            double blueNoise[][] = blueNoiseInUnitBox(d, nonOverlappingDiskRadius, rng);
            System.err.println("blueNoise.length = "+blueNoise.length);
            for (int iSample = 0; (iSample) < (blueNoise.length); ++iSample)
            {
                for (int i = 0; (i) < (d); ++i)
                    System.out.print(" "+blueNoise[iSample][i]);
                System.out.println();
            }
        }
        else
        {
            System.err.println("Usage: BlueNoise E");
            System.err.println("Usage: BlueNoise <d> <nonOverlappingDiskRadius> [<seed>]");
            System.exit(1);
        }

    } // main


} // class BlueNoise
