package com.donhatchsw.util;
#include "macros.h" 

public class NewtonSolver
{
    public abstract static class Fun
    {
        /**
        * Derived class must implement f
        */
        public abstract double[] f(double x[]);
        /**
        * Derived class may implement jacobian if they wish.
        * if they don't, they will get this default
        * implementation which estimates the jacobian
        * using finite differences.
        */
        public double[][] J(double x[])
        {
            double fx[] = f(x);
            double answer[][] = new double[x.length][fx.length];
            double dx = eps();
            double invdx = 1./dx;
            double xplusdx[] = VecMath.copyvec(x); // scratch
            FORI (i, x.length)
            {
                xplusdx[i] += dx;
                VecMath.setcolumn(answer,
                                  i,
                                  VecMath.vxs(
                                      VecMath.vmv(f(xplusdx),
                                                  fx),
                                      invdx));
                xplusdx[i] = x[i];
            }
            //PRINTMAT(answer);
            return answer;
        }
        // the default J() uses this for the finite difference.
        // derived classes may implement this
        // to make it use a different finite difference.
        public double eps()
        {
            return 1e-4;
        }
    } // interface Fun

    /**
    * x should be loaded with the initial guess;
    * it will be refined.
    */
    public static void solve(double x[],
                             double y[],
                             Fun fun,
                             int maxIterations)
    {
        boolean debug = false;
        if (debug) PRINT(maxIterations);
        double prevErrorLengthSqrd = Double.POSITIVE_INFINITY;
        int minIterations = 10; // seem to need this, or it thinks it stopped improving after 1 iteration in some sticky situations.  I think actually the termination condition should be that it didn't improve in some number of iterations?
        FORI (iIter, maxIterations)
        {
            if (debug) PRINT(iIter);
            if (debug) PRINTVEC(x);
            if (debug) PRINTVEC(y);

            double fx[] = fun.f(x);
            double error[] = VecMath.vmv(fx, y);
            double errorLengthSqrd = VecMath.normsqrd(error);
            if (debug) PRINT(errorLengthSqrd);
            if (iIter >= minIterations
             && !(errorLengthSqrd < prevErrorLengthSqrd))
            {
                //System.out.println("    stopped improving after "+iIter+" iterations");
                return;
            }
            prevErrorLengthSqrd = errorLengthSqrd;

            // One newton iteration:
            // If we want to find x such that f(x) = y,
            // start with xGuess
            // and evaluate J = df/dx at xGuess.
            // Then, approximately,
            //       J(xGuess) * (x-xGuess) = (y - f(xGuess)
            //                    x-xGuess = J^-1 * (y - f(xGuess))
            //                    x = xGuess + J^-1 * (y - f(xGuess))


            double Jx[][] = fun.J(x);
            // x += Jx^-1 * (y - fx)
            VecMath.vpv(x,
                        x,
                            VecMath.sxv(
                                1., // fudge-- only go partway there
                                VecMath.invmxv(Jx,
                                              VecMath.vmv(y, fx))));

            fx = fun.f(x);
        }
    } // solve

    // Little test program
    public static void main(String args[])
    {
        System.out.println("    in NewtonSolver.main");
        {
            // Find x such that x^2 == 100, with starting guess of 9
            Fun fun = new Fun() {
                public double[] f(double x[])
                {
                    return new double[]{x[0]*x[0]};
                }
            };
            double x[] = {9}; // initial guess
            double y[] = {100};

            solve(x, y, fun, 1000);
        }
        {
            // find x0,x1 such that {x0*x0,x0*x1} == {100,200}
            // (answer is 10,20)
            Fun fun = new Fun() {
                public double[] f(double x[])
                {
                    return new double[] {
                        x[0]*x[0],
                        x[0]*x[1],
                    };
                }
            };
            double x[] = {5,25}; // initial guess
            double y[] = {100,200};

            solve(x, y, fun, 1000);
        }
        System.out.println("    out NewtonSolver.main");
    } // main
} // class NewtonSolver

