/* vim: set filetype=java: */
package com.donhatchsw.util;
#include "macros.h" 

public class NewtonSolver
{
    public abstract static class Fun
    {
        int dim;
        private double xplusdx[/*dim*/]; // scratch for J
        private double f_xplusdx[/*dim*/]; // scratch for J
        public Fun(int dim)
        {
            this.dim = dim;
            this.xplusdx = new double[dim];
            this.f_xplusdx = new double[dim];
        }

        /**
        * Derived class must implement f
        */
        public abstract void f(double x[], double answer[]);
        /**
        * Derived class may implement jacobian if they wish.
        * if they don't, they will get this default
        * implementation which estimates the jacobian
        * using finite differences.
        * The fx that is passed to this function during a newton solve is always f(x),
        * in case the computation of J(x) finds it useful.
        */
        public void J(double x[], double fx[], double answer[/*dim*/][/*dim*/])
        {
            double dx = eps();
            double invdx = 1./dx;
            VecMath.copyvec(dim, xplusdx, x); // into scratch
            FORI (iCol, dim)
            {
                xplusdx[iCol] += dx; // temporarily change just this entry
                f(xplusdx, f_xplusdx); // f_xplusdx = f(xplusdx);
                FORI (iRow, dim)
                    answer[iRow][iCol] = (f_xplusdx[iRow]-fx[iRow]) * invdx;
                xplusdx[iCol] = x[iCol]; // restore this entry
            }
            //PRINTMAT(answer);
        }
        // the default J() uses this for the finite difference.
        // derived classes may implement this
        // to make it use a different finite difference.
        // Best practice is probably to normalize the problem size so that the maximum
        // value occurring in the problem is around 1.
        // XXX change to 1e-6?  should list reasons for wanting different values.
        // XXX CatenaryRotated currently (not numerically stabilized yet) doesn't like 1e-4 but likes 1e-6.
        public double eps()
        {
            return 1e-4;
        }
    } // abstract static class Fun

    /**
    * x should be loaded with the initial guess;
    * it will be refined.
    */
    public static void solve(double x[],
                             double y[], // const
                             Fun fun,
                             int minIterations, // seem to need this, or it thinks it stopped improving after 1 iteration in some sticky situations.  I think actually the termination condition should be that it didn't improve in some number of iterations? hmm. actually should make it smart and adaptive I think.
                             int maxIterations,
                             boolean adaptiveFlag)
    {
        boolean debug = false;
        if (debug) System.out.println("    in solve(x="+VecMath.toString(x)+", y="+VecMath.toString(y)+", maxIterations="+maxIterations+", adaptiveFlag="+adaptiveFlag);
        if (debug) PRINT(maxIterations);
        int dim = fun.dim;
        double prevPrevErrorLengthSqrd = Double.POSITIVE_INFINITY;
        double prevErrorLengthSqrd = Double.POSITIVE_INFINITY;
        double fx[] = new double[dim]; // scratch
        double error[] = new double[dim]; // scratch
        double Jx[][] = new double[dim][dim]; // scratch
        double fullCorrection[] = new double[dim]; // scratch

        FORI (iIter, maxIterations)
        {
            if (debug) PRINT(iIter);
            if (debug) PRINTVEC(x);
            if (debug) PRINTVEC(y);

            if (iIter==0 || !adaptiveFlag) // if haven't already calculated it
                fun.f(x, fx); // fx = f(x);

            if (debug) PRINTVEC(fx);

            VecMath.vmv(error, fx, y);
            double errorLengthSqrd = VecMath.normsqrd(error);
            if (debug) PRINT(errorLengthSqrd);
            if (debug) PRINT(Math.sqrt(errorLengthSqrd));
            if (Double.isNaN(errorLengthSqrd) || Double.isInfinite(errorLengthSqrd))
            {
                if (debug) System.out.println("    out solve (NaN or infinite)");
                return;
            }
            if (iIter >= minIterations
             && !(errorLengthSqrd < prevErrorLengthSqrd))
             // XXX something about prevPrev? think about it
            {
                if (debug) System.out.println("    out solve (stopped improving after "+iIter+" iterations");
                return;
            }
            prevPrevErrorLengthSqrd = prevErrorLengthSqrd;
            prevErrorLengthSqrd = errorLengthSqrd;

            // One newton iteration:
            // If we want to find x such that f(x) = y,
            // start with xGuess
            // and evaluate J = df/dx at xGuess.
            // Then, approximately,
            //       J(xGuess) * (x-xGuess) = (y - f(xGuess)
            //                    x-xGuess = J^-1 * (y - f(xGuess))
            //                    x = xGuess + J^-1 * (y - f(xGuess))


            fun.J(x, fx, Jx); // Jx = J(x, fx)

            // Sanity check J, so we don't get assert fails down in invmxv
            for (int i = 0; i < Jx.length; ++i)
            for (int j = 0; j < Jx[i].length; ++j)
            {
                assert(!Double.isNaN(Jx[i][j]));
            }

            // TODO: get rid of memory allocations!!
            // x += Jx^-1 * (y - fx)
            VecMath.invmxv(fullCorrection,
                           Jx,
                           VecMath.vmv(y, fx)); // XXX wait a minute, isn't that -error?
            if (!adaptiveFlag)
            {
                // Naive implementation
                VecMath.vpv(x, x, fullCorrection);
            }
            else
            {
                // Adaptive. If it's too wild, half the step size, til it's sane.
                double prevErrorLength = Math.sqrt(prevErrorLengthSqrd);
                double maxStepScale = 1.; // can set this to something less to force it to be gentle and slow for debugging
                for (double stepScale = maxStepScale; ; stepScale *= .5)
                {
                    assert(stepScale > 0.);
                    double xNewMaybe[] = VecMath.vpsxv(x,
                                                       stepScale,
                                                       fullCorrection);
                    double fxNewMaybe[] = new double[dim];
                    fun.f(xNewMaybe, fxNewMaybe); // fxNewMaybe = f(xNewMaybe)
                    double ySortOf[] = VecMath.lerp(fx, y, stepScale);
                    if (debug) PRINTVEC(xNewMaybe);
                    if (debug) PRINTVEC(fxNewMaybe);
                    VecMath.vmv(error, fxNewMaybe, ySortOf);
                    double newErrorLengthSqrd = VecMath.normsqrd(error);
                    double newErrorLength = Math.sqrt(newErrorLengthSqrd);
                    if (debug) PRINT(newErrorLength);
                    if (newErrorLength <= .5 * prevErrorLength * stepScale)
                    {
                        VecMath.copyvec(x, xNewMaybe);
                        VecMath.copyvec(fx, fxNewMaybe);
                        // TODO: the next call to f will be redundant with the one we just did; should fix that
                        break;
                    }
                    // Too wild; pull back to half as far
                    if (debug) System.out.println("        too wild! stepScale "+stepScale+" -> "+(stepScale*.5)+"");
                }
            }
        }
        if (debug) System.out.println("    out solve (maxIterations="+maxIterations+" reached)");
    } // solve

    // Little test program
    public static void main(String args[])
    {
        System.out.println("    in NewtonSolver.main");
        {
            // Find x such that x^2 == 100, with starting guess of 9
            Fun fun = new Fun(1) {
                @Override public void f(double x[], double fx[])
                {
                    fx[0] = x[0]*x[0];
                }
            };
            double x[] = {9}; // initial guess
            double y[] = {100};

            solve(x, y, fun, 10, 1000, false);
        }
        {
            // find x0,x1 such that {x0*x0,x0*x1} == {100,200}
            // (answer is 10,20)
            Fun fun = new Fun(2) {
                @Override public void f(double x[], double fx[])
                {
                  fx[0] = x[0]*x[0];
                  fx[1] = x[0]*x[1];
                }
            };
            double x[] = {5,25}; // initial guess
            double y[] = {100,200};

            solve(x, y, fun, 10, 1000, false);
        }
        // XXX TODO: exercise adaptiveFlag
        System.out.println("    out NewtonSolver.main");
    } // main
} // class NewtonSolver

