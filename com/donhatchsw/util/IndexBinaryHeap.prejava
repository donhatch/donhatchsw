/* vim: set filetype=java: */
#include "macros.h"
package com.donhatchsw.util;
/**
* Binary heap, as described here:
* <a href="http://en.wikipedia.org/wiki/Binary_heap">http://en.wikipedia.org/wiki/Binary_heap</a>
*/
public class IndexBinaryHeap
{
    SortStuff.IntComparator cmp;
    private int heap[];             // heap index to index
    private int indexToHeapIndex[]; // index to heap index
    private int size;               // size of heap

    /** Constructs a heap whose indices are in the range 0,...,max-1. */
    public IndexBinaryHeap(int max, SortStuff.IntComparator cmp)
    {
        assert_ge(max, 0);
        assert_ne(cmp, null);
        this.heap = VecMath.fillvec(max, -1);
        this.indexToHeapIndex = VecMath.fillvec(max, -1);
        this.size = 0;
        this.cmp = cmp;
    }
    /** Adds the given index to the heap.  It is an error to call this on an index that is already in the heap. */
    public void add(int index)
    {
        assert_eq(indexToHeapIndex[index], -1);
        indexToHeapIndex[index] = size;
        heap[size] = index;
        size++;
        adjust(index);
    }
    /** Remove the given index from the heap.  It is an error to call this on an index that is not in the heap. */
    public void remove(int index)
    {
        assert(size >= 1);
        int heapIndex = indexToHeapIndex[index];
        assert_ne(heapIndex, -1);

        indexToHeapIndex[index] = -1;
        size--;

        if (heapIndex != size)
        {
            // Move the last heap item into the vacated position
            int indexBeingMoved = heap[size];
            heap[size] = -1;
            heap[heapIndex] = indexBeingMoved;
            indexToHeapIndex[indexBeingMoved] = heapIndex;
            adjust(indexBeingMoved);
        }
        else
        {
            heap[size] = -1;
        }
    }
    public boolean contains(int i)
    {
        assert_le_lt(0, i, heap.length);
        return indexToHeapIndex[i] != -1;
    }

    /** Returns the index with minimum value, without removing it.  It is an error to call this if the heap is empty. */
    public int min()
    {
        assert(size >= 1);
        return heap[0];
    }
    
    /** Removes and returns the index with minimum value.  It is an error to call this if the heap is empty. */
    public int extractMin()
    {
        int ret = min();
        remove(ret);
        return ret;
    }
    /** Tells whether the heap is empty. */
    public boolean isEmpty()
    {
        return size == 0;
    }
    /** Equivalent to remove(index); add(index,val); but more efficient. It's allowed for index to have changed "value", i.e. for cmp to place it in a different position in the linear ordering than before, but the relative positions of other items must stay the same. */
    public void adjust(int index)
    {
        //System.out.println("in adjust(index="+index+")");
        int heapIndex = indexToHeapIndex[index];
        assert_ne(heapIndex, -1);

        #define HEAP_PARENT(i) (((i)-1)>>1)
        #define HEAP_CHILD0(i) (((i)<<1)+1)
        #define HEAP_CHILD1(i) (((i)<<1)+2)

        int heapIndexParent;
        if (heapIndex > 0
         && cmp.compare(index, heap[heapIndexParent = HEAP_PARENT(heapIndex)]) < 0)
        {
            // trickle up
            //System.out.println("TRICKLING UP");
            do
            {
                // swap heapIndex with heapIndexParent,
                // but don't bother to fill it in at the parent,
                // and ascend
                int indexParent = heap[heapIndexParent];
                heap[heapIndex] = indexParent;
                indexToHeapIndex[indexParent] = heapIndex;
                heapIndex = heapIndexParent;
                // index stays the same
            } while (heapIndex > 0
                  && cmp.compare(index, heap[heapIndexParent = HEAP_PARENT(heapIndex)]) < 0);
        }
        else
        {
            // trickle down
            //System.out.println("TRICKLING DOWN");
            while (true)
            {
                int heapIndexChild0 = HEAP_CHILD0(heapIndex);
                if (heapIndexChild0 >= size)
                    break; // at leaf of tree; done

                int heapIndexChild1 = HEAP_CHILD1(heapIndex);
                int heapIndexChild = heapIndexChild1 < size &&
                    cmp.compare(heap[heapIndexChild1], heap[heapIndexChild0]) < 0 ? heapIndexChild1 : heapIndexChild0;
                if (cmp.compare(index, heap[heapIndexChild]) > 0)
                {
                    // swap with smaller of children,
                    // but don't bother to fill it in at the child,
                    // and descend
                    int indexChild = heap[heapIndexChild];
                    heap[heapIndex] = indexChild;
                    indexToHeapIndex[indexChild] = heapIndex;
                    heapIndex = heapIndexChild;
                    // index stays the same
                }
                else
                    break; // happy with children; done
            }
        }
        heap[heapIndex] = index;
        indexToHeapIndex[index] = heapIndex;
        //System.out.println("out adjust");
    } // adjust

    public void sanityCheck(boolean isTotalOrder)
    {
        if (false)
        {
            System.out.println("in sanityCheck");
            //print();
        }

        int max = heap.length;
        assert_eq(max, indexToHeapIndex.length);
        assert_le_le(0, size, max);

        int nValid = 0;
        int nInvalid = 0;
        FORI (i, max)
        {
            if (indexToHeapIndex[i] != -1)
            {
                //assert(!Double.isNaN(values[i])); // hmm, can't assert this... should I add API for determining if value in heap?
                assert_le_lt(0, indexToHeapIndex[i], size);
                assert_eq(heap[indexToHeapIndex[i]], i);
                nValid++;
            }
            else
            {
                //assert(Double.isNaN(values[i])); // hmm, can't assert this... should I add API for determining if value in heap?
                nInvalid++;
            }
        }
        assert_eq(nValid, size);
        assert_eq(nValid+nInvalid, max);

        FORI (i, size)
        {
            assert_le_lt(0, heap[i], max);
            assert_eq(indexToHeapIndex[heap[i]], i);
        }
        for (int i = size; i < max; ++i)
        {
            assert_eq(heap[i], -1);
        }

        for (int i = 1; i < size; ++i) // all but [0]
        {
            if (isTotalOrder)
            {
                // can assert strictly less, since nothing's exactly equal
                // due to tiebreaking by index.
                assert_lt(cmp.compare(heap[HEAP_PARENT(i)], heap[i]), 0);
            }
            else
            {
                assert_le(cmp.compare(heap[HEAP_PARENT(i)], heap[i]), 0);
            }
        }
    } // sanityCheck

    // For test program, see IndexBinaryHeapKeyed
} // class IndexBinaryHeap
