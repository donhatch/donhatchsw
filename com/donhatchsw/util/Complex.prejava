package com.donhatchsw.util;

/**
* Complex number class.
* I looked at org.apache.commons.math3.complex.Complex
* but didn't like it enough, so wrote my own instead.
* Differences from org.apache.commons.math3.complex.Complex:
* <ul>
*   <li> calls things plus,minus,times,over,etc. rather than add,subtract,multiply,divide,etc.
*   <li> exposes x,y as public fields
*   <li> has abs2(),dot,cross,perpDot
*   <li> has in-place operations plusEquals etc.
*   <li> doesn't do arbitrary ComplexFields (whatever that is)
* </ul>
* <br> TODO: trig and hyperbolic trig?
* <br> TODO: lerp?
* <br> TODO: cosf1 (versine)? log1p? expm1? other?
* <br> TODO: put methods into groups if possible in javadoc output.  I guess write a doclet? :-( see http://www.ee.ucl.ac.uk/~mflanaga/java/Complex.html, they seem to have something nice but it's not javadoc.   maybe start with http://blog.outerthoughts.com/2014/05/javadoc-fun-frustration/
* <br> TODO: unit/confidence test
*/
public class Complex
{
    final public static Complex ZERO    = new Complex(0.,0.);
    final public static Complex ONE     = new Complex(1.,0.);
    final public static Complex I       = new Complex(0.,1.);

    /** real part */
    public double x;
    /** imaginary part */
    public double y;

    /** Assigns to a complex number from real and imaginary parts. */
    public Complex set(double x, double y)
    {
        this.x = x;
        this.y = y;
        return this;
    }
    /** Assigns to a complex number from a real. */
    public Complex set(double x)
    {
        return set(x, 0.);
    }
    /** Assigns to a complex number from another. */
    public Complex set(Complex that)
    {
        return set(that.x, that.y);
    }

    /** Creates a complex number given the real and imaginary parts. */
    public Complex(double x, double y)
    {
        set(x, y);
    }
    /** Creates a complex number given only the real part. */
    public Complex(double x)
    {
        set(x);
    }
    /** Creates a complex number from another. */
    public Complex(Complex that)
    {
        set(that);
    }


    //---------------------------------------------------------------------------
    // Basic utilities, that take all args in x,y form
    // and put the result in an existing Complex,
    // and return that Complex (for chaining).
    public Complex equalsPlus(double x0, double y0, double x1, double y1)
    {
        return set(x0 + x1,
                   y0 + y1);
    }
    public Complex equalsMinus(double x0, double y0, double x1, double y1)
    {
        return set(x0 - x1,
                   y0 - y1);
    }
    /** Backwards minus. */
    public Complex equalsFrom(double x0, double y0, double x1, double y1)
    {
        return equalsMinus(x1, y1, x0, y0);
    }
    public Complex equalsTimes(double x0, double y0, double x1, double y1)
    {
        return set(x0*x1 - y0*y1,
                   x0*y1 + y0*x1);
    }
    public Complex equalsOver(double x0, double y0, double x1, double y1)
    {
        double denominator = x1*x1 + y1*y1;
        return set((x0*x1 + y0*y1) / denominator,
                   (y0*x1 - x0*y1) / denominator);
    }
    /** Backwards over. */
    public Complex equalsUnder(double x0, double y0, double x1, double y1)
    {
        return equalsOver(x1, y1, x0, y0);
    }
    public Complex equalsPow(double x0, double y0, double x1, double y1)
    {
        // z0^z1 = exp(z1*log(z0))
        return log(x0,y0).timesEquals(x1,y1).expEquals();
    }

    public Complex equalsNeg(double x, double y)
    {
        return set(-x, -y);
    }
    public Complex equalsInverse(double x, double y)
    {
        double denominator = x*x + y*y;
        return set(x / denominator,
                  -y / denominator);
    }
    public Complex equalsConj(double x, double y)
    {
        return set(x, -y);
    }
    public Complex equalsTransposed(double x, double y)
    {
        return set(y, x);
    }
    public Complex equalsPerpDot(double x, double y)
    {
        return set(-y, x);
    }
    public Complex equalsExp(double x, double y)
    {
        double magnitude = Math.exp(abs(x, y));
        return set(magnitude * Math.cos(y),
                   magnitude * Math.sin(y));
    }
    public Complex equalsLog(double x, double y)
    {
        return set(Math.log(abs2(x, y))*.5, // = Math.log(abs(x,y)) but without the hypot
                   arg(x, y));
    }
    //---------------------------------------------------------------------------


    //---------------------------------------------------------------------------
    // Accumulation functions with no RHS.
    // (might be better called negate, invert, conjugate, transpose, perpDotize, exponentiate, logize/logarithmate/logarithmicize? argh)
    // (and the others might better be called add,subtract,multiply,divide? hmm.)
    public Complex negEquals()        { return this.equalsNeg    (this.x, this.y); }
    public Complex inverseEquals()    { return this.equalsInverse(this.x, this.y); }
    public Complex conjEquals()       { return this.equalsConj   (this.x, this.y); }
    public Complex transposedEquals() { return this.equalsTransposed   (this.x, this.y); }
    public Complex perpDotEquals()    { return this.equalsPerpDot(this.x, this.y); }
    public Complex expEquals()        { return this.equalsExp    (this.x, this.y); }
    public Complex logEquals()        { return this.equalsLog    (this.x, this.y); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Accumulation functions with RHS in x,y form.
    // Answer goes back into this, with no memory allocations.
    public Complex plusEquals (double x, double y) { return this.equalsPlus (this.x, this.y, x, y); }
    public Complex minusEquals(double x, double y) { return this.equalsMinus(this.x, this.y, x, y); }
    /** Backwards minus. */
    public Complex fromEquals (double x, double y) { return this.equalsFrom (this.x, this.y, x, y); }
    public Complex timesEquals(double x, double y) { return this.equalsTimes(this.x, this.y, x, y); }
    public Complex overEquals (double x, double y) { return this.equalsOver (this.x, this.y, x, y); }
    /** Backwards over. */
    public Complex underEquals(double x, double y) { return this.equalsUnder(this.x, this.y, x, y); }
    public Complex powEquals  (double x, double y) { return this.equalsPow  (this.x, this.y, x, y); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Convenience accumulation functions with RHS in x (real only) form.
    // Answer goes back into this, with no memory allocations.
    public Complex plusEquals (double x) { return this.plusEquals (x, 0.); }
    public Complex minusEquals(double x) { return this.minusEquals(x, 0.); }
    /** Backwards minus. */
    public Complex fromEquals (double x) { return this.fromEquals (x, 0.); }
    public Complex timesEquals(double x) { return this.timesEquals(x, 0.); }
    public Complex overEquals (double x) { return this.overEquals (x, 0.); }
    /** Backwards over. */
    public Complex underEquals(double x) { return this.underEquals(x, 0.); }
    public Complex powEquals  (double x) { return this.powEquals  (x, 0.); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Accumulation functions with RHS in Complex form.
    // Answer goes back into this, with no memory allocations.
    public Complex plusEquals (Complex that) { return this.plusEquals (that.x, that.y); }
    public Complex minusEquals(Complex that) { return this.minusEquals(that.x, that.y); }
    /** Backwards minus. */
    public Complex fromEquals (Complex that) { return this.fromEquals (that.x, that.y); }
    public Complex timesEquals(Complex that) { return this.timesEquals(that.x, that.y); }
    public Complex overEquals (Complex that) { return this.overEquals (that.x, that.y); }
    /** Backwards over. */
    public Complex underEquals(Complex that) { return this.underEquals(that.x, that.y); }
    public Complex powEquals  (Complex that) { return this.powEquals  (that.x, that.y); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Static functions allocating answer, with LHS in x,y form and no RHS.
    public static Complex neg       (double x, double y) { return new Complex(x, y).negEquals(); }
    public static Complex inverse   (double x, double y) { return new Complex(x, y).inverseEquals(); }
    public static Complex conj      (double x, double y) { return new Complex(x, y).conjEquals(); }
    public static Complex transposed(double x, double y) { return new Complex(x, y).transposedEquals(); }
    public static Complex perpDot   (double x, double y) { return new Complex(y, x).perpDotEquals(); }
    public static Complex exp       (double x, double y) { return new Complex(y, x).expEquals(); }
    public static Complex log       (double x, double y) { return new Complex(y, x).logEquals(); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Static functions allocating answer, with LHS and RHS in x,y form.
    public static Complex plus (double x0, double y0, double x1, double y1) { return new Complex(x0, y0).plusEquals (x1, y1); }
    public static Complex minus(double x0, double y0, double x1, double y1) { return new Complex(x0, y0).minusEquals(x1, y1); }
    /** Backwards minus. */
    public static Complex from (double x0, double y0, double x1, double y1) { return new Complex(x0, y0).fromEquals (x1, y1); }
    public static Complex times(double x0, double y0, double x1, double y1) { return new Complex(x0, y0).timesEquals(x1, y1); }
    public static Complex over (double x0, double y0, double x1, double y1) { return new Complex(x0, y0).overEquals (x1, y1); }
    /** Backwards over. */
    public static Complex under(double x0, double y0, double x1, double y1) { return new Complex(x0, y0).underEquals(x1, y1); }
    public static Complex pow  (double x0, double y0, double x1, double y1) { return new Complex(x0, y0).powEquals  (x1, y1); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Member functions allocating answer, with no RHS.
    public Complex neg()        { return neg    (this.x, this.y); }
    public Complex inverse()    { return inverse(this.x, this.y); }
    public Complex conj()       { return conj   (this.x, this.y); }
    public Complex transposed() { return transposed   (this.x, this.y); }
    public Complex perpDot()    { return perpDot(this.x, this.y); }
    public Complex exp()        { return exp    (this.x, this.y); }
    public Complex log()        { return log    (this.x, this.y); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Member functions allocating answer, with RHS in x,y form.
    public Complex plus (double x, double y) { return plus (this.x, this.y, x, y); }
    public Complex minus(double x, double y) { return minus(this.x, this.y, x, y); }
    /** Backwards minus. */
    public Complex from (double x, double y) { return from (this.x, this.y, x, y); }
    public Complex times(double x, double y) { return times(this.x, this.y, x, y); }
    public Complex over (double x, double y) { return over (this.x, this.y, x, y); }
    /** Backwards over. */
    public Complex under(double x, double y) { return under(this.x, this.y, x, y); }
    public Complex pow  (double x, double y) { return pow  (this.x, this.y, x, y); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Convenience member functions allocating answer, with RHS in x (real only) form.
    public Complex plus (double x) { return this.plus (x, 0.); }
    public Complex minus(double x) { return this.minus(x, 0.); }
    /** Backwards minus. */
    public Complex from (double x) { return this.from (x, 0.); }
    public Complex times(double x) { return this.times(x, 0.); }
    public Complex over (double x) { return this.over (x, 0.); }
    /** Backwards over. */
    public Complex under(double x) { return this.under(x, 0.); }
    public Complex pow  (double x) { return this.pow  (x, 0.); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Member functions allocating answer, with RHS in Complex form.
    public Complex plus (Complex that) { return this.plus (that.x, that.y); }
    public Complex minus(Complex that) { return this.minus(that.x, that.y); }
    /** Backwards minus. */
    public Complex from (Complex that) { return this.from (that.x, that.y); }
    public Complex times(Complex that) { return this.times(that.x, that.y); }
    public Complex over (Complex that) { return this.over (that.x, that.y); }
    /** Backwards over. */
    public Complex under(Complex that) { return this.under (that.x,that.y); }
    public Complex pow  (Complex that) { return this.pow  (that.x, that.y); }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Static binary functions returning double, with LHS and RHS in x,y form.
    public static double dot  (double x0, double y0, double x1, double y1) { return x0*x1 + y0*y1; }
    public static double cross(double x0, double y0, double x1, double y1) { return x0*y1 - y0*x1; }
    //---------------------------------------------------------------------------
    // Member binary functions returning double, with RHS in x,y form.
    public double dot  (double x, double y) { return dot  (this.x, this.y, x, y); }
    public double cross(double x, double y) { return cross(this.x, this.y, x, y); }
    //---------------------------------------------------------------------------
    // Convenience member binary functions returning double, with RHS in x (real only) form.
    public double dot  (double x) { return this.dot  (x, 0.); }
    public double cross(double x) { return this.cross(x, 0.); }
    //---------------------------------------------------------------------------
    // Member binary functions returning double, with RHS in Complex form.
    public double dot  (Complex that) { return this.dot  (that.x, that.y); }
    public double cross(Complex that) { return this.cross(that.x, that.y); }
    //---------------------------------------------------------------------------


    //---------------------------------------------------------------------------
    // Static unary functions returning double or String, taking arg in x,y form.
    /** Magnitude squared. */
    public static double abs2(double x, double y)
    {
        return x*x + y*y;
    }
    /** Magnitude. */
    public static double abs(double x, double y)
    {
        // Note, I've heard Math.hypot is slow but accurate... could use MyMath.hypot instead
        return Math.hypot(x, y);
    }
    /** Angle. */
    public static double arg(double x, double y)
    {
        return Math.atan2(y, x);
    }
    public static String toString(double x, double y)
    {
        return ""+x+"+"+y+"i";
    }
    //---------------------------------------------------------------------------

    //---------------------------------------------------------------------------
    // Member unary functions returning double or String.
    /** Magnitude squared. */
    public double abs2    () { return abs2    (this.x, this.y); }
    /** Magnitude. */
    public double abs     () { return abs     (this.x, this.y); }
    /** Angle. */
    public double arg     () { return arg     (this.x, this.y); }
    public String toString() { return toString(this.x, this.y); }
    //---------------------------------------------------------------------------
}
