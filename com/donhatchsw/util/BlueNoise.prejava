package com.donhatchsw.util;
#include "macros.h"

import com.donhatchsw.util.Arrays;
import com.donhatchsw.util.VecMath;

// Temporarily, so PRINT, OUT, etc. will go to System.err instead of System.out
#define out err

// TODO: blue noise on unit sphere
// TODO: varying disk radii
public class BlueNoise
{

    private static class Cell
    {
        public double min[];
        public double max[];
        public int baseGridIndex;
        public void init(double min[], double max[], int baseGridIndex)
        {
            this.min = min; // acquires ownership
            this.max = max; // acquires ownership
            this.baseGridIndex = baseGridIndex;
        }
        public Cell(double min[], double max[], int baseGridIndex)
        {
            init(min, max, baseGridIndex);
        }
        public String toString()
        {
            return "["+VecMath.toString(min)+" .. "+VecMath.toString(max)+"]("+baseGridIndex+")";
        }
    } // class Cell

    private static boolean contains(Cell cell, double[] point)
    {
        FORI (i, point.length)
            if (!INRANGE(cell.min[i] <=, point[i], <= cell.max[i]))
                return false;
        return true;
    }

    private static void expandIndex(int iBaseGrid[], int nBaseGrid, int IBaseGrid)
    {
        int d = iBaseGrid.length;
        FORI (i, d)
        {
            iBaseGrid[i] = IBaseGrid % nBaseGrid;
            IBaseGrid /= nBaseGrid;
        }
        assert_eq(IBaseGrid, 0);
    }
    static int contractIndex(int nBaseGrid, int iBaseGrid[])
    {
        int d = iBaseGrid.length;
        int answer = 0;
        FORIDOWN(i, d)
            answer = answer*nBaseGrid + iBaseGrid[i];
        return answer;
    }

    private static double wrappedDistSqrd(double a[], double b[])
    {
        double answer = 0.;
        int n = a.length;
        FORI (i, n)
        {
            double dist = b[i] - a[i];
            if (dist > .5)
                dist -= 1.;
            else if (dist < -.5)
                dist += 1.;
            assert(INRANGE(-.5 <=, dist, <= .5));
            answer += dist*dist;
        }
        return answer;
    } // wrappedDistSqrd
    private static double wrappedMaxDistSqrd(double a[], double b0[], double b1[])
    {
        double answer = 0.;
        int n = a.length;
        FORI (i, n)
        {
            double ai = a[i];
            double b0i = b0[i];
            double b1i = b1[i];
            double biAvg = (b0i+b1i)*.5;
            double avgDist = biAvg - a[i];
            if (avgDist < -.5)
                ai -= 1.;
            else if (avgDist > .5)
                ai += 1.;
            double dist = (ai < biAvg ? b1i : b0i) - ai; // might be negative or positive
            answer += dist*dist;
        }
        return answer;
    } // wrappedMaxDistSqrd

    static boolean BRUTEFORCE = false;

    private static boolean isCoveredByADisk(double nonOverlappingDiskRadius,
                                            int maxIndexDifferenceOfInterest,
                                            int nBaseGrid,
                                            double baseGridExpanded[][/*1*/][],
                                            double point[/*d*/],
                                            int startIndex,
                                            int template[])
    {
        int d = point.length;
        double thresholdDist2 = SQR(nonOverlappingDiskRadius*2.);
        if (BRUTEFORCE || startIndex == -1)
        {
            // XXX brute force for starters
            int NBaseGridExpanded = baseGridExpanded.length;
            FORI (IBaseGridExpanded, NBaseGridExpanded)
            {
                // dup code below
                double sample[] = baseGridExpanded[IBaseGridExpanded][0];
                if (sample != null)
                {
                    //System.err.println("              (in func) sample = "+VecMath.toString(sample));
                    double thisDist2 = wrappedDistSqrd(sample, point);
                    if (thisDist2 < thresholdDist2)
                    {
                        //System.err.println("                  yes");
                        return true;
                    }
                    else
                    {
                        //System.err.println("                  no");
                    }
                }
            }
        }
        else
        {
            FORI (iTemplate, template.length)
            {
                int index = startIndex + template[iTemplate];
                double sample[] = baseGridExpanded[index][0];
                if (sample != null)
                {
                    double thisDist2 = wrappedDistSqrd(sample, point);
                    if (thisDist2 < thresholdDist2)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    private static boolean isCompletelyCoveredByADisk(double nonOverlappingDiskRadius,
                                                      int maxIndexDifferenceOfInterest,
                                                      int nBaseGrid,
                                                      double baseGridExpanded[][/*1*/][],
                                                      double min[/*d*/], double max[/*d*/],
                                                      int startIndex,
                                                      int template[])
    {
        int verboseLevel = 0;
        if (verboseLevel >= 1) System.err.println("    in isCompletelyCoveredByADisk");
        int d = min.length;
        double thresholdDist2 = SQR(nonOverlappingDiskRadius*2.);

        if (BRUTEFORCE || startIndex == -1)
        {
            // XXX brute force for starters
            int NBaseGridExpanded = baseGridExpanded.length;
            FORI (IBaseGridExpanded, NBaseGridExpanded)
            {
                // dup code from below
                double sample[] = baseGridExpanded[IBaseGridExpanded][0];
                if (sample != null)
                {
                    double thisDist2 = wrappedMaxDistSqrd(sample, min, max);
                    if (thisDist2 < thresholdDist2)
                    {
                        //System.err.println("        yup. (brute force)");
                        if (verboseLevel >= 1) System.err.println("    out isCompletelyCoveredByADisk (yes, completely covered by disk centered at "+VecMath.toString(sample)+") because thisDist2="+thisDist2+" < "+thresholdDist2+"=thresholdDist2 i.e. thisDist="+Math.sqrt(thisDist2)+" < "+Math.sqrt(thresholdDist2)+"=thresholdDist");
                        return true;
                    }
                }
            }
        }
        else
        {
            FORI (iTemplate, template.length)
            {
                int index = startIndex + template[iTemplate];
                double sample[] = baseGridExpanded[index][0];
                if (sample != null)
                {
                    double thisDist2 = wrappedMaxDistSqrd(sample, min, max);
                    if (thisDist2 < thresholdDist2)
                    {
                        //System.err.println("        yes!");
                        if (verboseLevel >= 1) System.err.println("    out isCompletelyCoveredByADisk (yes, completely covered by disk centered at "+VecMath.toString(sample)+")");
                        return true;
                    }
                }
            }
        }
        if (verboseLevel >= 1) System.err.println("    out isCompletelyCoveredByADisk (nope)");
        return false;
    }
    private static int intpow(int a, int b)
    {
        int answer = 1;
        FORI (i, b)
            answer *= a;
        return answer;
    }

    public static int calcMaxIndexDifferenceOfInterest(double nonOverlappingDiskRadius,
                                                       double cellWidth)
    {
        // Say cellWidth is 1.
        // If overlappingDiskRadius>1 then answer=1.
        // If overlappingDiskRadius in (1,2) then a disk can completely cover one cell width
        // so answer is 2.
        // If overlappingDiskRadius in (2,3) then a disk can completely cover 2 cell widths
        // so answer is 3.
        // So answer is ceil(overlappingDiskRadius); however,
        // when exactly on a boundary, can round down, so say floor(...+1) instead of ceil(...).
        int answer = (int)Math.floor(2.*nonOverlappingDiskRadius / cellWidth) + 1;
        return answer;
    }

    // Maximal blue noise in unit box [-.5,.5]^n, toroidally wrapped.
    public static double[][] blueNoiseInUnitBox(int d, double nonOverlappingDiskRadius,
                                                java.util.Random rng)
    {
        int verboseLevel = 1;
        if (verboseLevel >= 1) System.err.println("    in blueNoiseInUnitBox");
        if (verboseLevel >= 1) System.err.println("      d="+d);
        if (verboseLevel >= 1) System.err.println("      nonOverlappingDiskRadius="+nonOverlappingDiskRadius);
        // http://www.cs.sandia.gov/~samitch/papers/eurographics_mps-final-with-appendix.pdf
        double A = .5; // see paper
        double B = 2; // see paper... although I don't use it because I don't quite understand

        // Choose base grid cell size so its diagonal
        // is <= (min distance between two samples) = 2*nonOverlappingDiskRadius.
        double minBaseGridCellDiagonal = 2. * nonOverlappingDiskRadius;
        if (verboseLevel >= 1) System.err.println("      minBaseGridCellDiagonal = "+minBaseGridCellDiagonal);
        double minBaseGridCellWidth = minBaseGridCellDiagonal / Math.sqrt(d);
        if (verboseLevel >= 1) System.err.println("      minBaseGridCellWidth = "+minBaseGridCellWidth);

        int nBaseGrid = (int)Math.ceil(1./minBaseGridCellWidth);
        if (verboseLevel >= 1) System.err.println("      nBaseGrid = "+nBaseGrid);
        double baseGridCellWidth = 1./nBaseGrid;
        if (verboseLevel >= 1) System.err.println("      baseGridCellWidth = "+baseGridCellWidth);
        int maxIndexDifferenceOfInterest = calcMaxIndexDifferenceOfInterest(nonOverlappingDiskRadius, baseGridCellWidth);
        if (verboseLevel >= 1) System.err.println("      maxIndexDifferenceOfInterest = "+maxIndexDifferenceOfInterest);

        int NBaseGrid = intpow(nBaseGrid, d);
        int nBaseGridExpanded = nBaseGrid + 2*maxIndexDifferenceOfInterest;
        if (verboseLevel >= 1) System.err.println("      nBaseGridExpanded = "+nBaseGridExpanded);
        int NBaseGridExpanded = intpow(nBaseGridExpanded, d);

        double answer[][] = new double[NBaseGrid][]; // max possible
        int nAnswer = 0;
        {
            double baseGridExpanded[][][] = new double[NBaseGridExpanded][][];
            {
                int iBaseGrid[] = new int[d]; // scratch for loop
                int iBaseGridExpanded[] = new int[d]; // scratch for loop
                // Fill in initial corner
                FORI (IBaseGrid, NBaseGrid)
                {
                    expandIndex(iBaseGrid, nBaseGrid, IBaseGrid);
                    int IBaseGridExpanded = contractIndex(nBaseGridExpanded, iBaseGrid);
                    baseGridExpanded[IBaseGridExpanded] = new double[1][]; // null initially
                }
                // Fill in dup entries, pointing to entries in initial corner
                FORI (IBaseGridExpanded, NBaseGridExpanded)
                {
                    if (baseGridExpanded[IBaseGridExpanded] == null)
                    {
                        expandIndex(iBaseGridExpanded, nBaseGridExpanded, IBaseGridExpanded);
                        FORI (i, d)
                            iBaseGridExpanded[i] %= nBaseGrid;
                        baseGridExpanded[IBaseGridExpanded] = baseGridExpanded[contractIndex(nBaseGridExpanded, iBaseGridExpanded)];
                    }
                }
            }
            Cell activeCells[] = new Cell[NBaseGrid];
            {
                int iBaseGrid[] = new int[d]; // scratch for loop
                FORI (IBaseGrid, NBaseGrid)
                {
                    expandIndex(iBaseGrid, nBaseGrid, IBaseGrid);
                    //System.err.println("          iBaseGrid = "+Arrays.toStringCompact(iBaseGrid));
                    double min[] = new double[d];
                    double max[] = new double[d];
                    FORI (i, d)
                    {
                        min[i] = (iBaseGrid[i]+0)/(double)nBaseGrid - .5;
                        max[i] = (iBaseGrid[i]+1)/(double)nBaseGrid - .5;
                    }
                    FORI (i, d)
                        iBaseGrid[i] += maxIndexDifferenceOfInterest;
                    int IBaseGridExpanded = contractIndex(nBaseGridExpanded, iBaseGrid);

                    activeCells[IBaseGrid] = new Cell(min, max, IBaseGridExpanded);
                    //System.err.println("          activeCells["+IBaseGrid+"] = "+activeCells[IBaseGrid]);
                }
            }

            int template[] = new int[intpow(2*maxIndexDifferenceOfInterest+1, d)]; // max possible
            {
                int nTemplate = 0;
                int index[] = new int[d]; // scratch for loop
                FORI (Index, template.length)
                {
                    expandIndex(index, 2*maxIndexDifferenceOfInterest+1, Index);
                    FORI (i, d)
                        index[i] -= maxIndexDifferenceOfInterest;
                    if (true) // XXX TODO: make the right condition here!
                    {
                        // convert to delta of flat indices into baseGridExpanded
                        int delta = contractIndex(nBaseGridExpanded, index);
                        template[nTemplate++] = delta;
                    }
                }
                template = (int[])Arrays.subarray(template, 0, nTemplate);
            }
            if (verboseLevel >= 1) System.err.println("      template = "+Arrays.toStringCompact(template));

            int nActiveCells = NBaseGrid;
            while (nActiveCells > 0)
            {
                if (verboseLevel >= 1) System.err.println("      nActiveCells = "+nActiveCells);

                // throw darts
                int nThrows = (int)Math.ceil(A * activeCells.length);
                FORI (iThrow, nThrows)
                {
                    // select an active cell uniformly at random
                    int iCell = rng.nextInt(nActiveCells);
                    Cell cell = activeCells[iCell];
                    if (baseGridExpanded[cell.baseGridIndex][0] != null) // if parent base grid cell has a sample
                    {
                        // remove activeCells[iCell]
                        activeCells[iCell] = activeCells[--nActiveCells];
                    }
                    else
                    {
                        // throw candidate dart into the cell, uniform random
                        double[] dart = new double[d];
                        FORI (i, d)
                        {
                            double t = rng.nextDouble();
                            dart[i] = LERP(cell.min[i], cell.max[i], t);
                        }
                        //System.err.println("              dart: "+VecMath.toString(dart));
                        if (!isCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, dart, cell.baseGridIndex, template))
                        {
                            //assert (!isCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, dart, -1, template));
                            // promote dart to sample by adding it to the base grid and answer
                            //System.err.println("                  promoting to sample!");
                            baseGridExpanded[cell.baseGridIndex][0] = dart;
                            answer[nAnswer++] = dart;

                            // remove activeCells[iCell]
                            activeCells[iCell] = activeCells[--nActiveCells];
                            // additional cells might be covered, but these are ignored for now
                        }
                    }
                    if (nActiveCells == 0)
                        break;
                }

                // subdivide each cell into 2^d subcells, and
                // retain the uncovered ones.
                // The paper refers to "B" and "b" but I don't understand it.
                Cell subcells[] = new Cell[nActiveCells * (1<<d)];
                int nSubCells = 0;
                double min[] = new double[d];
                double max[] = new double[d];
                FORI (iCell, nActiveCells)
                {
                    Cell cell = activeCells[iCell];
                    if (!isCompletelyCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, cell.min, cell.max, cell.baseGridIndex, template))
                    {
                        //assert (!isCompletelyCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, cell.min, cell.max, -1, template));
                        FORI (iSub, 1<<d)
                        {
                            FORI (i, d)
                            {
                                int bit = (iSub>>i) & 1;
                                if (bit == 0)
                                {
                                    min[i] = cell.min[i];
                                    max[i] = (cell.min[i]+cell.max[i])/2.;
                                }
                                else
                                {
                                    min[i] = (cell.min[i]+cell.max[i])/2.;
                                    max[i] = cell.max[i];
                                }
                            }
                            // If we can't easily prove that the subcell is covered, then retain it
                            if (!isCompletelyCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, min, max, cell.baseGridIndex, template))
                            {
                                //assert (!isCompletelyCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, min, max, -1, template));
                                subcells[nSubCells++] = new Cell(min, max, cell.baseGridIndex);
                                // that acquired ownership of min,max, so reallocate
                                min = new double[d];
                                max = new double[d];
                            }
                        }
                    }
                }

                if (verboseLevel >= 1) System.err.println("          nSubCells = "+nSubCells);

                activeCells = subcells;
                nActiveCells = nSubCells;
            } // while (nActiveCells > 0)
            if (false)
            {
                // sanity check that no two points are closer than 2*nonOverlappingDiskRadius apart
                System.err.println("  sanity checking that no two points are too close together...");
                FORI (iSample, nAnswer)
                FORI (jSample, nAnswer)
                {
                    if (iSample != jSample)
                    {
                        double dist = VecMath.dist(answer[iSample], answer[jSample]);
                        assert_ge(dist, 2*nonOverlappingDiskRadius);
                    }
                }
            }
            if (false)
            {
                // sanity check that nothing uncovered remains
                System.err.println("  sanity checking that nothing uncovered remains...");
                int nChecks = 1000;
                double checkPoint[] = new double[d]; // scratch for loop
                FORI (iCheck, nChecks)
                {
                    FORI (i, d)
                    {
                        checkPoint[i] = rng.nextDouble() - .5;
                    }
                    boolean isCovered = false;
                    //System.err.println("          checkPoint = "+VecMath.toString(checkPoint));
                    FORI (iSample, nAnswer)
                    {
                        //System.err.println("              sample = "+VecMath.toString(answer[iSample]));
                        double scratchPoint[] = VecMath.copyvec(checkPoint);
                        FORI (i, d)
                            if (scratchPoint[i] > answer[iSample][i]+.5)
                                scratchPoint[i] -= 1.;
                            else if (scratchPoint[i] < answer[iSample][i]-.5)
                                scratchPoint[i] += 1.;
                        if (VecMath.dist(scratchPoint, answer[iSample]) < 2*nonOverlappingDiskRadius)
                        {
                            //System.err.println("                  yes, covered");
                            isCovered = true;
                        }
                        else
                        {
                            //System.err.println("                  no, not covered");
                        }
                    }
                    int baseGridIndex = -1; // -1 means check all base grid cells
                    assert_eq(isCovered, isCoveredByADisk(nonOverlappingDiskRadius, maxIndexDifferenceOfInterest, nBaseGrid, baseGridExpanded, checkPoint, baseGridIndex, template));
                    if (!isCovered)
                    {
                        System.err.println("checkPoint = "+VecMath.toString(checkPoint));
                    }
                    assert(isCovered);
                }
                System.err.println("  done.");
            }
        }
        answer = (double[][])Arrays.subarray(answer, 0, nAnswer);

        if (verboseLevel >= 1) System.err.println("    out blueNoiseInUnitBox");
        return answer;
    } // blueNoiseInUnitBox
    // Maximal blue noise on d-1 dimensional surface of hypersphere in d dimensions.
    public static double[][] blueNoiseOnUnitSphere(int d, double nonOverlappingDiskRadius)
    {
        unimplemented(); // TODO: implement me!
        return null;
    } // blueNoiseOnUnitSphere

    // little test program
    public static void main(String args[])
    {
        if (args.length < 2)
        {
            System.err.println("Usage: BlueNoise <d> <nonOverlappingDiskRadius> [<seed>]");
            System.exit(1);
        }
        int d = Integer.parseInt(args[0]);
        double nonOverlappingDiskRadius = Double.parseDouble(args[1]);
        long seed = args.length>=3 ? Long.parseLong(args[2]) : 0;
        java.util.Random rng = new java.util.Random(seed);
        System.err.println("d = "+d);
        System.err.println("nonOverlappingDiskRadius = "+nonOverlappingDiskRadius);
        double blueNoise[][] = blueNoiseInUnitBox(d, nonOverlappingDiskRadius, rng);
        System.err.println("blueNoise.length = "+blueNoise.length);
#undef out
        FORI (iSample, blueNoise.length)
        {
            FORI (i, d)
                System.out.print(" "+blueNoise[iSample][i]);
            System.out.println();
        }
    } // main
} // class BlueNoise
