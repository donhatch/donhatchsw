/* vim: set filetype=java: */
#include "macros.h"

package com.donhatchsw.util;

/**
* Class to perform a topological sort on the integers 0..n-1,
* given a partial order (i.e. a list of pairs i,j such that result[i]&lt;result[j]
* is required to hold).
* <p>
* The simplest way to use this class is to simply say:
* <pre>
*     int result[] = new int[n];
*     int nComponents = TopSorter.topsort(result, partialOrder);
* </pre>
* <p>
* However, if you are going to be doing many topsorts,
* it is more efficient to do the following instead, since all the memory
* allocations are done up front:
* <pre>
*     int result[] = new int[maxN];
*     int partialOrder[] = new int[maxPartialOrderSize][2];
*     TopSorter topsorter = new TopSorter(maxN, maxPartialOrderSize);
*     ... fill in the first partialOrderSize entries of partialOrder ...
*     topsorter.topsort(n, result, partialOrderSize, partialOrder)
* </pre>
* The implementation uses Kosaraju's algorithm:
*      <a href="http://en.wikipedia.org/wiki/Strongly_connected_component">http://en.wikipedia.org/wiki/Strongly_connected_component</a>
* <p>
* Note, the number of connected components is returned, but if it's not n,
* there is no way of telling exactly what the connected components are.
* (It wouldn't be too hard to fix it so it does.)
*/
public class TopSorter
{
    // always-compiled-in assertion
    static private void Assert(boolean condition) { if (!condition) throw new Error("Assertion failed"); }

    private static class LinkedListOfInts
    {
        public int first = -1;
        public LinkedListOfInts rest = null;
        public String toString()
        {
            return rest==null ? "{"+first+"}" : "{"+first+","+rest+"}";
        }
    }

    private LinkedListOfInts successors[];
    private LinkedListOfInts predecessors[];
    private LinkedListOfInts linkPool[];

    private boolean visited[];
    private int finishingArray[];

    int perm[];
    int invPerm[];

    public TopSorter(int maxN, int maxPartialOrderSize)
    {
        successors = new LinkedListOfInts[maxN];
        predecessors = new LinkedListOfInts[maxN];
        linkPool = new LinkedListOfInts[2*maxPartialOrderSize];
        for (int i = 0; i < linkPool.length; ++i)
            linkPool[i] = new LinkedListOfInts();

        visited = new boolean[maxN];
        finishingArray = new int[maxN];

        perm = null; // created on first randomized call
        invPerm = null; // created on first randomized call
    } // TopSorter ctor

    /** The optimized method that does no memory allocations.
    * Returns the number of strongly connected components
    * (which is n iff there are no cycles, less then n otherwise).
    * XXX currently does in fact do memory allocations-- I need to fix this.
    */
    public int topsort(int n, int result[/*>=n*/],
                       int partialOrderSize, int partialOrder[/*>=partialOrderSize*/][/*2*/],
                       int connectedComponentStarts[/*>=partialOrderSize+1*/]) // yes +1! null if not interested
    {
        if (n > visited.length)
            throw new IllegalArgumentException("TopSorter.topsort called with n="+n+" > maxN="+successors.length+"");
        if (2*partialOrderSize > linkPool.length)
            throw new IllegalArgumentException("TopSorter.topsort called with partialOrderSize="+partialOrderSize+" > maxN="+linkPool.length+"");
        //PRINTARRAY(partialOrder);

        // Fill in the graph and reverse graph...
        {
            for (int i = 0; i < n; ++i)
            {
                successors[i] = null;
                predecessors[i] = null;
            }
            int iLink = 0;
            for (int iPair = 0; iPair < partialOrderSize; ++iPair)
            {
                int i = partialOrder[iPair][0];
                int j = partialOrder[iPair][1];
                if (i < 0 || i >= n)
                    throw new IllegalArgumentException("TopSorter.topsort called with a number "+i+" out of bounds of array size "+n+"");
                if (j < 0 || j >= n)
                    throw new IllegalArgumentException("TopSorter.topsort called with a number "+j+" out of bounds of array size "+n+"");

                linkPool[iLink].rest = successors[i];
                successors[i] = linkPool[iLink++];
                linkPool[iLink].rest = predecessors[j];
                predecessors[j] = linkPool[iLink++];

                successors[i].first = j;
                predecessors[j].first = i;
            }
            Assert(iLink == 2*partialOrderSize);
        }

        //System.out.println("forward...");
        VecMath.fillvec(visited, false);
        {
            int arraySize = 0;
            for (int i = 0; i < n; ++i)
            {
                if (!visited[i])
                    arraySize = dfs(i, successors, visited,
                                    null,
                                    finishingArray, // append to this on post
                                    arraySize);
            }
            Assert(arraySize == n);
        }
        //PRINTARRAY(finishingArray);
        //System.out.println("backward...");
        VecMath.fillvec(visited, false);
        int nConnectedComponents = 0;
        {
            int arraySize = 0;
            for (int _i = 0; _i < n; ++_i)
            {
                int i = finishingArray[n-1-_i];
                if (!visited[i])
                {
                    //PRINT(i);
                    //PRINT(visited[i]);
                    if (connectedComponentStarts != null)
                        connectedComponentStarts[nConnectedComponents] = arraySize;

                    nConnectedComponents++;
                    arraySize = dfs(i, predecessors, visited,
                                    result, // append to this on pre
                                    null,
                                    arraySize);
                }
            }
            if (connectedComponentStarts != null)
                connectedComponentStarts[nConnectedComponents] = arraySize;
            Assert(arraySize == n);
        }
        return nConnectedComponents;
    } // non-static topsort

    // Depth-first search.
    // Appends to either preArrayToAppendTo before traversing children,
    // or postArrayToAppendTo after traversing children.
    private static int dfs(int i,
                           LinkedListOfInts successors[],
                           boolean visited[],
                           int preArrayToAppendTo[],
                           int postArrayToAppendTo[],
                           int arraySize)
    {
        //System.out.println("in dfs(i="+i+")");
        Assert(!visited[i]);
        visited[i] = true;
        if (preArrayToAppendTo != null)
            preArrayToAppendTo[arraySize++] = i;

        //PRINT(successors[i]);
        for (LinkedListOfInts succs = successors[i]; succs != null; succs = succs.rest)
        {
            int j = succs.first;
            if (!visited[j])
                arraySize = dfs(j,
                                successors,
                                visited,
                                preArrayToAppendTo,
                                postArrayToAppendTo,
                                arraySize);
        }
        if (postArrayToAppendTo != null)
            postArrayToAppendTo[arraySize++] = i;
        //System.out.println("out dfs(i="+i+"), returning "+arraySize+"");
        return arraySize;
    } // dfs

    
/*
In python:
    # Depth first search, using a visited set
    # and calling pre-order and post-order node callback functions.
    def dfs(node, graph, visitedSet, preFun=None, postFun=None):
        if node not in visitedSet:
            visitedSet.add(node)
            if preFun != None: preFun(node)
            for next in graph[node]:
                dfs(next, graph, visitedSet, preFun, postFun)
            if postFun != None: postFun(node)

    # Using Kosaraju's algorithm:
    #     http://en.wikipedia.org/wiki/Strongly_connected_component
    # Returns a list of components, each of which is a list of nodes.
    def stronglyConnectedComponents(graph):
        visitedSet = Set()
        finishingArray = []
        for node in graph.keys():
            dfs(node,graph,visitedSet,
                postFun = lambda node: finishingArray.append(node))
        visitedSet = Set()
        components = []
        rgraph = reverseGraph(graph)
        for node in finishingArray[::-1]: # in reverse order
            if node not in visitedSet:
                components.append([])
                dfs(node,rgraph,visitedSet,
                    preFun = lambda node: components[-1].append(node))
        return components
*/

    /** Note, this temporarily modifies partialOrder, so it's not thread-safe. */
    public int topsortRandomized(int n, int result[/*n*/],
                                 int partialOrderSize, int partialOrder[][/*2*/],
                                 int connectedComponentStarts[],
                                 java.util.Random generator)
    {
        if (perm == null) perm = new int[visited.length];
        if (invPerm == null) invPerm = new int[visited.length];
        VecMath.randomperm(perm, n, generator);
        VecMath.invertperm(invPerm, perm, n);

        for (int i = 0; i < partialOrderSize; ++i)
            for (int j = 0; j < 2; ++j)
                partialOrder[i][j] = perm[partialOrder[i][j]];
        int answer = topsort(n, result, partialOrderSize, partialOrder, connectedComponentStarts);

        for (int i = 0; i < n; ++i)
            result[i] = invPerm[result[i]];
        for (int i = 0; i < partialOrderSize; ++i)
            for (int j = 0; j < 2; ++j)
                partialOrder[i][j] = invPerm[partialOrder[i][j]];

        return answer;
    } // non-static topsortRandomized

    /** The easy-to-use method. */
    public static int topsort(int result[], int partialOrder[][/*2*/])
    {
        TopSorter topsorter = new TopSorter(result.length, partialOrder.length);
        return topsorter.topsort(result.length, result,
                                 partialOrder.length, partialOrder, null);
    } // static topsort

    public static int topsortRandomized(int result[], int partialOrder[][/*2*/],
                                        java.util.Random generator)
    {
        TopSorter topsorter = new TopSorter(result.length, partialOrder.length);
        return topsorter.topsortRandomized(result.length, result,
                                 partialOrder.length, partialOrder,
                                 null,
                                 generator);
    } // static topsortRandomized


    /** Simple test/example program */
    public static void main(String[] args)
    {
        if (false)
        {
            int pairs[][] = {
                {1,2},
                        {3,5},
                  {2,8},
                    {8,7},
                    {8,4},
                      {4,3},
                              //{5,4} // forms a cycle
            };
            int n = 10;
            int result[] = new int[n];
            int nComponents = TopSorter.topsort(result, pairs);
            for (int i = 0; i < n; ++i)
                System.out.print(" "+result[i]);
            System.out.println();
            System.out.println(""+nComponents+" components ("+(n-nComponents)+" cycles).");
            Assert(nComponents == n);
        }
        if (false)
        {
            int pairs[][] = {
                {1,2},
                        {3,5},
                  {2,8},
                    {8,7},
                    {8,4},
                      {4,3},
                              {5,4} // forms a cycle
            };
            int n = 10;
            int result[] = new int[n];
            int nComponents = TopSorter.topsort(result, pairs);
            for (int i = 0; i < n; ++i)
                System.out.print(" "+result[i]);
            System.out.println();
            System.out.println(""+nComponents+" components ("+(n-nComponents)+" cycles).");
            Assert(nComponents == n-2);
        }
        if (true)
        {
            int pairs[][] = {
                {1,2},
                {2,1},
                {0,1},
            };
            int n = 3;
            int result[] = new int[n];
            int nComponents = TopSorter.topsort(result, pairs);
            for (int i = 0; i < n; ++i)
                System.out.print(" "+result[i]);
            System.out.println();
            System.out.println(""+nComponents+" components ("+(n-nComponents)+" cycles).");
            Assert(n-nComponents == 1);
        }

    } // main

        static boolean isBad(int pairs[][])
        {
            int expectedNComponents = -1;
            java.util.Random generator = new java.util.Random();
            for (int iTry = 0; iTry < 100; ++iTry)
            {
                int n = VecMath.max((int[])Arrays.flatten(pairs,0,2))+1;
                int result[] = new int[n];
                int nComponents = TopSorter.topsortRandomized(result, pairs, generator);
                if (iTry == 0)
                    expectedNComponents = nComponents;
                else
                    if (nComponents != expectedNComponents)
                        return true;
            }
            return false;
        }
        static int[][] findMinimalBadSubset(int pairs[][])
        {
            //PRINT(pairs.length);
            for (int i = 0; i < pairs.length; ++i)
            {
                System.out.print(".");
                int[][] subset = (int[][])Arrays.concat(
                            Arrays.subarray(pairs, 0, i),
                            Arrays.subarray(pairs, i+1, pairs.length-(i+1)));
                if (isBad(subset))
                    return findMinimalBadSubset(subset);
            }
            return pairs;
        }

} // class TopSorter
