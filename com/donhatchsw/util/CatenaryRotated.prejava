/* vim: set filetype=java: */
package com.donhatchsw.util;
#include "macros.h" 


/* WORK IN PROGRESS */
public class CatenaryRotated extends Catenary.FlippedMaybe
{
    static boolean XXX_ALLOW_FITFROMMOMENT_FAILURE = false; // hack hook so SmoothlyVaryingViewingParameter demo3 can proceed with manageable amount of noise

    public double cosRotation;
    public double sinRotation;

    @Override public void assertValid()
    {
        super.assertValid();
        double error = MyMath.hypot(cosRotation, sinRotation) - 1.;
        assert(SQR(error) + 1. - 1. == 0.); // implicit tolerance
    }

    // Unit-length derivative at time t.
    @Override public void differentiate(double t,
                                        double answer[/*2*/])
    {
        super.differentiate(t, answer);
        rotate(this.cosRotation, this.sinRotation, answer[0], answer[1], answer);
    }

    // Position at time t.
    @Override public void evaluate(double t,
                                   double answer[/*2*/])
    {
        super.evaluate(t, answer);
        rotate(this.cosRotation, this.sinRotation, answer[0], answer[1], answer);
    }
    // Arc length integral from focus to t.
    @Override public void integrate(double t,
                                    double answer[/*2*/])
    {
        int verboseLevel = 0;
        if (verboseLevel >= 1) System.out.println("                            in CatenaryRotated.integrate(t="+t+")");
        super.integrate(t, answer);
        rotate(this.cosRotation, this.sinRotation, answer[0], answer[1], answer);
        if (verboseLevel >= 1) System.out.println("                            out CatenaryRotated.integrate(t="+t+"), returning answer="+VecMath.toString(answer));
    }

        // XXX experimental at the moment... alternative to newton, see how it behaves
        private static void solveUsingMinimizer(double x[],
                                 double y[], // const
                                 NewtonSolver.Fun nfun,
                                 int minIterations, // seem to need this, or it thinks it stopped improving after 1 iteration in some sticky situations.  I think actually the termination condition should be that it didn't improve in some number of iterations? hmm. actually should make it smart and adaptive I think.
                                 int maxIterations,
                                 boolean adaptiveFlagUnused)
        {
            final double yFinal[] = y;
            final NewtonSolver.Fun nfunFinal = nfun;
            final double fx[] = new double[y.length];
            Minimizer.VectorFunction mfun = new Minimizer.VectorFunction() {
                @Override public double apply(double x[])
                {
                    nfunFinal.f(x, fx);
                    // Which?
                    // Empirically dist gives larger errors-- needed error tolerance of 1e-4 or so,
                    // whereas 1e-6 works (barely) for distsqrd
                    //return VecMath.dist(fx, yFinal);
                    return VecMath.distsqrd(fx, yFinal);
                }
            };
            double initialGuess[] = x;
            double initialDelta = 1e-3; // somewhat arbitrary
            String paramNames[] = null;
            double answer[] = Minimizer.minimize(mfun,
                               initialGuess,
                               initialDelta,
                               maxIterations,
                               false, // returnNullOnMaxCallsReached
                               paramNames);
            assert(answer != null);
            VecMath.copyvec(x, answer);
        } // solveUsingMinimizer

    public static java.io.PrintWriter goodAndBadOut = null; // apps can set this to debug

    // experimental at the moment
    public boolean fitFromMomentByBinarySearch(double x0, double y0,
                                               double x1, double y1,
                                               double xMoment, double yMoment,
                                               com.donhatchsw.compat.ArrayList newtonPathOut)
    {
        int verboseLevel = 0; // 0: nothing, 1: in/out, 2: binary search progress, 3: excessive
        int fitVerboseLevel = 0; // XXX and this too?
        if (verboseLevel >= 1) System.out.println("                in CatenaryRotated.fitFromMomentByBinarySearch(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+")");

        double dist = MyMath.hypot(y1-y0, x1-x0);
        double desiredMoment[] = {xMoment, yMoment};
        double xMomentIfTaut = (x0+x1)*.5 * dist;
        double yMomentIfTaut = (y0+y1)*.5 * dist;

        if (EQ(x0, -1., 1e-12)
         && EQ(y0, 0., 1e-12)
         && x1 == 0.
         && y1 == 0.
         && yMoment <= 0.)
        {
            // Flip from lower to upper half plane,
            // and the sample point from negative x axis to positive x axis.
            // I.e. flip the problem in both x and y.
            x0 *= -1.;
            x1 *= -1.;
            y0 *= -1.;
            y1 *= -1.;
            xMoment *= -1.;
            yMoment *= -1.;
            desiredMoment[0] *= -1.;
            desiredMoment[1] *= -1.;
            xMomentIfTaut *= -1.;
            yMomentIfTaut *= -1.;

            // Lower and upper bounds
            double rLo = 0.;
            double rHi = Math.max(1.,
                                  10.*Math.sqrt(MyMath.hypot(xMoment, yMoment)));
            double angleLo = 0.;
            double angleHi = Math.PI;

            double gotMoment[] = new double[2];

            // First figure out which quadrant the answer is in,
            // by figuring out which side of the image of the +y axis it's on.
            boolean isObviouslyInSecondQuadrant = desiredMoment[0] <= xMomentIfTaut;
            if (isObviouslyInSecondQuadrant)
            {
                if (verboseLevel >= 2) System.out.println("                  easy to see it's in second quadrant.");
                angleLo = Math.PI/2.;
            }
            // TODO: actually there's some magic constant angle we can use... figure it out
            boolean isObviouslyInFirstQuadrant = desiredMoment[0]-xMomentIfTaut >= desiredMoment[1];
            if (isObviouslyInFirstQuadrant)
            {
                if (verboseLevel >= 2) System.out.println("                  easy to see it's in first quadrant.");
                angleHi = Math.PI/2.;
            }
            if (!isObviouslyInFirstQuadrant && !isObviouslyInSecondQuadrant)
            {
                // TODO: this should be a simple, perhaps analytic, function, I think?
                if (verboseLevel >= 2) System.out.println("                  figuring out which quadrant...");
                if (verboseLevel >= 2) System.out.print("                    ");
                while (true)
                {
                    double r = (rLo + rHi) * .5;
                    this.fitFromPolarCoords(x0,y0, x1,y1, r, 0., 1., fitVerboseLevel);
                    this.integrate(this.t0, this.t1, gotMoment);
                    if (desiredMoment[0] < gotMoment[0]) // < so we prefer SE if equal
                    {
                        if (desiredMoment[1] <= gotMoment[1])
                        {
                            // need to go SW
                            if (verboseLevel >= 2) System.out.print(" SW");
                            //assert(false); // coverage
                            if (rHi == r)
                            {
                                // we actually have found the answer,
                                // but let it go through the first-quadrant code path
                                if (verboseLevel >= 2) System.out.print(" (found answer but let it go through first-quadrant code path)");
                                angleLo = Math.PI/2.;
                                angleHi = Math.PI/2.;
                                break;
                            }
                            // r is an upper bound on our search here,
                            // but not on the actual answer
                            // (so we'll reset rHi later, before doing the actual search within the second quadrant).
                            rHi = r;
                        }
                        else
                        {
                            // need to go NW
                            if (verboseLevel >= 2) System.out.print(" NW");
                            //assert(false); // coverage
                            // it's in second quadrant!
                            angleLo = Math.PI/2.;

                            // At this point r is actually a lower bound on the answer,
                            // so set rLo to it,
                            // but we need to reset rHi.
                            rLo = r;
                            rHi = Math.max(1.,
                                           10.*Math.sqrt(MyMath.hypot(xMoment, yMoment)));

                            break;
                        }
                    }
                    else
                    {
                        if (desiredMoment[1] <= gotMoment[1]) // <= so we prefer SE if equal
                        {
                            // need to go SE
                            if (verboseLevel >= 2) System.out.print(" SE");
                            //assert(false); // coverage
                            // it's in first quadrant!
                            angleHi = Math.PI/2.;
                            break;
                        }
                        else
                        {
                            // need to go NE
                            if (verboseLevel >= 2) System.out.print(" NE");
                            //assert(false); // coverage
                            if (rLo == r)
                            {
                                // we actually have found the answer,
                                // but let it go through the first-quadrant code path
                                if (verboseLevel >= 2) System.out.print(" (found answer but let it go through first-quadrant code path)");
                                angleLo = Math.PI/2.;
                                angleHi = Math.PI/2.;
                                break;
                            }
                            // r is a lower bound both on our search here, and on the actual answer
                            rLo = r;
                        }
                    }
                }
                if (verboseLevel >= 2) System.out.println("!");
            }

            boolean isInFirstQuadrant = angleHi <= Math.PI/2.;

            if (isInFirstQuadrant || isObviouslyInSecondQuadrant)
            {
                if (verboseLevel >= 2) System.out.print("                    ");
                while (true)
                {
                    double angle = (angleLo + angleHi) * .5;
                    double r = (rLo + rHi) * .5;
                    double c = Math.cos(angle);
                    double s = Math.sin(angle);
                    this.fitFromPolarCoords(x0,y0, x1,y1, r, c, s, fitVerboseLevel);
                    this.integrate(this.t0, this.t1, gotMoment);
                    if (verboseLevel >= 3) PRINTVEC(desiredMoment);
                    if (verboseLevel >= 3) PRINTVEC(gotMoment);

                    boolean outsideTangent = false;
                    if (true)
                    {
                        double xDir = desiredMoment[0] - gotMoment[0];
                        double yDir = desiredMoment[1] - gotMoment[1];
                        if (xDir*c + yDir*s > 0)
                        {
                            // desired moment is outside tangent line of ellipse.
                            // r is too small.
                            if (rLo == r) break;
                            rLo = r;
                            outsideTangent = true;
                        }
                    }

                    if (desiredMoment[0] < gotMoment[0])
                    {
                        if (desiredMoment[1] <= gotMoment[1])
                        {
                            // need to go SW
                            if (verboseLevel >= 2) System.out.print(" SW");
                            if (verboseLevel >= 3) System.out.println();
                            //assert(false); // coverage
                            if (isInFirstQuadrant)
                            {
                                if (rHi == r) break;
                                rHi = r;
                            }
                            else // simple part of second quadrant
                            {
                                if (angleLo == angle) break;
                                angleLo = angle;
                            }
                        }
                        else
                        {
                            // need to go NW
                            if (verboseLevel >= 2) System.out.print(" NW");
                            if (verboseLevel >= 3) System.out.println();
                            //assert(false); // coverage
                            if (isInFirstQuadrant)
                            {
                                if (angleLo == angle) break;
                                angleLo = angle;
                            }
                            else // simple part of second quadrant
                            {
                                assert(outsideTangent); // i.e. already did this case with bigger hammer
                            }
                        }
                    }
                    else
                    {
                        if (desiredMoment[1] <= gotMoment[1])
                        {
                            // need to go SE
                            if (verboseLevel >= 2) System.out.print(" SE");
                            if (verboseLevel >= 3) System.out.println();
                            //assert(false); // coverage
                            if (isInFirstQuadrant)
                            {
                                if (angleHi == angle) break;
                                angleHi = angle;
                            }
                            else // simple part of second quadrant
                            {
                                if (rHi == r) break;
                                rHi = r;
                            }
                        }
                        else
                        {
                            // need to go NE
                            if (verboseLevel >= 2) System.out.print(" NE");
                            if (verboseLevel >= 3) System.out.println();
                            //assert(false); // coverage
                            if (isInFirstQuadrant)
                            {
                                assert(outsideTangent); // i.e. already did this case with bigger hammer
                            }
                            else // simple part of second quadrant
                            {
                                if (angleHi == angle) break;
                                angleHi = angle;
                            }
                        }
                    }
                }
                if (verboseLevel >= 2) System.out.println("!");
            }
            else
            {
                // Answer is in hard part of second quadrant.
                // This case is harder, since the images of the radial lines aren't monotonic in x in target space.
                if (verboseLevel >= 1) System.out.println("                    hard part of second quadrant: doing expensive binary-search-within-binary-search");
                if (verboseLevel >= 2) System.out.print("                      ");
                // Do a binary search on r.
                // Each time we refine r, reset angle bounds.
                // So this is expected to be rather slow.
                while (true)
                {
                    // last time through the loop, angle will be the answer
                    double angle = (angleLo + angleHi) * .5;
                    double r = (rLo + rHi) * .5;
                    double c = Math.cos(angle);
                    double s = Math.sin(angle);
                    this.fitFromPolarCoords(x0,y0, x1,y1, r, c, s, fitVerboseLevel);
                    this.integrate(this.t0, this.t1, gotMoment);

                    boolean outsideTangent = false;
                    boolean useBiggerHammer = true; // XXX not sure I have complete confidence that it's doing the right thing with respect to angle bounds
                    if (useBiggerHammer)
                    {
                        double xDir = desiredMoment[0] - gotMoment[0];
                        double yDir = desiredMoment[1] - gotMoment[1];
                        if (xDir*c + yDir*s > 0)
                        {
                            // desired moment is outside tangent line of ellipse.
                            // r is too small.
                            if (verboseLevel >= 2) System.out.print(" very NW");
                            if (rLo == r)
                            {
                                if (verboseLevel >= 1) System.out.println("                        broke because rLo==r with big hammer");
                                break;
                            }
                            rLo = r;
                            outsideTangent = true;

                            // reset angle bounds
                            angleLo = Math.PI/2.;
                            angleHi = Math.PI;
                            if (verboseLevel >= 2) System.out.println();
                            if (verboseLevel >= 2) System.out.print("                      ");
                        }
                    }

                    if (desiredMoment[0] < gotMoment[0])
                    {
                        // need to go W
                        if (desiredMoment[1] <= gotMoment[1])
                        {
                            // need to go SW
                            if (verboseLevel >= 2) System.out.print(" SW");
                            if (angleLo == angle)
                            {
                                if (verboseLevel >= 1) System.out.println("                        broke because angleLo==angle");
                                break;
                            }
                            angleLo = angle; // not actual bound, but bound for search on this ellipse
                        }
                        else
                        {
                            // need to go NW
                            if (verboseLevel >= 2) System.out.print(" NW");
                            //assert(false); // coverage


                            if (useBiggerHammer)
                                assert(outsideTangent); // i.e. already did this case with bigger hammer
                            if (!useBiggerHammer)
                            {
                                if (rLo == r)
                                {
                                    if (verboseLevel >= 1) System.out.println("                        broke because rLo==r with big hammer");
                                    break;
                                }
                                rLo = r;
                                outsideTangent = true;

                                // reset angle bounds
                                angleLo = Math.PI/2.;
                                angleHi = Math.PI;
                                if (verboseLevel >= 2) System.out.println();
                                if (verboseLevel >= 2) System.out.print("                      ");
                            }
                        }
                    }
                    else
                    {
                        // need to go E
                        if (desiredMoment[1] <= gotMoment[1])
                        {
                            // need to go SE
                            if (verboseLevel >= 2) System.out.print(" SE");
                            //assert(false); // coverage
                            if (rHi == r)
                            {
                                if (verboseLevel >= 1) System.out.println("                        broke because rHi==r");
                                break;
                            }
                            rHi = r;

                            // reset angle bounds
                            angleLo = Math.PI/2.;
                            angleHi = Math.PI;
                            if (verboseLevel >= 2) System.out.println();
                            if (verboseLevel >= 2) System.out.print("                      ");
                        }
                        else
                        {
                            // need to go NE
                            if (verboseLevel >= 2) System.out.print(" NE");
                            if (angleHi == angle)
                            {
                                if (verboseLevel >= 1) System.out.println("                        broke because angleHi==angle");
                                break;
                            }
                            angleHi = angle; // not actual bound, but bound for search on this ellipse
                        }
                    }
                }

                // Note that the last time through the loop (with the correct r),
                // angleLo,angleHi was actually the correct bounds, so it can be used below.

                if (verboseLevel >= 2) System.out.println();

                // Okay, we've found r and angle.
                double r = (rLo+rHi) * .5;
                double angle = (angleLo+angleHi) * .5;

                if (verboseLevel >= 1) System.out.println("                    found r="+r+" angle="+RTOD(angle)+"deg");
            }
            if (verboseLevel >= 2)
            {
                PRINT(rLo);
                PRINT(rHi);
                PRINT(angleLo);
                PRINT(angleHi);
                PRINTVEC(desiredMoment);
                PRINTVEC(gotMoment);
            }

            double r = (rLo+rHi)*.5;
            double angle = (angleLo+angleHi)*.5;

            // convert back to original space-- both x and y flipped
            angle = Math.PI + angle;
            x0 *= -1.;
            x1 *= -1.;
            y0 *= -1.;
            y1 *= -1.;
            xMoment *= -1.;
            yMoment *= -1.;
            desiredMoment[0] *= -1.;
            desiredMoment[1] *= -1.;
            xMomentIfTaut *= -1.;
            yMomentIfTaut *= -1.;
            double c = Math.cos(angle);
            double s = Math.sin(angle);
            this.fitFromPolarCoords(x0,y0, x1,y1, r, c, s, fitVerboseLevel);
        }
        else
        {
            // TODO: implement more cases!
            unimplemented();
            if (verboseLevel >= 1) System.out.println("                out CatenaryRotated.fitFromMomentByBinarySearch(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+") (unimplemented)");
            return false;
        }

        double gotMoment[] = new double[2];
        this.integrate(this.t0, this.t1, gotMoment);
        if (verboseLevel >= 1) System.out.println("                  answer this="+this);
        if (verboseLevel >= 1) System.out.println("                  desiredMoment="+VecMath.toString(desiredMoment));
        if (verboseLevel >= 1) System.out.println("                  gotMoment="+VecMath.toString(gotMoment));

        try
        {
            assert_le(VecMath.dist(desiredMoment,gotMoment), 1e-6); // TODO: make this relative to problem scale? not sure
            if (goodAndBadOut != null)
            {
                goodAndBadOut.println("    INTERNAL GOOD: CatenaryRotated.fitFromMomentByBinarySearch(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+") succeeded: got moment "+VecMath.toString(gotMoment)+", error="+VecMath.dist(desiredMoment,gotMoment));
                goodAndBadOut.flush();
            }
        }
        catch (Error e)
        {
            // more descriptive error
            e = new Error("    INTERNAL ERROR: CatenaryRotated.fitFromMomentByBinarySearch(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+") failed: got moment "+VecMath.toString(gotMoment)+", error="+VecMath.dist(desiredMoment,gotMoment));
            if (goodAndBadOut != null)
            {
                goodAndBadOut.println(e.getMessage());
                goodAndBadOut.flush();
            }
            if (XXX_ALLOW_FITFROMMOMENT_FAILURE)
            {
                System.err.println(e.getMessage());
                // but proceed
            }
            else
                throw e;
        }

        if (verboseLevel >= 1) System.out.println("                out CatenaryRotated.fitFromMomentByBinarySearch(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+"), returning this="+this);
        return true;
    } // fitFromMomentByBinarySearch

    static int binarySearchSuccesses = 0;
    static int binarySearchFails = 0;
    /**
    * Set members to be the parameters of the catenary
    * passing through points (x0,y0),(x1,y1)
    * with given moment (i.e. integral with respect to arc length).
    * Caveat: this is done numerically.
    * In general there may be 1, 3, or 2 solutions;
    * if there are more than 1 solutions, this function may find one of them,
    * or it may fail to converge.
    * If the function is not 1-to-1 in a neighborhood of the solution,
    * it will fail to converge.
    * If it fails to converge, [XXX what?] is thrown.
    * XXX use current contents as initial guess?
    */
    public void fitFromMoment(double x0, double y0,
                              double x1, double y1,
                              double xMoment, double yMoment,
                              com.donhatchsw.compat.ArrayList newtonPathOut)
    {

        int verboseLevel = 0; // XXX think about what we want here. make this a parameter?
        int fitVerboseLevel = 0; // XXX and this too?
        if (verboseLevel >= 1) System.out.println("            in CatenaryRotated.fitFromMoment(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+")");

        // XXX eventually it should handle all cases, but for now, don't try it in cases where we know it's unnecessary and unimplemented, to reduce noise
        //boolean tryBinarySearch = true;
        boolean tryBinarySearch = EQ(x0, -1., 1e-12);
        //boolean tryBinarySearch = false;
        if (tryBinarySearch)
        {
            boolean binarySearchSucceeded = fitFromMomentByBinarySearch(x0,y0, x1,y1, xMoment,yMoment, newtonPathOut);
            if (binarySearchSucceeded)
            {
                binarySearchSuccesses++;
            }
            else
            {
                binarySearchFails++;
            }
            if (verboseLevel >= 1) System.out.println("            out CatenaryRotated.fitFromMoment(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+") (binary search succeeded)");
            if (verboseLevel >= 2) PRINT(binarySearchSuccesses);
            if (verboseLevel >= 2) PRINT(binarySearchFails);
            if (binarySearchSucceeded)
            {
                if (false) // can get rid of this
                {
                    // sanity check-- this should not fail!!!
                    double desiredMoment[] = {xMoment, yMoment};
                    double gotMoment[] = new double[2];
                    this.integrate(this.t0, this.t1, gotMoment);
                    PRINT(VecMath.dist(gotMoment, desiredMoment));
                    assert(VecMath.dist(gotMoment, desiredMoment) <= 1e-6);
                }
                return;
            }
        }

        double dist = MyMath.hypot(y1-y0, x1-x0);
        double desiredMoment[] = {xMoment, yMoment};

        // Represent a solution by polar coords slack,downAngle,
        // converted to rectangular coords x,y:
        //  x = slack * cos(downAngle)
        //  y = slack * sin(downAngle)
        // We will do a numeric solve for x,y.
        final int verboseLevelFinal = verboseLevel;
        final int fitVerboseLevelFinal = fitVerboseLevel;
        final com.donhatchsw.compat.ArrayList newtonPathOutFinal = newtonPathOut;
        final boolean inJ[] = {false};
        final double x0final = x0;
        final double y0final = y0;
        final double x1final = x1;
        final double y1final = y1;

        NewtonSolver.Fun fun = new NewtonSolver.Fun(2) {
            @Override public void f(double xy[], double answerIntegral[])
            {
                if (verboseLevelFinal >= 2) System.out.println("                in f(xy = "+Arrays.toStringCompact(xy)+")");

                // use self as scratch catenary
                CatenaryRotated self = CatenaryRotated.this;
                self.fitFromRectangularCoords(x0final,y0final, x1final,y1final, xy[0], xy[1], fitVerboseLevelFinal);

                self.integrate(self.t0, self.t1, answerIntegral);

                if (!inJ[0] && newtonPathOutFinal != null)
                {
                    newtonPathOutFinal.add(new double[][] {VecMath.copyvec(xy), VecMath.copyvec(answerIntegral)});
                }
                if (verboseLevelFinal >= 2) System.out.println("                out f(xy = "+Arrays.toStringCompact(xy)+"), returning answerIntegral="+Arrays.toStringCompact(answerIntegral));
            }
            @Override public void J(double xy[], double fxy[], double answerJacobian[][])
            {
                if (verboseLevelFinal >= 2) System.out.println("            in J");
                inJ[0] = true;
                try
                {
                    super.J(xy, fxy, answerJacobian);
                }
                finally
                {
                    inJ[0] = false; // executed even on the way out of a throw
                }
                if (verboseLevelFinal >= 2)
                {
                    PRINTMAT(answerJacobian);
                    PRINT(VecMath.conditionNumber(answerJacobian));
                    PRINTVEC(VecMath.singularValues(answerJacobian));
                }
                if (verboseLevelFinal >= 2) System.out.println("            out J");
            }
            @Override public double eps()
            {
                // Somewhat dog science:
                // When using adaptive flag,
                // 1e-4 makes it freak out and confidence test fail currently (evaluation functions not stabilized).
                // 1e-6 fixes it but makes it slow down when past the switch (which is the numerically challenging part)
                // But I think 1e-6 is probably better in general anyway...
                // assuming problem has been scaled to unit size.
                return 1e-6;
            }
        };

        // Make an initial guess-- this gets it in the correct upper or lower
        // half-plane, but is otherwise very rough.
        double xMomentIfTaut = (x0+x1)*.5 * dist;
        double yMomentIfTaut = (y0+y1)*.5 * dist;
        double xInitialGuess = xMoment - xMomentIfTaut;
        double yInitialGuess = yMoment - yMomentIfTaut;
        double xyAnswer[] = {xInitialGuess, yInitialGuess};
        boolean adaptiveFlag = false; // setting this to true makes the TRY_TO_DO_IT_RIGHT plan paths look much better in demo3 (since evaluation functions not stable yet)... but it makes it horribly slow instead of just freaking out!  so, leaving this false; need to fix the problem instead.
        boolean amoebaFlag = false; // XXX make this configurable?
        if (amoebaFlag)
        {
            int maxIterations = 1000;
            solveUsingMinimizer(xyAnswer,
                               desiredMoment,
                               fun,
                               10,
                               maxIterations,
                               adaptiveFlag);
        }
        else
            NewtonSolver.solve(xyAnswer,
                               desiredMoment,
                               fun,
                               10,
                               1000,
                               adaptiveFlag);

        if (newtonPathOut != null)
            newtonPathOut.add(new double[][]{null, desiredMoment}); // special entry for the target

        this.fitFromRectangularCoords(x0,y0, x1,y1, xyAnswer[0], xyAnswer[1], fitVerboseLevelFinal);
        double gotMoment[] = new double[2];
        this.integrate(this.t0, this.t1, gotMoment);
        if (verboseLevel >= 1) System.out.println("              answer this="+this);
        if (verboseLevel >= 1) System.out.println("              desiredMoment="+VecMath.toString(desiredMoment));
        if (verboseLevel >= 1) System.out.println("              gotMoment="+VecMath.toString(gotMoment));

        try
        {
            assert_le(VecMath.dist(desiredMoment,gotMoment), 1e-6); // TODO: make this relative to problem scale? not sure
            if (goodAndBadOut != null)
            {
                goodAndBadOut.println("    INTERNAL GOOD: CatenaryRotated.fitFromMoment(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+") succeeded: got moment "+VecMath.toString(gotMoment)+", error="+VecMath.dist(desiredMoment,gotMoment));
                goodAndBadOut.flush();
            }
        }
        catch (Error e)
        {
            // more descriptive error
            e = new Error("    INTERNAL ERROR: CatenaryRotated.fitFromMoment(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+") failed: got moment "+VecMath.toString(gotMoment)+", error="+VecMath.dist(desiredMoment,gotMoment));
            if (goodAndBadOut != null)
            {
                goodAndBadOut.println(e.getMessage());
                goodAndBadOut.flush();
            }
            if (XXX_ALLOW_FITFROMMOMENT_FAILURE)
            {
                System.err.println(e.getMessage());
                // but proceed
            }
            else
                throw e;
        }
        if (verboseLevel >= 1) System.out.println("            out CatenaryRotated.fitFromMoment(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment+"), returning this="+this);
    } // fitFromMoment


    private void fitFromRectangularCoords(double x0, double y0,
                                          double x1, double y1,
                                          double x, double y, // slack,downAngle in rectangular coords
                                          int verboseLevel)
    {
        if (verboseLevel >= 1) System.out.println("                in CatenaryRotated.fitFromRectangularCoords(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", x="+x+" y="+y+")");
        double slack = MyMath.hypot(x, y);
        assert(slack >= 0.); // XXX I've seen this fail, in demo3, but I guess that must mean there's nans coming in? at least I think it's here that is failing
        /*
            XXX actually I think the following was when adaptiveFlag was turned on for newton
            OH NO! SOMETHING AWFUL HAPPENED!
                    this.position = <736.56792077277,161.47365152524412>
                    this.velocity = <4.709008819183118,-0.07610513206341617>
                    this.targetPosition = <1199.0,154.0>
                    referenceTripDistance = 0.005994842503189409
                    referenceTripTime = 1.0
                    dt = 1.0
                    distanceBasedBounce = 0.0
            OH NO! SOMETHING AWFUL HAPPENED!
                    this.position = <1179.7054122310478,154.31178552684133>
                    this.velocity = <0.5766350670102477,-0.009319407913955911>
                    this.targetPosition = <1199.0,154.0>
                    referenceTripDistance = 0.0021544346900318834
                    referenceTripTime = 1.0
                    dt = 1.0
                    distanceBasedBounce = 0.0
            OH NO! SOMETHING AWFUL HAPPENED!
                    this.position = <1180.2777389914652,154.30253575825404>
                    this.velocity = <0.5680184538243997,-0.0091801292606132>
                    this.targetPosition = <1199.0,154.0>
                    referenceTripDistance = 0.0021544346900318834
                    referenceTripTime = 1.0
                    dt = 1.0
                    distanceBasedBounce = 0.0
            OH NO! SOMETHING AWFUL HAPPENED!
                    this.position = <1158.2760838977304,154.65825220590696>
                    this.velocity = <0.6486299113668444,-0.010482784426232152>
                    this.targetPosition = <1199.0,154.0>
                    referenceTripDistance = 0.001291549665014884
                    referenceTripTime = 1.0
                    dt = 1.0
                    distanceBasedBounce = 0.0
        */
        double downAngle = Math.atan2(y, x);
        double cosDownAngle = Math.cos(downAngle);
        double sinDownAngle = Math.sin(downAngle);
        // note cosDownAngle,sinDownAngle are just x,y normalized, robustly.
        // if I had a robust normalization function that I trusted, I'd use that instead.
        this.fitFromPolarCoords(x0,y0, x1,y1, slack, cosDownAngle, sinDownAngle, verboseLevel);
        if (verboseLevel >= 1) System.out.println("                out CatenaryRotated.fitFromRectangularCoords(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", x="+x+" y="+y+")");
    } // fitFromRectangularCoords

    private void fitFromPolarCoords(double x0, double y0,
                                    double x1, double y1,
                                    double slack,
                                    double cosDownAngle,
                                    double sinDownAngle,
                                    int verboseLevel)
    {
        if (verboseLevel >= 1) System.out.println("                    in CatenaryRotated.fitFromPolarCoords(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", slack="+slack+" c="+cosDownAngle+" s="+sinDownAngle+")");
        // rotation = downAngle - (-pi/2)
        this.cosRotation = -sinDownAngle;
        this.sinRotation = cosDownAngle;
        double x0Unrotated = xPartOfUnrotated(this.cosRotation, this.sinRotation, x0, y0);
        double y0Unrotated = yPartOfUnrotated(this.cosRotation, this.sinRotation, x0, y0);
        double x1Unrotated = xPartOfUnrotated(this.cosRotation, this.sinRotation, x1, y1);
        double y1Unrotated = yPartOfUnrotated(this.cosRotation, this.sinRotation, x1, y1);
        // Note that when fit is done it will call our isValid() (which is admittedly odd)
        // so our cosRotation and sinRotation, as well as the FlippedMaybe members,
        // had better be valid.
        super.fit(x0Unrotated, y0Unrotated, 
                  x1Unrotated, y1Unrotated,
                  slack,
                  verboseLevel);
        if (verboseLevel >= 1) System.out.println("                    out CatenaryRotated.fitFromPolarCoords(x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", slack="+slack+" c="+cosDownAngle+" s="+sinDownAngle+")");
    } // fitFromPolarCoords

    private static final double xPartOfRotated(double cosRotation, double sinRotation, double x, double y)
    {
        return cosRotation * x - sinRotation * y;
    }
    private static final double yPartOfRotated(double cosRotation, double sinRotation, double x, double y)
    {
        return sinRotation * x + cosRotation * y;
    }
    private static final double xPartOfUnrotated(double cosRotation, double sinRotation, double x, double y)
    {
        return cosRotation * x + sinRotation * y;
    }
    private static final double yPartOfUnrotated(double cosRotation, double sinRotation, double x, double y)
    {
        return -sinRotation * x + cosRotation * y;
    }
    private static final void rotate(double cosRotation, double sinRotation, double x, double y, double answer[/*2*/])
    {
        answer[0] = xPartOfRotated(cosRotation, sinRotation, x, y);
        answer[1] = yPartOfRotated(cosRotation, sinRotation, x, y);
    }
    private static final void unRotate(double cosRotation, double sinRotation, double x, double y, double answer[/*2*/])
    {
        answer[0] = xPartOfUnrotated(cosRotation, sinRotation, x, y);
        answer[1] = yPartOfUnrotated(cosRotation, sinRotation, x, y);
    }

    // XXX phase this out, moving to pure catenary routines... I think? confidence test still uses it at the moment.
    // A catenary is a scaled rotated translated cosh.
    // Path-length integrate from v0 to either v1, or to a length of maxLengthToIntegrate,
    // which ever comes first.
    // Answer gets put into answer. The function return value is the arc length.
    // vFinal is the point that the integral went to (either v1, or the point at distance maxLengthToIntegrate along the curve).
    private static double integralOfCatenaryWithEndpointsRectangular(double v0[/*2*/],
                                                                     double v1[/*2*/],
                                                                     double x, double y, // slack,downAngle in rectangular coords
                                                                     double maxLengthToIntegrate,
                                                                     double answer[/*2*/],
                                                                     double vFinal[/*2*/],
                                                                     double aFinal[/*2*/],
                                                                     CatenaryRotated scratchCatenaryRotated,
                                                                     int debugLevel) // 0: nothing, 1: in/out, 2: a bit more
    {
        int fitVerboseLevel = debugLevel;
        if (debugLevel >= 1) System.out.println("            in integralOfCatenaryWithEndpointsRectangular");
        if (debugLevel >= 2) System.out.println("              v0 = "+VecMath.toString(v0));
        if (debugLevel >= 2) System.out.println("              v1 = "+VecMath.toString(v1));
        if (debugLevel >= 2) System.out.println("              x = "+x+" y = "+y);
        if (debugLevel >= 2) System.out.println("              maxLengthToIntegrate = "+maxLengthToIntegrate);

        scratchCatenaryRotated.fitFromRectangularCoords(v0[0], v0[1], v1[0], v1[1], x, y, fitVerboseLevel);
        double t0 = scratchCatenaryRotated.t0;
        double t1 = scratchCatenaryRotated.t1;
        double arcLength = t1 - t0;
        if (maxLengthToIntegrate < arcLength)
        {
            if (debugLevel >= 2) System.out.println("              clamping arcLength from "+arcLength+" to "+maxLengthToIntegrate);
            arcLength = maxLengthToIntegrate;
            t1 = t0 + maxLengthToIntegrate;
        }
        if (debugLevel >= 1) System.out.println("                scratchCatenaryRotated.{cos,sin}Rotation = "+scratchCatenaryRotated.cosRotation+", "+scratchCatenaryRotated.sinRotation);
        scratchCatenaryRotated.integrate(t0, t1, answer);
        if (debugLevel >= 1) System.out.println("              integral answer = "+VecMath.toString(answer));
        if (vFinal != null)
        {
            scratchCatenaryRotated.evaluate(t1, vFinal);
            if (debugLevel >= 1) System.out.println("              vFinal = "+VecMath.toString(vFinal));
        }
        if (aFinal != null)
        {
            scratchCatenaryRotated.differentiate(t1, aFinal);
            if (debugLevel >= 1) System.out.println("              aFinal = "+VecMath.toString(aFinal));
        }
        if (debugLevel >= 1) System.out.println("            out integralOfCatenaryWithEndpointsRectangular, returning arcLength="+arcLength);
        return arcLength;
    } // integralOfCatenaryWithEndpointsRectangular

    public String toString()
    {
       StringBuffer sb = new StringBuffer();
       sb.append("{cos=");
       sb.append(this.cosRotation);
       sb.append(", sin=");
       sb.append(this.sinRotation);
       sb.append(", ");
       sb.append(super.toString());
       sb.append("}");
       return sb.toString();
    }

    public static void confidenceTests()
    {
        System.out.println("    in confidenceTests");




        // Test utilities for integrals

        int testVerboseLevel = 2; // 0 = nothing, 1 = basic outer flow, 2 = dots at loop iterations, 3 = trace all loop iterations


        if (true)
        {
            CatenaryRotated scratchCatenaryRotated = new CatenaryRotated();

            double downAngles[] = {-Math.PI/2., -Math.PI/4, 0., Math.PI/2, Math.PI};
            double invScales[] = {1., .5, 2., 0.};
            double xTranslates[] = {0., 2., -2.};
            double yTranslates[] = {0., 2., -2.};
            double x0s[] = {0.,-1.,-2.,1.,2.};
            //double x1s[] = {1.,2.,0.,-1.,-2.};
            double x1s[] = x0s; // XXX get rid

            for (int ix0 = 0; ix0 < x0s.length; ++ix0)
            for (int ix1 = 0; ix1 < x1s.length; ++ix1)
            {
                double x0 = x0s[ix0];
                double x1 = x1s[ix1];

                if (x1 < x0)
                {
                    // In constructing the example, we always go left to right.
                    // Don't fret, we'll rotate to all sorts of orientations.
                    continue;
                }

                if (testVerboseLevel >= 1) System.out.println("      ===============================================================");
                if (testVerboseLevel >= 1) System.out.println("      x0 = "+x0);
                if (testVerboseLevel >= 1) System.out.println("      x1 = "+x1);

                double sinhx0 = MyMath.sinh(x0);
                double sinhx1 = MyMath.sinh(x1);
                double coshx0 = MyMath.cosh(x0);
                double coshx1 = MyMath.cosh(x1);
                double v0[] = {x0, coshx0};
                double v1[] = {x1, coshx1};
                if (testVerboseLevel >= 1) System.out.println("      v0 = "+VecMath.toString(v0));
                if (testVerboseLevel >= 1) System.out.println("      v1 = "+VecMath.toString(v1));

                // Parametrizing cosh by arc length between those endpoints,
                // this part of the cosh curve is:
                //      <asinh(t), sqrt(1+t^2)> for x in [x0,x1]
                //                              i.e. for t in [sinh(x0),sinh(x1)]
                // The arc length of that part is sinh(x1) - sinh(x0).
                // The integral of that part is:
                //      {-sqrt(1+t^2) + t*asinh(t),
                //       (t*sqrt(1+t^2) + asinh(t))/2}
                // =    {-cosh(x) + sinh(x)*x,
                //       (sinh(x)*cosh(x) + x) / 2}
                double expectedArcLength = sinhx1 - sinhx0;
                double expectedIntegral[] = {
                    (sinhx1*x1-coshx1)-(sinhx0*x0-coshx0),
                    ((sinhx1*coshx1+x1)-(sinhx0*coshx0+x0))*.5,
                };
                double integral[] = new double[2]; // scratch

                double slack = Math.abs(expectedArcLength) - VecMath.dist(v0,v1);

                if (true)
                {
                    // s=1
                    OUT("        s=1 case");
                    double x = 0.;
                    double y = -slack;
                    double arcLength = integralOfCatenaryWithEndpointsRectangular(v0, v1, x, y, Double.POSITIVE_INFINITY, integral, null, null, scratchCatenaryRotated, 0);
                    if (testVerboseLevel >= 1) PRINT(arcLength);
                    if (testVerboseLevel >= 1) PRINT(expectedArcLength);
                    assert_almost_eq(arcLength, expectedArcLength, 1e-6);
                    if (testVerboseLevel >= 1) PRINTVEC(integral);
                    if (testVerboseLevel >= 1) PRINTVEC(expectedIntegral);
                    assert(VecMath.dist(integral, expectedIntegral) < 1e-6);
                }


                double halfLength = VecMath.dist(v0,v1)*.5;
                double expectedIntegralOfSegment[] = VecMath.vxs(VecMath.vpv(v0,v1),halfLength); // length times average
                double expectedArcLengthOfSegment = VecMath.dist(v0,v1);

                // in degenerate test, slack is 1
                // and gravity is from v1 towards v0 (or arbitrary direction if they are the same)
                double slackForDegenerate = 1.; // somewhat arbitrary XXX should try others
                double expectedArcLengthOfDegenerate = expectedArcLengthOfSegment + slackForDegenerate;
                double gravityForDegenerate[] = VecMath.normalize(VecMath.vmv(v0, v1));
                double expectedIntegralOfDegenerate[] = VecMath.vpv(expectedIntegralOfSegment,
                                                                    VecMath.vxs(VecMath.vpsxv(v0,slackForDegenerate/4.,gravityForDegenerate),
                                                                                slackForDegenerate));

                if (true)
                {
                    // s=infinity
                    OUT("        s=infinity case");
                    double x = 0.;
                    double y = 0.;
                    double integralOfSegment[] = new double[2];
                    double arcLengthOfSegment = integralOfCatenaryWithEndpointsRectangular(v0, v1, x, y, Double.POSITIVE_INFINITY, integralOfSegment, null, null, scratchCatenaryRotated, 0);
                    if (testVerboseLevel >= 1) PRINT(arcLengthOfSegment);
                    if (testVerboseLevel >= 1) PRINT(expectedArcLengthOfSegment);
                    assert_almost_eq(arcLengthOfSegment, expectedArcLengthOfSegment, 1e-6);
                    if (testVerboseLevel >= 1) PRINTVEC(integralOfSegment);
                    if (testVerboseLevel >= 1) PRINTVEC(expectedIntegralOfSegment);
                    assert(VecMath.dist(integralOfSegment, expectedIntegralOfSegment) < 1e-6);
                }

                if (true)
                {
                    // s=0, gravity from v1 towards v0 (or arbitrary dir if v0=v1)
                    OUT("        s=0 case");
                    PRINTVEC(gravityForDegenerate);
                    PRINTVEC(v0);
                    PRINTVEC(v1);
                    double x = slackForDegenerate * gravityForDegenerate[0];
                    double y = slackForDegenerate * gravityForDegenerate[1];
                    double integralOfDegenerate[] = new double[2];
                    double arcLengthOfDegenerate = integralOfCatenaryWithEndpointsRectangular(v0, v1, x, y, Double.POSITIVE_INFINITY, integralOfDegenerate, null, null, scratchCatenaryRotated, 0);
                    if (testVerboseLevel >= 1) PRINT(arcLengthOfDegenerate);
                    if (testVerboseLevel >= 1) PRINT(expectedArcLengthOfDegenerate);
                    assert_almost_eq(arcLengthOfDegenerate, expectedArcLengthOfDegenerate, 1e-6);
                    if (testVerboseLevel >= 1) PRINTVEC(integralOfDegenerate);
                    if (testVerboseLevel >= 1) PRINTVEC(expectedIntegralOfDegenerate);
                    assert(VecMath.dist(integralOfDegenerate, expectedIntegralOfDegenerate) < 1e-6);
                }

                if (testVerboseLevel == 2) System.out.print("        "); // indent for dots

                for (int iDownAngle = 0; iDownAngle < downAngles.length; ++iDownAngle)
                for (int iInvScale = 0; iInvScale < invScales.length; ++iInvScale)
                for (int iXTranslate = 0; iXTranslate < xTranslates.length; ++iXTranslate)
                for (int iYTranslate = 0; iYTranslate < yTranslates.length; ++iYTranslate)
                {
                    double downAngle = downAngles[iDownAngle];
                    double invScale = invScales[iInvScale];
                    double translate[] = {xTranslates[iXTranslate], yTranslates[iYTranslate]};

                    if (testVerboseLevel >= 3) System.out.println("            ---------------------------------------------------------------");
                    if (testVerboseLevel >= 3) System.out.println("            downAngle="+RTOD(downAngle)+"deg invScale="+invScale+" translate="+VecMath.toString(translate));


                    // we're really doing two fundamentally different tests,
                    // depending on whether invScale is 0 or not.
                    // I think it ends up exercising everything though.
                    // XXX except near-0 and near-infinity, which we need to exercise too

                    double rotateDownAngleToMinusYAxis = -Math.PI/2 - downAngle;
                    double c = Math.cos(rotateDownAngleToMinusYAxis);
                    double s = Math.sin(rotateDownAngleToMinusYAxis);
                    double rotateDownAngleToMinusYAxisMatrix[][] = { // row oriented
                       { c,s},
                       {-s,c},
                    };
                    // rotate minus Y axis to down angle
                    double v0Transformed[] = VecMath.mxv(rotateDownAngleToMinusYAxisMatrix, v0); // by inverse of matrix
                    if (invScale != 0.)
                        VecMath.vxs(v0Transformed, v0Transformed, 1./invScale);
                    VecMath.vpv(v0Transformed, v0Transformed, translate);
                    double v1Transformed[] = VecMath.mxv(rotateDownAngleToMinusYAxisMatrix, v1); // by inverse of matrix
                    if (invScale != 0.)
                        VecMath.vxs(v1Transformed, v1Transformed, 1./invScale);
                    VecMath.vpv(v1Transformed, v1Transformed, translate);

                    double expectedIntegralTransformed[] = VecMath.mxv(rotateDownAngleToMinusYAxisMatrix,
                                                                       invScale==0. ? expectedIntegralOfSegment : expectedIntegral);
                    if (invScale != 0.)
                        VecMath.vxs(expectedIntegralTransformed, expectedIntegralTransformed, 1./(invScale*invScale));
                    VecMath.vpsxv(expectedIntegralTransformed, expectedIntegralTransformed,
                                  invScale==0. ? VecMath.dist(v0,v1) : expectedArcLength/invScale,
                                  translate);
                    double expectedArcLengthTransformed = invScale==0. ? expectedArcLengthOfSegment : expectedArcLength/invScale;

                    if (true)
                    {
                        double integralTransformed[] = new double[2];
                        // 0,-slack/invScale rotated by rotation that takes YAxis to downAngle

                        // keep in mind the invScale=0 test is really a different test, don't expect it to be totally analogous
                        double xy[] = {0, invScale==0. ? 0. : -slack/invScale};
                        xy = VecMath.mxv(rotateDownAngleToMinusYAxisMatrix, xy); // by inverse of matrix
                        double x = xy[0];
                        double y = xy[1];
                        double arcLengthTransformed = integralOfCatenaryWithEndpointsRectangular(v0Transformed, v1Transformed, x, y, Double.POSITIVE_INFINITY, integralTransformed, null, null, scratchCatenaryRotated, 0);
                        if (testVerboseLevel >= 3) System.out.println("                arcLengthTransformed = "+arcLengthTransformed);
                        if (testVerboseLevel >= 3) System.out.println("                expectedArcLengthTransformed = "+expectedArcLengthTransformed);
                        assert_almost_eq(arcLengthTransformed, expectedArcLengthTransformed, 1e-6);
                        if (testVerboseLevel >= 3) System.out.println("                integralTransformed = "+VecMath.toString(integralTransformed));
                        if (testVerboseLevel >= 3) System.out.println("                expectedIntegralTransformed = "+VecMath.toString(expectedIntegralTransformed));
                        assert(VecMath.dist(integralTransformed, expectedIntegralTransformed) < 1e-6);
                    }

                    if (testVerboseLevel == 2) System.out.print(".");
                    if (testVerboseLevel >= 3) System.out.println("            ---------------------------------------------------------------");
                }
                if (testVerboseLevel == 2) System.out.println(); // newline after dots
                if (testVerboseLevel >= 1) System.out.println("      ===============================================================");
            } // for x0,x1
        }

        if (true)
        {
            System.out.println("      testing some fitFromMoment cases that have been problematic");
            String testCases[] = {
                "x0=-1.0, y0=0.0, x1=0.0, y1=0.0, xMoment=-0.5036269106706781, yMoment=-0.027290553371898757",
                "x0=-1.0, y0=0.0, x1=0.0, y1=0.0, xMoment=-0.5019665247911539, yMoment=-0.020949377300023747",
                "x0=-1.0, y0=2.220446049250313E-16, x1=0.0, y1=0.0, xMoment=-0.5011288865208755, yMoment=-0.016410201253350465",
                "x0=-0.9999999999999999, y0=2.7755575615628914E-17, x1=0.0, y1=0.0, xMoment=-0.5006712775428778, yMoment=-0.013005663996619649",
                "x0=-1.0, y0=-5.551115123125783E-17, x1=0.0, y1=0.0, xMoment=-0.5004068444282271, yMoment=-0.01036098511128418",
                "x0=-1.0, y0=-5.551115123125783E-17, x1=0.0, y1=0.0, xMoment=-0.8320025520166806, yMoment=-0.06050328101277758",
                "x0=-1.0, y0=-1.1102230246251565E-16, x1=0.0, y1=0.0, xMoment=-0.4835907692577395, yMoment=-0.010211074002742182",
                "x0=-1.0, y0=2.7755575615628914E-16, x1=0.0, y1=0.0, xMoment=-0.4880273204300428, yMoment=-0.008470672745238716",

                // binary search fail
                "x0=-0.9999999999999998, y0=1.0755285551056204E-16, x1=0.0, y1=0.0, xMoment=-0.49999999999999983, yMoment=-2.498712573656414E-10",
            };

            for (int iTestCase = 0; iTestCase < testCases.length; ++iTestCase)
            {
                System.out.println("      fitFromMoment test case "+iTestCase+"/"+testCases.length+":");

                String tokens[] = testCases[iTestCase].split(", "); // since java 1.4; okay whatever
                double x0 = Double.parseDouble(tokens[0].substring(3));
                double y0 = Double.parseDouble(tokens[1].substring(3));
                double x1 = Double.parseDouble(tokens[2].substring(3));
                double y1 = Double.parseDouble(tokens[3].substring(3));
                double xMoment = Double.parseDouble(tokens[4].substring(8));
                double yMoment = Double.parseDouble(tokens[5].substring(8));
                //System.out.println(testCases[iTestCase]);
                //System.out.println("x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment);
                assert(("x0="+x0+", y0="+y0+", x1="+x1+", y1="+y1+", xMoment="+xMoment+", yMoment="+yMoment).equals(testCases[iTestCase]));

                PRINT(x0);
                PRINT(y0);
                PRINT(x1);
                PRINT(y1);
                PRINT(xMoment);
                PRINT(yMoment);

                XXX_ALLOW_FITFROMMOMENT_FAILURE = true;
                CatenaryRotated catenaryRotated = new CatenaryRotated();
                com.donhatchsw.compat.ArrayList newtonPath = new com.donhatchsw.compat.ArrayList();
                catenaryRotated.fitFromMoment(x0,y0, x1,y1, xMoment,yMoment, newtonPath);
                PRINT(catenaryRotated);

                PRINTARRAY(newtonPath.toArray());
                if (true)
                {
                    newtonPath.add(new double[][] {{Double.NaN,Double.NaN},{Double.NaN,Double.NaN}}); // expedience
                    FORI (i, newtonPath.size())
                    {
                        double entry[][] = (double[][])newtonPath.get(i);
                        if (entry[0] == null)
                            entry[0] = new double[] {Double.NaN,Double.NaN}; // expedience
                        // apparently gnuplot likes inf but not nan :-(
                        System.out.println("    NEWTON PATH: "
                                +(Double.isNaN(entry[0][0])?"inf":entry[0][0])+" "
                                +(Double.isNaN(entry[0][1])?"inf":entry[0][1])+"  "
                                +(Double.isNaN(entry[1][0])?"inf":entry[1][0])+" "
                                +(Double.isNaN(entry[1][1])?"inf":entry[1][1]));
                    }
                }

                double momentActual[] = new double[2];
                double x0y0Actual[] = new double[2];
                double x1y1Actual[] = new double[2];
                double a0Actual[] = new double[2];
                double a1Actual[] = new double[2];
                catenaryRotated.integrate(catenaryRotated.t0, catenaryRotated.t1, momentActual);
                catenaryRotated.evaluate(catenaryRotated.t0, x0y0Actual);
                catenaryRotated.evaluate(catenaryRotated.t1, x1y1Actual);
                catenaryRotated.differentiate(catenaryRotated.t0, a0Actual);
                catenaryRotated.differentiate(catenaryRotated.t1, a1Actual);
                PRINTVEC(momentActual);
                double tol = 1e-12;
                assert_almost_eq(momentActual[0], xMoment, tol);
                assert_almost_eq(momentActual[1], yMoment, tol);
                assert_almost_eq(x0y0Actual[0], x0, tol);
                assert_almost_eq(x0y0Actual[1], y0, tol);
                assert_almost_eq(x1y1Actual[0], x1, tol);
                assert_almost_eq(x1y1Actual[1], y1, tol);
                assert_almost_eq(VecMath.norm(a0Actual), 1., tol);
                assert_almost_eq(VecMath.norm(a1Actual), 1., tol);
                System.out.println("        seems good!");
            }
            if (false)
            {
                System.out.println("WARNING: Exiting prematurely!");
                System.exit(1);
            }
        }

        System.out.println("    out confidenceTests");
    } // confidenceTests

    public static void interactiveDemo1()
    {
        final int eventVerbose = 0; // set to something else to debug
        java.awt.Canvas canvas = new java.awt.Canvas() {

            // Make it so we get keyboard focus on startup,
            // without having to click first.  Thanks, Melinda!
            public boolean isFocusTraversable()
            {
                return true;
            }

            class Model
            {
                double v0[] = {0.,0.};
                double v1[] = {1.,0.};


                class Sample {
                    boolean bad;
                    boolean byBinarySearch;
                    double x0;
                    double x1;
                    double y0;
                    double y1;
                    double xMoment;
                    double yMoment;

                    double xMomentNormalized;
                    double yMomentNormalized;
                    Sample(boolean bad, boolean byBinarySearch, double x0, double y0, double x1, double y1, double xMoment, double yMoment, double xMomentNormalized, double yMomentNormalized)
                    {
                        this.bad = bad;
                        this.byBinarySearch = byBinarySearch;
                        this.x0 = x0;
                        this.x1 = x1;
                        this.y0 = y0;
                        this.y1 = y1;
                        this.yMoment = yMoment;
                        this.yMoment = yMoment;
                        this.xMomentNormalized = xMomentNormalized;
                        this.yMomentNormalized = yMomentNormalized;
                    }
                };
                Sample samples[] = null;

                Model()
                {
                    String goodAndBadInFileName = "GOOD_AND_BAD_IN";
                    java.io.BufferedReader in = null;
                    try
                    {
                        in = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(goodAndBadInFileName)));
                    }
                    catch (java.io.FileNotFoundException e)
                    {
                        System.err.println("Error trying to open file "+goodAndBadInFileName+" for reading: "+e);
                    }
                    if (in != null)
                    {
                       String line = null;
                       com.donhatchsw.compat.regex.Pattern pattern = com.donhatchsw.compat.regex.Pattern.compile(" *INTERNAL (GOOD|ERROR): CatenaryRotated.fitFromMoment((ByBinarySearch)?)\\(x0=([^,]*), y0=([^,]*), x1=([^,]*), y1=([^,]*), xMoment=([^,]*), yMoment=([^),]*)\\).*");
                       System.out.print("Reading samples from "+goodAndBadInFileName+" ... ");
                       System.out.flush();
                       try {
                           com.donhatchsw.compat.ArrayList samplesArrayList = new com.donhatchsw.compat.ArrayList();
                           while ((line = in.readLine()) != null)
                           {
                               //System.out.println("got line: "+line);
                               com.donhatchsw.compat.regex.Matcher matcher = pattern.matcher(line);
                               //PRINT(matcher.matches());
                               assert(matcher.matches());
                               /*
                               PRINT(matcher.group(1));
                               PRINT(matcher.group(2));
                               PRINT(matcher.group(3));
                               PRINT(matcher.group(4));
                               PRINT(matcher.group(5));
                               PRINT(matcher.group(6));
                               PRINT(matcher.group(7));
                               */
                               String goodOrError = matcher.group(1);
                               String byBinarySearchOrNothing = matcher.group(2);
                               double x0 = Double.parseDouble(matcher.group(4));
                               double y0 = Double.parseDouble(matcher.group(5));
                               double x1 = Double.parseDouble(matcher.group(6));
                               double y1 = Double.parseDouble(matcher.group(7));
                               double xMoment = Double.parseDouble(matcher.group(8));
                               double yMoment = Double.parseDouble(matcher.group(9));
                               //PRINT(goodOrError);
                               //PRINT(x0);
                               //PRINT(y0);
                               //PRINT(x1);
                               //PRINT(y1);
                               //PRINT(xMoment);
                               //PRINT(yMoment);
                               assert(EQ(x1,0.,1e-12));
                               assert(EQ(y1,0.,1e-12));
                               assert(EQ(y0,0.,1e-12));
                               assert(INRANGE(-1.0001 <=, x0, <= 0.));
                               if (x0 == 0.)
                               {
                                   // can't normalize-- but we don't get errors on this case anyway
                                   assert(goodOrError.equals("GOOD"));
                                   continue;
                               }
                               assert(x0 < 0.);
                               // normize to space in which x0,y0 = 0,0  x1,y1=1,0
                               double size = -x0;
                               assert(size > 0.);
                               double xMomentNormalized = -xMoment / SQR(size);
                               double yMomentNormalized = yMoment / SQR(size);
                               /*
                               PRINT(xMomentNormalized);
                               PRINT(yMomentNormalized);
                               */
                               samplesArrayList.add(new Sample(goodOrError.equals("ERROR"), byBinarySearchOrNothing.equals("ByBinarySearch"), x0,y0, x1,y1, xMoment,yMoment, xMomentNormalized,yMomentNormalized));
                           }
                           System.out.println("done.");
                           samples = (Sample[])samplesArrayList.toArray(new Sample[samplesArrayList.size()]);
                       }
                       catch (java.io.IOException e)
                       {
                            System.err.println("Error reading from file "+goodAndBadInFileName+": "+e);
                       }
                       finally {
                           try {
                               in.close();
                           }
                           catch (java.io.IOException e)
                           {
                                System.err.println("Error trying to close input file "+goodAndBadInFileName+": "+e);
                           }
                       }
                    }
                }

            } // class Model
            class View
            {
                // Really viewing params (could separate into ViewParams and ViewState)...
                boolean antialiasFlag = true;
                boolean showPointsFlag = false;

                double focus[] = {.5, 0.};
                double logRadius = 1.;
                double radius = Math.pow(2., logRadius);

                double debugCullFrustumShrink = 1.;

                int nPaintsDone = 0;
            }
            class Controller
            {
            }
            private Model model = new Model();
            private View view = new View();
            private Controller controller = new Controller();
            private com.donhatchsw.awt.MyGraphics mostRecentGraphics = null;


            // SIZE (demo1)
            public java.awt.Dimension getPreferredSize()
            {
                //return new java.awt.Dimension(850,850);
                return new java.awt.Dimension(400,400);
                //return new java.awt.Dimension(200,200);
            }




            private java.awt.Image backBuffer = null;
            private java.awt.Dimension backBufferSize = null;

            public void update(java.awt.Graphics g) { paint(g); } // don't flash
            // PAINT (demo1)
            public void paint(java.awt.Graphics frontBufferGraphics)
            {
                if (eventVerbose >= 2) System.out.println("    in paint");

                java.awt.Dimension size = size();
                int w = size.width, h = size.height;
                if (backBuffer == null
                 || !size.equals(backBufferSize))
                {
                    System.out.println("    creating back buffer of size "+w+"x"+h+"");
                    backBuffer = this.createImage(w, h);
                    backBufferSize = size;
                }
                java.awt.Graphics g = backBuffer.getGraphics();
                if (false)
                    g = frontBufferGraphics; // make it single buffered

                if (view.antialiasFlag)
                    ((java.awt.Graphics2D)g).setRenderingHint(java.awt.RenderingHints.KEY_ANTIALIASING,
                                                              java.awt.RenderingHints.VALUE_ANTIALIAS_ON);
                else
                    ((java.awt.Graphics2D)g).setRenderingHint(java.awt.RenderingHints.KEY_ANTIALIASING,
                                                              java.awt.RenderingHints.VALUE_ANTIALIAS_OFF);

                int minSize = Math.min(w,h);
                int maxSize = Math.max(w,h);
                double xMinView = view.focus[0] -view.radius*w/minSize;
                double xMaxView = view.focus[0] + view.radius*w/minSize;
                double yMinView = view.focus[1] -view.radius*h/minSize;
                double yMaxView = view.focus[1] + view.radius*h/minSize;
                double xMinCull = view.focus[0] -view.radius*w/minSize * view.debugCullFrustumShrink;
                double xMaxCull = view.focus[0] + view.radius*w/minSize * view.debugCullFrustumShrink;
                double yMinCull = view.focus[1] -view.radius*h/minSize * view.debugCullFrustumShrink;
                double yMaxCull = view.focus[1] + view.radius*h/minSize * view.debugCullFrustumShrink;
                com.donhatchsw.awt.MyGraphics mg = new com.donhatchsw.awt.MyGraphics(g, size(),
                                               xMinView, xMaxView,
                                               yMinView, yMaxView);

                // Clear to black
                if (g != frontBufferGraphics) // if not single buffered
                {
                    mg.setColor(java.awt.Color.black);
                    mg.fillWindow();
                }


                //
                // Evolve.
                //

                // ...

                //
                // Draw.
                //


                // culling frustum
                mg.setColor(java.awt.Color.blue);
                mg.drawLine(xMinCull,yMinCull, xMaxCull,yMinCull);
                mg.drawLine(xMaxCull,yMinCull, xMaxCull,yMaxCull);
                mg.drawLine(xMaxCull,yMaxCull, xMinCull,yMaxCull);
                mg.drawLine(xMinCull,yMaxCull, xMinCull,yMinCull);


                // axes
                mg.setColor(new java.awt.Color(64,64,64));
                mg.drawLine(-1.,0., 1., 0.);
                mg.drawLine(0.,-1., 0., 1.);

                // show catenary endpoints
                mg.setColor(new java.awt.Color(128,128,128));
                mg.drawPoint(model.v0[0],model.v0[1], 5);
                mg.drawPoint(model.v1[0],model.v1[1], 5);

                CatenaryRotated catenaryRotated = new CatenaryRotated(); // scratch
                double moment[] = new double[2]; // scratch

                // Figure out largest and smallest mag level of interest
                int magLevel0 = 20; // XXX be more scientific
                while (true)
                {
                    double r = Math.pow(2., magLevel0);
                    double cosAndSin[][] = {{1,0},{0,1},{-1,0},{0,-1}};
                    double xMin = Double.POSITIVE_INFINITY;
                    double yMin = Double.POSITIVE_INFINITY;
                    double xMax = Double.NEGATIVE_INFINITY;
                    double yMax = Double.NEGATIVE_INFINITY;
                    for (int i = 0; i < cosAndSin.length; ++i)
                    {
                        double cosAngle = cosAndSin[i][0];
                        double sinAngle = cosAndSin[i][1];
                        catenaryRotated.fitFromPolarCoords(model.v0[0],model.v0[1],model.v1[0],model.v1[1], r, cosAngle, sinAngle, 0);
                        catenaryRotated.integrate(catenaryRotated.t0, catenaryRotated.t1, moment);
                        xMin = MIN(xMin, moment[0]);
                        xMax = MAX(xMax, moment[0]);
                        yMin = MIN(yMin, moment[1]);
                        yMax = MAX(yMax, moment[1]);
                    }
                    if (MAX(xMax-xMin,yMax-yMin) < view.radius / 100.) // XXX be more scientific
                    {
                        // magLevel0 is too small to be seen at all, but is used for things
                        // that connect to it.
                        break;
                    }
                    magLevel0--;
                }

                int magLevel1 = -10; // XXX be more scientific
                while (true)
                {
                    double r = Math.pow(2., magLevel1);
                    double cosAndSin[][] = {{1,0},{0,1},{-1,0},{0,-1}};
                    double xMin = Double.POSITIVE_INFINITY;
                    double yMin = Double.POSITIVE_INFINITY;
                    double xMax = Double.NEGATIVE_INFINITY;
                    double yMax = Double.NEGATIVE_INFINITY;
                    for (int i = 0; i < cosAndSin.length; ++i)
                    {
                        double cosAngle = cosAndSin[i][0];
                        double sinAngle = cosAndSin[i][1];
                        catenaryRotated.fitFromPolarCoords(model.v0[0],model.v0[1],model.v1[0],model.v1[1], r, cosAngle, sinAngle, 0);
                        catenaryRotated.integrate(catenaryRotated.t0, catenaryRotated.t1, moment);
                        xMin = MIN(xMin, moment[0]);
                        xMax = MAX(xMax, moment[0]);
                        yMin = MIN(yMin, moment[1]);
                        yMax = MAX(yMax, moment[1]);
                    }

                    // what's a criterion for figuring out
                    // if the window is safely inside the ellipse?
                    // It's if the view's bounding circle
                    // is contained in the ellipse's inscribed circle.
                    double xCenterEllipse = (xMin+xMax)/2.;
                    double yCenterEllipse = (yMin+yMax)/2.;
                    double ellipseInRadius = (xMax-xMin)/2.;
                    double cullCircumRadius = .5 * Math.hypot(xMaxCull-xMinCull, yMaxCull-yMinCull);
                    // test whether dist between centers plus view circumradius < ellipseInRadius
                    if (Math.hypot(view.focus[0]-xCenterEllipse,
                                   view.focus[1]-yCenterEllipse) + cullCircumRadius < ellipseInRadius)

                    {
                        // magLevel1 is too big to be seen at all, but is used for things
                        // that connect to it.
                        break;
                    }
                    magLevel1++;
                }


                int nMagsMajorPerMagLevel = 1;
                int nAnglesMajor = 16; // divide 360 into this many parts
                int nMagsMinorPerMajor = 10;
                int nAnglesMinorPerMajor = 10;

                int nAnglesMinor = nAnglesMajor * nAnglesMinorPerMajor;
                int nMagStepsMajor = (magLevel1-magLevel0) * nMagsMajorPerMagLevel;
                int nMagStepsMinor = nMagStepsMajor * nMagsMinorPerMajor;

                for (int iPass = 0; iPass < 2; ++iPass)
                {

                    // draw radial contours of constant angle
                    if (iPass == 0)
                        mg.setColor(java.awt.Color.white);
                    else
                    {
                        //mg.setColor(java.awt.Color.red);
                        mg.setColor(new java.awt.Color(128, 128, 255));
                    }
                    for (int iAngle = 0; iAngle < nAnglesMajor; ++iAngle)
                    {
                        int passOfThisAngle = (4*iAngle % nAnglesMajor == 0) ? 1 : 0;
                        if (iPass != passOfThisAngle)
                            continue;

                        double angle = 2*Math.PI/nAnglesMajor * iAngle;
                        double cosAngle = Math.cos(angle);
                        double sinAngle = Math.sin(angle);
                        double xMomentPrev = Double.NaN;
                        double yMomentPrev = Double.NaN;
                        for (int iMag = 0; iMag < nMagStepsMinor+1; ++iMag)
                        {
                            double r = Math.pow(2., LERP(magLevel0, magLevel1, (double)iMag/(double)nMagStepsMinor));
                            double x = r * cosAngle;
                            double y = r * sinAngle;
                            catenaryRotated.fitFromPolarCoords(model.v0[0],model.v0[1],model.v1[0],model.v1[1], r, cosAngle, sinAngle, 0);
                            catenaryRotated.integrate(catenaryRotated.t0, catenaryRotated.t1, moment);
                            if (iMag > 0)
                                mg.drawLine(xMomentPrev,yMomentPrev,
                                            moment[0], moment[1]);
                            if (view.showPointsFlag)
                                mg.drawPoint(moment[0], moment[1], 3);
                            xMomentPrev = moment[0];
                            yMomentPrev = moment[1];
                        }
                    }

                    // draw circular contours of constant magnitude.
                    // skip largest, since it's outside view.
                    if (iPass == 0)
                        mg.setColor(java.awt.Color.white);
                    else
                        mg.setColor(new java.awt.Color(128, 128, 255));
                    for (int iMagMajor = 0; iMagMajor < nMagStepsMajor; ++iMagMajor)
                    {
                        int passOfThisMag = iMagMajor == (0-magLevel0)*nMagsMajorPerMagLevel ? 1 : 0;
                        if (iPass != passOfThisMag)
                            continue;
                        double r = Math.pow(2., LERP(magLevel0, magLevel1, (double)iMagMajor/(double)nMagStepsMajor));
                        double xMomentPrev = Double.NaN;
                        double yMomentPrev = Double.NaN;
                        for (int iAngle = 0; iAngle < nAnglesMinor+1; ++iAngle)
                        {
                            double angle = 2*Math.PI/nAnglesMinor * iAngle;
                            double cosAngle = Math.cos(angle);
                            double sinAngle = Math.sin(angle);
                            double x = r * cosAngle;
                            double y = r * sinAngle;
                            catenaryRotated.fitFromPolarCoords(model.v0[0],model.v0[1],model.v1[0],model.v1[1], r, cosAngle, sinAngle, 0);
                            catenaryRotated.integrate(catenaryRotated.t0, catenaryRotated.t1, moment);
                            if (iAngle > 0)
                                mg.drawLine(xMomentPrev,yMomentPrev,
                                            moment[0], moment[1]);
                            if (view.showPointsFlag)
                                mg.drawPoint(moment[0], moment[1], 3);
                            xMomentPrev = moment[0];
                            yMomentPrev = moment[1];
                        }
                    }

                }

                // Draw good and bad samples
                if (model.samples != null)
                {
                    for (int i = 0; i < model.samples.length; ++i)
                    {
                        Model.Sample sample = model.samples[i];
                        double xMoment = sample.xMomentNormalized;
                        double yMoment = sample.yMomentNormalized;
                        if (INRANGE(xMinCull <=, xMoment, <= xMaxCull)
                         && INRANGE(yMinCull <=, yMoment, <= yMaxCull))
                        {
                            mg.setColor(sample.bad ? java.awt.Color.red : java.awt.Color.green);
                            int pointSize;
                            if (EQ(sample.x0, -1., 1e-12)) // i.e. if endpoints were originally bigger than moment
                                pointSize = 1;
                            else // i.e. if moment was originally bigger than endpoints
                                pointSize = 2;
                            if (sample.byBinarySearch)
                            {
                                //assert(false); // coverage
                                //pointSize += 4;
                                mg.setColor(sample.bad ? java.awt.Color.yellow : java.awt.Color.cyan);
                            }
                            mg.drawPoint(xMoment, yMoment, pointSize);
                        }
                    }
                }

                if (true)
                {
                    // XXX just visualize one point I was having trouble with
                    mg.setColor(java.awt.Color.yellow);
                    mg.drawPoint(0.4880273204300428, 0.008470672745238716, 1);
                }

                //
                // If anything's still moving, make paint get called again
                //

                // ...

                view.nPaintsDone++;
                //if (viewParams.showNumPaintsDone.get())
                {
                    g.setColor(java.awt.Color.white);
                    java.awt.Dimension viewSize = getSize(); // getWidth,getHeight don't exist in 1.1
                    int W = viewSize.width;
                    int H = viewSize.height;
                    int Y = 2;
                    com.donhatchsw.awt.MyGraphics mgTemp = new com.donhatchsw.awt.MyGraphics(g, viewSize, 0,W,H,0);
                    mgTemp.drawString("("+view.nPaintsDone+" paint"+(view.nPaintsDone==1?"":"s")+")", W-2, Y, 1, -1.);
                    Y += 18;
                    mgTemp.drawString("mag levels ["+magLevel0+" .. "+magLevel1+")", W-2, Y, 1, -1.);
                    Y += 18;
                }

                if (g != frontBufferGraphics)
                    frontBufferGraphics.drawImage(backBuffer, 0, 0, this);
                mostRecentGraphics = mg;


                if (eventVerbose >= 2) System.out.println("    out paint");
            } // paint
            {
                addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyPressed(java.awt.event.KeyEvent e)
                    {
                        boolean controlIsDown = ((e.getModifiers() & java.awt.event.InputEvent.CTRL_MASK) != 0);
                        int keyCode = e.getKeyCode();
                        char c = e.getKeyChar();
                        if (eventVerbose >= 1) System.out.println("    in keyPressed, keyEvent = "+e+" keyChar = (char)"+(int)c+"");

                        if (false) {}
                        else if (keyCode == java.awt.event.KeyEvent.VK_LEFT)
                        {
                            double dx = -1./8;
                            model.v0[0] += dx;
                            model.v1[0] += dx;
                            VecMath.lerp(view.focus, model.v0, model.v1, .5);
                            repaint();
                        }
                        else if (keyCode == java.awt.event.KeyEvent.VK_RIGHT)
                        {
                            double dx = 1./8;
                            model.v0[0] += dx;
                            model.v1[0] += dx;
                            VecMath.lerp(view.focus, model.v0, model.v1, .5);
                            repaint();
                        }
                        else if (keyCode == java.awt.event.KeyEvent.VK_UP)
                        {
                            double dy = 1./8;
                            model.v0[1] += dy;
                            model.v1[1] += dy;
                            VecMath.lerp(view.focus, model.v0, model.v1, .5);
                            repaint();
                        }
                        else if (keyCode == java.awt.event.KeyEvent.VK_DOWN)
                        {
                            double dy = -1./8;
                            model.v0[1] += dy;
                            model.v1[1] += dy;
                            VecMath.lerp(view.focus, model.v0, model.v1, .5);
                            repaint();
                        }
                        else if (c == '-' || c == '+' || c == '=')
                        {
                            double stepSize = .25;
                            double increment = c=='-' ? -stepSize : stepSize;
                            view.logRadius -= increment; // view.radius is inverse of scale
                            view.radius = Math.pow(2., view.logRadius);

                            PRINT(view.logRadius);
                            PRINT(view.radius);
                            repaint();
                        }
                        else if (c == 'p')
                        {
                            view.showPointsFlag ^= true;
                            PRINT(view.showPointsFlag);
                            repaint();
                        }
                        else if (c == java.awt.event.KeyEvent.CHAR_UNDEFINED)
                        {
                            // This is the case for things like arrow keys
                            //System.out.println("CHAR_UNDEFINED");
                        }
                        #define CTRL(lowerCaseLetter) ((lowerCaseLetter)-'a'+1)
                        else if (c == java.awt.event.KeyEvent.VK_ESCAPE
                              || c == CTRL('c')) // XXX do I want this? should be control panel I think, if I ever make one for this demo1
                        {
                            System.out.println("ciao!");
                            System.exit(0); // asinine way of doing things
                        }
                        else if (c == CTRL('f'))
                        {
                            view.debugCullFrustumShrink = (view.debugCullFrustumShrink!=1. ? 1. : .5);
                            PRINT(view.debugCullFrustumShrink);
                            repaint();
                        }
                        else if (c == ' ')
                        {
                            repaint();
                        }
                        else if (c == 'A')
                        {
                            view.antialiasFlag ^= true;
                            PRINT(view.antialiasFlag);
                            repaint();
                        }
                        else if (c == 'h')
                        {
                            System.out.println("The following keys do things:");
                            System.out.println("         -/+/= - zoom out/in");
                            System.out.println("    arrow keys - move catenary endpoints");
                            System.out.println("       shift-A - toggle antialiasing");
                            System.out.println("             p - toggle points used to draw curves");
                            System.out.println("        ctrl-f - shrink/unshrink view cull frustum");
                            System.out.println("             h - show this help message");
                            System.out.println("           Esc - quit");
                        }
                        else
                        {
                            System.out.println("Huh?");
                        }
                    }
                });
                addMouseListener(new java.awt.event.MouseListener() {
                    public void mouseClicked(java.awt.event.MouseEvent e)
                    {
                        if (eventVerbose >= 1) System.out.println("    in mouseClicked at "+e.getX()+","+e.getY()+"");
                        if (eventVerbose >= 1) System.out.println("    out mouseClicked");
                    }
                    public void mousePressed(java.awt.event.MouseEvent e)
                    {
                        if (eventVerbose >= 1) System.out.println("    in mousePressed at "+e.getX()+","+e.getY()+"");
                        // XXX dup code
                        if (mostRecentGraphics != null)
                        {
                            double thisPoint[] = new double[2];
                            mostRecentGraphics.pick(e.getX(), e.getY(), thisPoint);
                            if (eventVerbose >= 1) System.out.println("        thisPoint = "+Arrays.toStringCompact(thisPoint));
                            // do something with it
                            repaint();
                        }
                        if (eventVerbose >= 1) System.out.println("    out mousePressed");
                    }
                    public void mouseReleased(java.awt.event.MouseEvent e)
                    {
                        if (eventVerbose >= 1) System.out.println("    in mouseReleased at "+e.getX()+","+e.getY()+"");

                        if (eventVerbose >= 1) System.out.println("    out mouseReleased");
                    }
                    public void mouseEntered(java.awt.event.MouseEvent e)
                    {
                        if (eventVerbose >= 1) System.out.println("    in mouseEntered at "+e.getX()+","+e.getY()+"");
                        if (eventVerbose >= 1) System.out.println("    out mouseEntered");
                    }
                    public void mouseExited(java.awt.event.MouseEvent e)
                    {
                        if (eventVerbose >= 1) System.out.println("    in mouseExited at "+e.getX()+","+e.getY()+"");
                        if (eventVerbose >= 1) System.out.println("    out mouseExited");
                    }
                });
                addMouseMotionListener(new java.awt.event.MouseMotionListener() {
                    public void mouseMoved(java.awt.event.MouseEvent e)
                    {
                        if (eventVerbose >= 3) System.out.println("    in mouseMoved to "+e.getX()+","+e.getY()+"");
                        if (eventVerbose >= 3) System.out.println("    out mouseMoved");
                    }
                    public void mouseDragged(java.awt.event.MouseEvent e)
                    {
                        if (eventVerbose >= 1) System.out.println("    in mouseDragged to "+e.getX()+","+e.getY()+"");
                        if (mostRecentGraphics != null)
                        {
                            double thisPoint[] = new double[2];
                            mostRecentGraphics.pick(e.getX(), e.getY(), thisPoint);
                            // do something with it
                        }
                        if (eventVerbose >= 1) System.out.println("    out mouseDragged");
                    }
                });
            }
        }; // canvas
        canvas.requestFocus(); // seems to be needed initially XXX see whether this is true

        final java.awt.Frame frame = new java.awt.Frame("Optimal Trajectories");
        frame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent we)
            {
                frame.dispose();
                System.out.println("ciao!");
                System.exit(0); // asinine way of doing things
            }
        });
        frame.setForeground(java.awt.Color.white);
        frame.setBackground(java.awt.Color.black);
        frame.add(canvas);
        frame.pack();
        frame.show();
    } // interactiveDemo1

    public static void main(String args[])
    {
        System.out.println("in main");
        if (args.length == 1 && args[0].equals("demo1"))
            interactiveDemo1();
        else if (args.length == 1 && args[0].equals("confidenceTests"))
            confidenceTests();
        else
        {
            System.err.println("Usage: CatenaryRotated [demo1|confidenceTests]\n");
            System.exit(1);
        }

        System.out.println("out main");
    }

}  // CatenaryRotated
