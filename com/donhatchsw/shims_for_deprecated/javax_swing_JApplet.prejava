#include "macros.h"

package com.donhatchsw.shims_for_deprecated;

@SuppressWarnings("serial")
public class javax_swing_JApplet
    extends java_applet_Applet
    implements javax.swing.RootPaneContainer
{
    public javax_swing_JApplet()
    {
	CHECK(this.getLayout() instanceof java.awt.FlowLayout);
	// Although JApplet's doc doesn't say it,
	// apparently it sets its own layout (*not* the content pane's layout) to a BorderLayout.
	// If we don't do this, it stays a FlowLayout,
	// and the root pane doesn't expand to fill.
	this.setLayout(new java.awt.BorderLayout());

	// Apparently the content pane's layout is already a
	// (subclass of) BorderLayout, as required.  Printing it yields:
	// "javax.swing.JRootPane$1[hgap=0,vgap=0]"
	CHECK(this.getContentPane().getLayout() instanceof java.awt.BorderLayout);

	CHECK(!isRootPaneCheckingEnabled());
	this.add(rootPane);
	setRootPaneCheckingEnabled(true);
	CHECK(isRootPaneCheckingEnabled());
    }


    protected boolean isRootPaneCheckingEnabled() {
      return rootPaneCheckingEnabled;
    }
    protected void setRootPaneCheckingEnabled(boolean enabled) {
      rootPaneCheckingEnabled = enabled;
    }

    public void setJMenuBar(javax.swing.JMenuBar menuBar) {
	getRootPane().setJMenuBar(menuBar);
    }

    public javax.swing.JMenuBar getJMenuBar() {
        return getRootPane().getJMenuBar();
    }

    // "The JApplet class is slightly incompatible with java.applet.Applet. JApplet contains a JRootPane as its only child. The contentPane should be the parent of any children of the JApplet. As a convenience add and its variants, remove and setLayout have been overridden to forward to the contentPane as necessary. This means you can write: applet.add(child)
    @Override public void remove(java.awt.Component component) {
      // " If comp is not the rootPane, this will forward the call to the contentPane. This will do nothing if comp is not a child of the JFrame or contentPane."
      // XXX what JFrame??  I think it means the JApplet?
      CHECK_NE(component, getRootPane());  // it's unclear whether this is allowed.  it would be weird, though, so I disallow it.
      getRootPane().getContentPane().remove(component);
    }
    @Override public void setLayout(java.awt.LayoutManager layoutManager) {
      // "Overridden to conditionally forward the call to the contentPane."
      if (isRootPaneCheckingEnabled()) {
	getRootPane().getContentPane().setLayout(layoutManager);
      } else {
	super.setLayout(layoutManager);
      }
    }
    @Override protected void addImpl(java.awt.Component component, Object constraints, int index) {
      // "This method is overridden to conditionally forward calls to the contentPane. By default, children are added to the contentPane instead of the frame"
      // XXX what frame?  I think it means the JApplet?
      if (isRootPaneCheckingEnabled()) {
	getRootPane().getContentPane().add(component, constraints, index);
      } else {
	super.addImpl(component, constraints, index);
      }
    }

    @Override public void update(java.awt.Graphics g) {
	// "Just calls paint(g). This method was overridden to prevent an unnecessary call to clear the background."
	paint(g);
    }

    protected boolean rootPaneCheckingEnabled = false;  // "This is initially false, but is set to true when the JApplet is constructed."
    protected javax.swing.JRootPane rootPane = new javax.swing.JRootPane();

    //=====================================================================
    // javax.swing.RootPaneContainer interface
    @Override public javax.swing.JRootPane getRootPane() {
	// "Return this component's single JRootPane child. A conventional implementation of this interface will have all of the other methods indirect through this one. The rootPane has two children: the glassPane and the layeredPane."
	return rootPane;
    }
    @Override public void setContentPane(java.awt.Container contentPane) {
	// "Generally implemented with getRootPane().setContentPane(contentPane);"
	getRootPane().setContentPane(contentPane);
    }
    @Override public java.awt.Container getContentPane() {
	return getRootPane().getContentPane();
    }
    @Override public void setLayeredPane(javax.swing.JLayeredPane layeredPane) {
	// "Generally implemented with getRootPane().setLayeredPane(layeredPane);"
	getRootPane().setLayeredPane(layeredPane);
    }
    @Override public javax.swing.JLayeredPane getLayeredPane() {
	return getRootPane().getLayeredPane();
    }
    @Override public void setGlassPane(java.awt.Component glassPane) {
	// "Generally implemented with getRootPane().setGlassPane(glassPane);"
	getRootPane().setGlassPane(glassPane);
    }
    @Override public java.awt.Component getGlassPane() {
	return getRootPane().getGlassPane();
    }
    //=====================================================================
}
