/* vim: set filetype=java: */
/**
* Applet viewer.
*/

package com.donhatchsw.shims_for_deprecated;

#include "macros.h"

public class com_donhatchsw_applet_AppletViewer
{
    public static void main(final String[] args)
    {
        System.out.println("in main");

        if (args.length < 1)
        {
            System.err.println("Usage: AppletViewer <AppletClassName> [param0=value0 parem1=value1 ...]");
            System.exit(1);
        }
        String appletClassName = args[0];

        com.donhatchsw.shims_for_deprecated.java_applet_Applet applet = null;
        {
            Class appletClass = null;
            {
                try
                {
                    appletClass = Class.forName(appletClassName);
                }
                catch (ClassNotFoundException e)
                {
                    System.err.println("Couldn't find class named \""+appletClassName+"\"");
                    System.exit(1);
                }
            }
            java.lang.reflect.Constructor appletConstructor = null;
            {
                try
                {
                    appletConstructor = appletClass.getConstructor(new Class[]{});
                }
                catch (NoSuchMethodException e)
                {
                    System.err.println("Couldn't find public no-arg constructor for \""+appletClassName+"\"");
                    System.exit(1);
                }
            }
            Object appletObject = null;
            {
                try
                {
                    appletObject = appletConstructor.newInstance(new Object[]{});
                }
                catch (InstantiationException e)
                {
                    System.err.println("Couldn't instantiate \""+appletClassName+"\" from its no-arg constructor: "+e);
                    System.exit(1);
                }
                catch (IllegalAccessException e)
                {
                    System.err.println("Couldn't instantiate \""+appletClassName+"\" from its no-arg constructor: "+e);
                    System.exit(1);
                }
                catch (java.lang.reflect.InvocationTargetException e)
                {
                    System.err.println("Couldn't instantiate \""+appletClassName+"\" from its no-arg constructor: "+e.getTargetException());
                    System.exit(1);
                }
            }
            try
            {
                applet = (com.donhatchsw.shims_for_deprecated.java_applet_Applet)appletObject;
            }
            catch (ClassCastException e)
            {
                System.err.println("AppletViewer: class "+appletClass.getName()+" doesn't seem to be derived from "+com.donhatchsw.shims_for_deprecated.java_applet_Applet.class.getName()+"");
                System.exit(1);
            }
        }


        //final javax.swing.JFrame frame = new javax.swing.JFrame("Example Applet")
        final java.awt.Frame frame = new java.awt.Frame("Applet Viewer: "+appletClassName)
        {
            OVERRIDE public boolean handleEvent(java.awt.Event event)
            {
                switch(event.id)
                {
                    case java.awt.Event.WINDOW_DESTROY:
                        System.out.println("bye!");
                        // Empirically, either of the following
                        // cause the app to exit-- do both to be safe!
                        // (XXX I've heard rumors that just doing dispose()
                        //  messes up the debugger)
                        // (XXX but doing exit is evil)
                        dispose(); // hide() doesn't delete the windows
                        System.exit(0);
                        return true;
                }
                return super.handleEvent(event);
            }

            // can't override dispatchEvent because it's final
            public void dispatchEventImpl(java.awt.AWTEvent g)
            {
                System.out.println("        in frame.dispatchEventImpl");
                System.out.println("        out frame.dispatchEventImpl");
            }

        };
        // The above handleEvent no longer seems to work as of java 1.5.
        // So we have to use a listener.
        // XXX not sure how far back this exists, may need to use reflection to get it
        {
            com.donhatchsw.awt.MainWindowCount.increment();
            final com.donhatchsw.shims_for_deprecated.java_applet_Applet finalApplet = applet;
            frame.addWindowListener(new java.awt.event.WindowAdapter() {
                OVERRIDE public void windowClosing(java.awt.event.WindowEvent we)
                {
                    frame.dispose();
                } 
                OVERRIDE public void windowClosed(java.awt.event.WindowEvent we)
                {
                    // It's not entirely clear whether destroy() should be called when the main window closes,
                    // or whether the *last* window closes.  I'm choosing the former,
                    // for pragmatic reasons, so the applet can detach that window's resources.
                    finalApplet.destroy();
                    System.out.println("ciao!");
                    com.donhatchsw.awt.MainWindowCount.decrementAndExitIfImTheLastOne();
                }
            });
        }

        // The following seems to be necessary, or getParameter() will crash, at least in 1.4.
        // And we need it anyway, to send params from the command line.
        // XXX need a clever way to detect spurious extra params! not sure there is a way when in a web page, but if using main's args, could remove them as we read them and see if anything is left over.
        applet.setStub(new com.donhatchsw.shims_for_deprecated.java_applet_AppletStub() {
             public void appletResize(int width, int height) 
             {
                /* should resize frame, but an ExampleApplet never asks to be resized */
                // XXX for now, print this... not sure when this gets called, if ever
                System.out.println("in appletResize(width="+width+", height="+height+")");
             }
             public com.donhatchsw.shims_for_deprecated.java_applet_AppletContext getAppletContext() { return null;}
             public java.net.URL getCodeBase() { return null; }
             public java.net.URL getDocumentBase() { return null; }
             public String getParameter(String name)
             {
                 // case insensitive... and unfortunately there's no
                 // startsWithIgnoreCase
                 String prefix = name.toLowerCase() + "=";
                 // search backwards from end, so later ones take precedence...
                 for (int i = args.length-1; i >= 0; --i)
                     if (args[i].toLowerCase().startsWith(prefix))
                         return args[i].substring(prefix.length());
                 return null;
             }
             // XXX what's this mean?
             public boolean isActive() { return true; }
        });

        frame.add(applet);

        applet.init();
        applet.start();

        //int x = 20, y = 20;
        int x = 400, y = 20;

        //int w = 256, h = 256;
        int w = 512, h = 512;
        //int w = 800, h = 800;
        //int w = 1100, h = 1100;

        if (true)
        {
            String xString = applet.getParameter("x");
            if (xString != null) x = Integer.parseInt(xString);
            String yString = applet.getParameter("y");
            if (yString != null) y = Integer.parseInt(yString);
            String wString = applet.getParameter("w");
            if (wString != null) w = Integer.parseInt(wString);
            String hString = applet.getParameter("h");
            if (hString != null) h = Integer.parseInt(hString);
        }

        //frame.pack();  // apparently not necessary?  TODO: get clear on this
        frame.setLocation(x, y);
        frame.setSize(w, h);

        frame.setVisible(true);  // available in java 1.5, replaces deprecated show()

        com.donhatchsw.awt.MainWindowCount.decrementAndExitIfImTheLastOne();

        System.out.println("out main");
    } // main

} // AppletViewer
