package com.donhatchsw.compat;
#include "macros.h"
/**
* ArrayList<int>.
* Not optimized (but it could be).
*/
public class IntArrayList
{
    private ArrayList arrayList;

    public IntArrayList(int initialCapacity)
    {
        arrayList = new ArrayList(initialCapacity);
    }
    public IntArrayList()
    {
        arrayList = new ArrayList();
    }
    public IntArrayList(ArrayList from) // this is Collection in the real ArrayList
    {
        arrayList = new ArrayList(from);
    }
    public void trimToSize()
    {
        arrayList.trimToSize();
    }
    public void ensureCapacity(int minCapacity)
    {
        arrayList.ensureCapacity(minCapacity);
    }
    public int size()
    {
        return arrayList.size();
    }
    public boolean isEmpty()
    {
        return arrayList.isEmpty();
    }
    public boolean contains(int element)
    {
        return arrayList.contains(new Integer(element));
    }
    public int indexOf(int element)
    {
        return arrayList.indexOf(new Integer(element));
    }
    public int lastIndexOf(int element)
    {
        return arrayList.lastIndexOf(new Integer(element));
    }
    public java.lang.Object clone()
    {
        IntArrayList cloned = new IntArrayList();
        cloned.arrayList = (ArrayList)this.arrayList.clone();
        return cloned;
    }
    public int[] toArray()
    {
        return toArray(new int[arrayList.size()]);
    }
    public int[] toArray(int[] to)
    {
        if (to.length < arrayList.size())
            return toArray();
        for (int i = 0; i < arrayList.size(); ++i)
            to[i] = ((Integer)arrayList.get(i)).intValue();
        return to;
    }
    public int get(int index)
    {
        return ((Integer)arrayList.get(index)).intValue();
    }
    public int set(int index, int element)
    {
        return ((Integer)arrayList.set(index, new Integer(element))).intValue();
    }
    public boolean add(int element)
    {
        return arrayList.add(new Integer(element));
    }
    public void add(int index, int element)
    {
        arrayList.add(index, new Integer(element));
    }
    /** the version of remove() that takes an index */
    public int removeIndex(int index)
    {
        return ((Integer)arrayList.remove(index)).intValue();
    }
    /** the version of remove() that takes an element */
    /** XXX javap says boolean, some doc says it returns an Object, some other doc doesn't mention it at all... fuck it, I'm returning void. */
    public void removeElement(int element)
    {
        arrayList.remove(new Integer(element));
    }
    public void clear()
    {
        arrayList.clear();
    }
    public boolean addAll(IntArrayList from) // this is Collection in the real ArrayList
    {
        return arrayList.addAll(from.arrayList);
    }
    public boolean addAll(int index, IntArrayList from) // this is Collection in the real ArrayList
    {
        return arrayList.addAll(index, from.arrayList);
    }
    protected void removeRange(int fromIndex, int toIndex)
    {
        arrayList.removeRange(fromIndex, toIndex);
    }

    /** test program */
    public static void main(String args[])
    {
        IntArrayList a = new IntArrayList();
        assert(a.size() == 0);
        a.add(100);
        assert(a.size() == 1);
        a.add(200);
        assert(a.size() == 2);
        a.add(-1);
        assert(a.size() == 3);
        a.removeIndex(a.size()-1);
        assert(a.size() == 2);
        a.add(300);
        assert(a.size() == 3);
        a.clear();
        assert(a.size() == 0);
        System.out.println("All good!");
    }
} // class ArrayList
