/* vim: set filetype=java: */
package com.donhatchsw.compat;

import com.donhatchsw.util.Arrays; // for toStringCompact, used by STRINGIFY

#include "macros.h"

/**
* sprintf.
* Very primitive and special-case and excruciatingly slow so far,
* but I need %.17g, and so do you.
* And it's a good stress for the regex stuff too.
* <p>
* So far it supports (pretty much) the formats g, d, s, %.
*/
public class Format
{
    /**
    * 0: nothing
    * 1: prints some stuff
    */
    public static int verboseLevel = 0;


    /** the real mccoy */
    public static String sprintf(String format, Object args[])
    {
        if (verboseLevel >= 1) System.out.println("in sprintf(format="+STRINGIFY(format)+", args="+STRINGIFY(args)+")");
        // XXX could make this pattern static, it's the only one we ever use
        regex.Matcher matcher = regex.Pattern.compile("([^%])|(%(-)?((\\d+)|(\\*))?(\\.((\\d+)|(\\*)))?(.))").matcher(format);
        // The most natural way to do this would be via successive lookingAt()s,
        // i.e. match the character at the beginning of the remainder of the string.
        // Unfortunately there is no lookingAt() that takes an offset argument,
        // so to do it like that we would have to keep taking substrings
        // of every suffix of the string, which is very inefficient.
        // So instead, we use find().  which is kind of stupid
        // because we are only interested in matching at the beginning of the string,
        // but whatever.
        // XXX oh I think \A can help?  that will only match at the beginning of the input...
        // XXX not sure if "input" means the whole input or starting at the start I tell it
        // Actually if we wanted to be efficient we would step through character by character
        // and only use the regex when we hit a %... but I want to test regex.
        StringBuffer sb = new StringBuffer();
        int iArg = 0;
        int indexIntoFormat = 0;
        while (matcher.find())
        {
            CHECK(matcher.start(0) == indexIntoFormat); // always matches at the beginning
            if (verboseLevel >= 1)
            {
                System.out.println("    format = "+STRINGIFY(format)+" indexIntoFormat="+indexIntoFormat+" matched ["+matcher.start(0)+","+matcher.end()+"): "+STRINGIFY(format.substring(matcher.start(0), matcher.end())));
                int nGroups = matcher.groupCount();
                System.out.println("        "+nGroups+" groups");
                for (int iGroup = 0; iGroup < nGroups+1; ++iGroup) // note the +1
                {
                    System.out.println("            "+iGroup+": \""+matcher.group(iGroup)+"\"");
                }
            }
            indexIntoFormat = matcher.end();
            String oneCharLiteralString = matcher.group(1);
            String leftJustifyString = matcher.group(3);
            String widthString = matcher.group(4);
            String precisionString = matcher.group(8);
            String formatCharString = matcher.group(11);
            if (verboseLevel >= 1)
            {
                System.out.println("    leftJustifyString = "+STRINGIFY(leftJustifyString));
                System.out.println("    widthString = "+STRINGIFY(widthString));
                System.out.println("    precisionString = "+STRINGIFY(precisionString));
                System.out.println("    formatCharString = "+STRINGIFY(formatCharString));
            }
            if (oneCharLiteralString != null)
            {
                sb.append(oneCharLiteralString);
            }
            else
            {
                boolean leftJustify = false;
                boolean zeroPad = false;
                int width = -1;
                int precision = -1;

                if (leftJustifyString != null)
                    leftJustify = true;
                if (widthString != null)
                {
                    if (widthString.length() > 1 && widthString.charAt(0) == '0')
                    {
                        zeroPad = true;
                        widthString = widthString.substring(1);
                    }
                    if (widthString.equals("*"))
                    {
                        if (iArg >= args.length)
                            throw new IllegalArgumentException("sprintf expected width arg "+iArg+" of type int, got end of argument list instead");
                        if (!(args[iArg] instanceof Integer))
                            throw new IllegalArgumentException("sprintf expected width arg "+iArg+" of type int, got type "+args[iArg].getClass()+" instead");
                        width = ((Integer)args[iArg++]).intValue();
                    }
                    else
                    {
                        width = Integer.parseInt(widthString);
                    }
                }
                if (precisionString != null)
                {
                    if (precisionString.equals("*"))
                    {
                        if (iArg >= args.length)
                            throw new IllegalArgumentException("sprintf expected precision arg "+iArg+" of type int, got end of argument list instead");
                        if (!(args[iArg] instanceof Integer))
                            throw new IllegalArgumentException("sprintf expected precision arg "+iArg+" of type int, got type "+args[iArg].getClass()+" instead");
                        precision = ((Integer)args[iArg++]).intValue();
                    }
                    else
                        precision = Integer.parseInt(precisionString);
                }
                else
                    precision = 6; // XXX wait, this is the default for %g, not everything else in the universe!!

                CHECK(formatCharString != null
                    && formatCharString.length() == 1);
                char formatChar = formatCharString.charAt(0);
                String thisConversionResult;
                if (formatChar == 'g')
                {
                    if (iArg >= args.length)
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type double, got end of argument list instead");

                    if (!(args[iArg] instanceof Double))
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type double, got type "+args[iArg].getClass()+" instead");

                    double x = ((Double)args[iArg++]).doubleValue();
                    String sign = "";
                    if (x < 0)
                    {
                        x = -x;
                        sign = "-";
                    }

                    double threshold = Math.round(Math.pow(10, precision));
                    double scale = 1.;
                    if (x != 0.)
                        while (x < threshold)
                        {
                            x *= 10;
                            scale *= 10;
                        }
                    while (x >= threshold)
                    {
                        x /= 10;
                        scale /= 10;
                    }
                    x = Math.round(x);
                    x /= scale;
                    if (Math.floor(x) == x)
                        thisConversionResult = sign+(int)Math.floor(x);
                    else
                        thisConversionResult = sign+x;
                }
                else if (formatChar == 'd')
                {
                    if (iArg >= args.length)
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type int, got end of argument list instead");
                    if (!(args[iArg] instanceof Integer))
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type int, got type "+args[iArg].getClass()+" instead");

                    int x = ((Integer)args[iArg++]).intValue();
                    thisConversionResult = ""+x;
                }
                else if (formatChar == 's')
                {
                    if (iArg >= args.length)
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type String, got end of argument list instead");
                    if (!(args[iArg] instanceof String))
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type int, got type "+args[iArg].getClass()+" instead");
                    String s = (String)args[iArg++];
                    // precision means truncate it in this case
                    if (precisionString != null
                     && precision < s.length())
                        s = s.substring(precision);
                    thisConversionResult = s;
                }
                else if (formatChar == '%')
                {
                    thisConversionResult = "%";
                }
                else
                {
                    throw new IllegalArgumentException("sprintf: format char '"+formatChar+"' in \""+format+"\" unimplemented");
                }
                while (thisConversionResult.length() < width) // XXX inefficient
                {
                    // not sure this makes sense when leftJustify, but whatever
                    char padChar = (zeroPad ? '0' : ' ');
                    if (leftJustify)
                        thisConversionResult = thisConversionResult + padChar;
                    else
                    {
                        thisConversionResult = padChar + thisConversionResult;
                    }
                }
                sb.append(thisConversionResult);
            }
        }
        if (indexIntoFormat != format.length())
            throw new IllegalArgumentException("sprintf got bad format \""+format+"\" (or not implemented yet)");
        return sb.toString();
    } // sprintf

    /** convenience wrapper */
    public static String sprintf(String format)
    {
        return sprintf(format, new Object[]{});
    }
    /** convenience wrapper */
    public static String sprintf(String format, int arg0)
    {
        return sprintf(format, new Object[]{new Integer(arg0)});
    }
    /** convenience wrapper */
    public static String sprintf(String format, double arg0)
    {
        return sprintf(format, new Object[]{new Double(arg0)});
    }
    /** convenience wrapper */
    public static String sprintf(String format, int arg0, int arg1)
    {
        return sprintf(format, new Object[]{new Integer(arg0),
                                            new Integer(arg1)});
    }
    /** convenience wrapper */
    public static String sprintf(String format, int arg0, double arg1)
    {
        return sprintf(format, new Object[]{new Integer(arg0),
                                            new Double(arg1)});
    }
    /** convenience wrapper */
    public static String sprintf(String format, double arg0, double arg1)
    {
        return sprintf(format, new Object[]{new Double(arg0),
                                            new Double(arg1)});
    }
    /** convenience wrapper */
    public static String sprintf(String format, int arg0, String arg1)
    {
        return sprintf(format, new Object[]{new Integer(arg0),
                                            arg1});
    }
    /** convenience wrapper */
    public static String sprintf(String format, int arg0, int arg1, int arg2)
    {
        return sprintf(format, new Object[]{new Integer(arg0),
                                            new Integer(arg1),
                                            new Integer(arg2)});
    }
    /** convenience wrapper */
    public static String sprintf(String format, int arg0, int arg1, double arg2)
    {
        return sprintf(format, new Object[]{new Integer(arg0),
                                            new Integer(arg1),
                                            new Double(arg2)});
    }
    /** convenience wrapper */
    public static String sprintf(String format, int arg0, double arg1, double arg2)
    {
        return sprintf(format, new Object[]{new Integer(arg0),
                                            new Double(arg1),
                                            new Double(arg2)});
    }
    /** convenience wrapper */
    public static String sprintf(String format, double arg0, double arg1, double arg2)
    {
        return sprintf(format, new Object[]{new Double(arg0),
                                            new Double(arg1),
                                            new Double(arg2)});
    }

    /** test program, not a very good one at that */
    public static void main(String args[])
    {
        if (true)
        {
            // XXX should check these against the real printf
            System.out.println(sprintf("%41.26g", 1/3.)); // wrong
            System.out.println(sprintf("%.26g", 1/3.)); // wrong
            System.out.println(sprintf("%.17g", 1/3.));
            System.out.println(sprintf("%.*g", 9, 1/3.));
            System.out.println(sprintf("%g", 1/3.));
            System.out.println(sprintf("%.0g", 1-1e-14));
            System.out.println(sprintf("%.1g", 1-1e-14));
            System.out.println(sprintf("%.2g", 1-1e-14));
            System.out.println(sprintf("%.3g", 1-1e-14));
            System.out.println(sprintf("%.4g", 1-1e-14));
            System.out.println(sprintf("%.5g", 1-1e-14));
            System.out.println(sprintf("%.6g", 1-1e-14));
            System.out.println(sprintf("%.7g", 1-1e-14));
            System.out.println(sprintf("%.8g", 1-1e-14));
            System.out.println(sprintf("%.9g", 1-1e-14));
            System.out.println(sprintf("%.10g", 1-1e-14));
            System.out.println(sprintf("%.11g", 1-1e-14));
            System.out.println(sprintf("%.12g", 1-1e-14));
            System.out.println(sprintf("%.13g", 1-1e-14));
            System.out.println(sprintf("%.14g", 1-1e-14));
            System.out.println(sprintf("%.15g", 1-1e-14));
            System.out.println(sprintf("%.16g", 1-1e-14));
            System.out.println("|"+sprintf("%10.3g", 1/3.)+"|");
            System.out.println("|"+sprintf("%-10.3g", 1/3.)+"|");
            System.out.println("|"+sprintf("%*.3g", 20, 1/3.)+"|");
            System.out.println("|"+sprintf("%-*.3g", 20, 1/3.)+"|");
            System.out.println("|"+sprintf("%*.*g", 30, 3, 1/3.)+"|");
            System.out.println("|"+sprintf("%-*.*g", 30, 3, 1/3.)+"|");
            System.out.println(sprintf("(%d %d %g)", 1, 2, 1/3.));
            System.out.println(sprintf("%%"));
            System.out.println(sprintf("%% %d %% d %% %d %% d %%", 1,2));
            System.out.println(sprintf("%%%d%%d%%%d%%d%%", 1,2));

            String leftJustifies[] = {"","-"};
            int widths[] = {0,1,2,3,10,20,30};
            int precisions[] = {0,1,2,3,4,5,6};
            int vals[] = {-123,-101,-100,-99,-11,-10,-9,-1,0,1,9,10,11,99,100,101,123};
            FORI (iVal, vals.length)
            FORI (iWidth, widths.length)
            FORI (iLeftJustify, leftJustifies.length)
            FORI (iPrecision, precisions.length)
            {
                String result00 = sprintf("[%"+leftJustifies[iLeftJustify]
                                              +widths[iWidth]
                                              +"."
                                              +precisions[iPrecision]
                                              +"d]",
                                           vals[iVal]);
                System.out.println(result00);
                String result01 = sprintf("[%"+leftJustifies[iLeftJustify]
                                              +widths[iWidth]
                                              +"."
                                              +"*"
                                              +"d]",
                                           precisions[iPrecision],
                                           vals[iVal]);
                CHECK(result01.equals(result00));
                String result02 = sprintf("[%"+leftJustifies[iLeftJustify]
                                              +"*"
                                              +"."
                                              +precisions[iPrecision]
                                              +"d]",
                                           widths[iWidth],
                                           vals[iVal]);
                CHECK(result02.equals(result00));
                String result03 = sprintf("[%"+leftJustifies[iLeftJustify]
                                              +"*"
                                              +"."
                                              +"*"
                                              +"d]",
                                           widths[iWidth],
                                           precisions[iPrecision],
                                           vals[iVal]);
                CHECK(result03.equals(result00));
            }
        }
        if (true)
        {
            String[] formatsThatShouldThrowExceptions = {
              "%",
              "%-",
              "%.",
              "%8.",
              "%-8.",
              "%8",
              "%8.8",
              "%.8",
              "%.-8g",
            };
            for (int i = 0; i < formatsThatShouldThrowExceptions.length; ++i) {
              String format = formatsThatShouldThrowExceptions[i];
              System.out.print(Arrays.toStringCompact(format)+": ");
              boolean caught = false;
              try {
                String formatted = sprintf(formatsThatShouldThrowExceptions[i]);
              } catch (java.lang.IllegalArgumentException e) {
                caught = true;
                System.out.println("caught IllegalArgumentException as expected");
              }
              CHECK(caught);
            }
        }
    } // main

} // class Format
