/**
* sprintf.
* Very primitive and special-case so far,
* but I needed %.17g.
* And it's a good stress for the regex stuff too.
*
* XXX need to get rid of the Double etc. in this package,
* XXX it's making me have to say java.lang.Double all the time which is stupid
*/

package com.donhatchsw.compat;

#include "macros.h"

public class Format
{
    private static void Assert(boolean condition) { if (!condition) throw new Error("Assertion failed"); }

    public static int verboseLevel = 0;


    public static String sprintf(String format, Object args[])
    {
        // XXX could make this pattern static, it's the only one we ever use
        regex.Matcher matcher = regex.Pattern.compile("([^%])|(%(-)?((\\d+)|(\\*))?(\\.((\\d+)|(\\*)))?(.))").matcher(format);
        // The most natural way to do this would be via successive lookingAt()s,
        // i.e. match the character at the beginning of the remainder of the string.
        // Unfortunately there is no lookingAt() that takes an offset argument,
        // so to do it like that we would have to keep taking substrings
        // of every suffix of the string, which is very inefficient.
        // So instead, we use find().  which is kind of stupid
        // because we are only interested in matching at the beginning of the string,
        // but whatever.
        // XXX oh I think \A can help?  that will only match at the beginning of the input...
        // XXX not sure if "input" means the whole input or starting at the start I tell it
        // Actually if we wanted to be efficient we would step through character by character
        // and only use the regex when we hit a %... but I want to test regex.
        StringBuffer sb = new StringBuffer();
        int iArg = 0;
        int indexIntoFormat = 0;
        while (matcher.find())
        {
            Assert(matcher.start(0) == indexIntoFormat); // always matches at the beginning
            indexIntoFormat = matcher.end();
            if (verboseLevel >= 1)
            {
                System.out.println("    format = "+format);
                int nGroups = matcher.groupCount();
                System.out.println("        "+nGroups+" groups");
                for (int iGroup = 0; iGroup < nGroups+1; ++iGroup) // note the +1
                {
                    System.out.println("            "+iGroup+": \""+matcher.group(iGroup)+"\"");
                }
            }
            String oneCharLiteralString = matcher.group(1);
            String leftJustifyString = matcher.group(3);
            String widthString = matcher.group(4);
            String precisionString = matcher.group(8);
            String formatCharString = matcher.group(11);
            if (verboseLevel >= 1)
            {
                System.out.println("    leftJustifyString = "+leftJustifyString);
                System.out.println("    widthString = "+widthString);
                System.out.println("    precisionString = "+precisionString);
                System.out.println("    formatCharString = "+formatCharString);
            }
            if (oneCharLiteralString != null)
            {
                sb.append(oneCharLiteralString);
            }
            else
            {
                boolean leftJustify = false;
                int width = -1;
                int precision = -1;

                if (leftJustifyString != null)
                    leftJustify = true;
                if (widthString != null)
                {
                    if (widthString.equals("*"))
                    {
                        if (iArg >= args.length)
                            throw new IllegalArgumentException("sprintf expected width arg "+iArg+" of type int, got end of argument list instead");
                        if (!(args[iArg] instanceof java.lang.Integer))
                            throw new IllegalArgumentException("sprintf expected width arg "+iArg+" of type int, got type "+args[iArg].getClass()+" instead");
                        width = ((java.lang.Integer)args[iArg++]).intValue();
                    }
                    else
                        width = java.lang.Integer.parseInt(widthString);
                }
                if (precisionString != null)
                {
                    if (precisionString.equals("*"))
                    {
                        if (iArg >= args.length)
                            throw new IllegalArgumentException("sprintf expected precision arg "+iArg+" of type int, got end of argument list instead");
                        if (!(args[iArg] instanceof java.lang.Integer))
                            throw new IllegalArgumentException("sprintf expected precision arg "+iArg+" of type int, got type "+args[iArg].getClass()+" instead");
                        precision = ((java.lang.Integer)args[iArg++]).intValue();
                    }
                    else
                        precision = java.lang.Integer.parseInt(precisionString);
                }
                else
                    precision = 6;

                Assert(formatCharString != null
                    && formatCharString.length() == 1);
                char formatChar = formatCharString.charAt(0);
                String thisConversionResult;
                if (formatChar == 'g')
                {
                    if (iArg >= args.length)
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type double, got end of argument list instead");

                    if (!(args[iArg] instanceof java.lang.Double))
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type double, got type "+args[iArg].getClass()+" instead");

                    double x = ((java.lang.Double)args[iArg++]).doubleValue();

                    double threshold = Math.round(Math.pow(10, precision));
                    double scale = 1.;
                    while (x < threshold)
                    {
                        x *= 10;
                        scale *= 10;
                    }
                    while (x >= threshold)
                    {
                        x /= 10;
                        scale /= 10;
                    }
                    x = Math.floor(x);
                    x /= scale;
                    if (Math.floor(x) == x)
                        thisConversionResult = ""+(int)Math.floor(x);
                    else
                        thisConversionResult = ""+x;
                }
                else if (formatChar == 'd')
                {
                    if (iArg >= args.length)
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type int, got end of argument list instead");
                    if (!(args[iArg] instanceof java.lang.Integer))
                        throw new IllegalArgumentException("sprintf expected arg "+iArg+" of type int, got type "+args[iArg].getClass()+" instead");

                    int x = ((java.lang.Integer)args[iArg++]).intValue();
                    thisConversionResult = ""+x;
                }
                else if (formatChar == '%')
                {
                    thisConversionResult = "%";
                }
                else
                {
                    throw new Error("sprintf: format char '"+formatChar+"' in \""+format+"\" unimplemented");
                }
                while (thisConversionResult.length() < width) // XXX inefficient
                {
                    if (leftJustify)
                        thisConversionResult = thisConversionResult + " ";
                    else
                        thisConversionResult = " " + thisConversionResult;
                }
                sb.append(thisConversionResult);
            }
        }
        if (indexIntoFormat != format.length())
            throw new IllegalArgumentException("sprintf got bad format \""+format+"\" (or not implemented yet)");
        return sb.toString();
    } // sprintf

    public static String sprintf(String format)
    {
        return sprintf(format, new Object[]{});
    }
    public static String sprintf(String format, int arg0)
    {
        return sprintf(format, new Object[]{new java.lang.Integer(arg0)});
    }
    public static String sprintf(String format, double arg0)
    {
        return sprintf(format, new Object[]{new java.lang.Double(arg0)});
    }
    public static String sprintf(String format, int arg0, int arg1)
    {
        return sprintf(format, new Object[]{new java.lang.Integer(arg0),
                                            new java.lang.Integer(arg1)});
    }
    public static String sprintf(String format, int arg0, double arg1)
    {
        return sprintf(format, new Object[]{new java.lang.Integer(arg0),
                                            new java.lang.Double(arg1)});
    }
    public static String sprintf(String format, int arg0, int arg1, int arg2)
    {
        return sprintf(format, new Object[]{new java.lang.Integer(arg0),
                                            new java.lang.Integer(arg1),
                                            new java.lang.Integer(arg2)});
    }
    public static String sprintf(String format, int arg0, int arg1, double arg2)
    {
        return sprintf(format, new Object[]{new java.lang.Integer(arg0),
                                            new java.lang.Integer(arg1),
                                            new java.lang.Double(arg2)});
    }

    public static void main(String args[])
    {
        if (true)
        {
            // XXX should check these against the real printf
            System.out.println(sprintf("%41.26g", 1/3.));
            System.out.println(sprintf("%.26g", 1/3.));
            System.out.println(sprintf("%.17g", 1/3.));
            System.out.println(sprintf("%.*g", 9, 1/3.));
            System.out.println(sprintf("%g", 1/3.));
            System.out.println("|"+sprintf("%10.3g", 1/3.)+"|");
            System.out.println("|"+sprintf("%-10.3g", 1/3.)+"|");
            System.out.println("|"+sprintf("%*.3g", 20, 1/3.)+"|");
            System.out.println("|"+sprintf("%-*.3g", 20, 1/3.)+"|");
            System.out.println("|"+sprintf("%*.*g", 30, 3, 1/3.)+"|");
            System.out.println("|"+sprintf("%-*.*g", 30, 3, 1/3.)+"|");
            System.out.println(sprintf("(%d %d %g)", 1, 2, 1/3.));
            System.out.println(sprintf("%%"));
            System.out.println(sprintf("%% %d %% d %% %d %% d %%", 1,2));
            System.out.println(sprintf("%%%d%%d%%%d%%d%%", 1,2));

            String leftJustifies[] = {"","-"};
            int widths[] = {0,1,2,3,10,20,30};
            int precisions[] = {0,1,2,3,4,5,6};
            int vals[] = {-123,-101,-100,-99,-11,-10,-9,-1,0,1,9,10,11,99,100,101,123};
            FORI (iVal, vals.length)
            FORI (iWidth, widths.length)
            FORI (iLeftJustify, leftJustifies.length)
            FORI (iPrecision, precisions.length)
            {
                String result00 = sprintf("[%"+leftJustifies[iLeftJustify]
                                              +widths[iWidth]
                                              +"."
                                              +precisions[iPrecision]
                                              +"d]",
                                           vals[iVal]);
                System.out.println(result00);
                String result01 = sprintf("[%"+leftJustifies[iLeftJustify]
                                              +widths[iWidth]
                                              +"."
                                              +"*"
                                              +"d]",
                                           precisions[iPrecision],
                                           vals[iVal]);
                Assert(result01.equals(result00));
                String result02 = sprintf("[%"+leftJustifies[iLeftJustify]
                                              +"*"
                                              +"."
                                              +precisions[iPrecision]
                                              +"d]",
                                           widths[iWidth],
                                           vals[iVal]);
                Assert(result02.equals(result00));
                String result03 = sprintf("[%"+leftJustifies[iLeftJustify]
                                              +"*"
                                              +"."
                                              +"*"
                                              +"d]",
                                           widths[iWidth],
                                           precisions[iPrecision],
                                           vals[iVal]);
                Assert(result03.equals(result00));
            }
        }
        if (false)
        {
            // Should exercise ones that throw exceptions too, like these
            System.out.println(sprintf("%"));
            System.out.println(sprintf("%-"));
            System.out.println(sprintf("%."));
            System.out.println(sprintf("%8."));
            System.out.println(sprintf("%-8."));
            System.out.println(sprintf("%8"));
            System.out.println(sprintf("%8.8"));
            System.out.println(sprintf("%.8"));
            System.out.println(sprintf("%.-8g"));
        }
    } // main

} // class Format
