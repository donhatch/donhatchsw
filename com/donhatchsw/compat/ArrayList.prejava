package com.donhatchsw.compat;
#include "macros.h"
/**
* ArrayList for 1.1, implemented from the doc.
* Supposed to be like 40x faster than Vector (since not synchronized), I don't know.
* Some methods are not implemented yet;
* basically, I implemented what I needed so far.
*/
public class ArrayList
{
    private int size;
    private Object array[];

    public ArrayList(int initialCapacity)
    {
        this.array = new Object[initialCapacity];
        this.size = 0;
    }
    public ArrayList()
    {
        this.array = new Object[1];
        this.size = 0;
    }
    public ArrayList(ArrayList from) // this is Collection in the real ArrayList
    {
        unimplemented();
    }
    public void trimToSize()
    {
        unimplemented();
    }
    public void ensureCapacity(int minCapacity)
    {
        unimplemented();
    }
    public int size()
    {
        return size;
    }
    public boolean isEmpty()
    {
        return size == 0;
    }
    public boolean contains(java.lang.Object element)
    {
        unimplemented();
        return false;
    }
    public int indexOf(java.lang.Object element)
    {
        unimplemented();
        return -1;
    }
    public int lastIndexOf(java.lang.Object element)
    {
        unimplemented();
        return -1;
    }
    public java.lang.Object clone()
    {
        unimplemented();
        return null;
    }
    public java.lang.Object[] toArray()
    {
        unimplemented();
        return null;
    }
    public java.lang.Object[] toArray(java.lang.Object[] a)
    {
        unimplemented();
        return null;
    }
    public java.lang.Object get(int index)
    {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException("ArrayList.get: "+index+" out of bounds 0.."+size+"-1");
        return array[index];
    }
    public java.lang.Object set(int index, java.lang.Object element)
    {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException("ArrayList.set: "+index+" out of bounds 0.."+size+"-1");
        Object oldElement = array[index];
        array[index] = element;
        return oldElement;
    }
    public boolean add(java.lang.Object element)
    {
        add(size, element);
        return true; // that's what the doc says
    }
    public void add(int index, java.lang.Object element)
    {
        if (index != size)
            unimplemented();
        if (size == array.length)
        {
            int newCapacity = array.length/2*3+1; // funny arithmetic to postpone overflow a little longer
            assert(newCapacity > size);
            Object newArray[] = new Object[newCapacity];
            System.arraycopy(array, 0, newArray, 0, array.length);
            array = newArray;
        }
        array[size++] = element;
    }
    public java.lang.Object remove(int index)
    {
        unimplemented();
        return null;
    }
    public boolean remove(java.lang.Object element)
    {
        unimplemented();
        return false; // ? javap has this, the doc doesn't
    }
    public void clear()
    {
        // XXX does not resize array... is this right?
        size = 0;
    }
    public boolean addAll(ArrayList from) // this is Collection in the real ArrayList
    {
        unimplemented();
        return false;
    }
    public boolean addAll(int index, ArrayList from) // this is Collection in the real ArrayList
    {
        unimplemented();
        return false;
    }
    protected void removeRange(int fromIndex, int toIndex)
    {
        unimplemented();
    }
} // class ArrayList
