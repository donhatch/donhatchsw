/**
*  Stopgap implementation of some regex utilities
*  that don't exist in java pre-1.4.
*  Not everything is implemented but it's getting me by.
*  My god what a lot of CRAP in these classes.
*  XXX TODO: split uses greedy matching, not longest matching... need to think about how to do it better
*  XXX TODO: should throw a PatternSyntaxException (which is a kind of IllegalArgumentException) and emulate the cool pointing-to-the-error thing.  http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/PatternSyntaxException.html#getMessage()
*/

package com.donhatchsw.compat;

import com.donhatchsw.util.Arrays; // XXX get rid of this dependency... it's for toStringCompact and append

#include "macros.h" // XXX should try to get rid of this

public class regex
{
    private regex() {} // uninstantiatable

    public static boolean checkAgainstStandardVersion = true; // if available
    public static boolean useStandardVersion = false; // if available
    public static int verboseLevel = 0;
        // 0: nothing
        // 1: basic
        // 2: more detail, print out the FSM and execution trace and everything

    /**
    * An IllegalArgumentException
    * whose message does the cool point-to-the-error-in-the-regex thing.
    * XXX not implemented yet
    */
    public static class PatternSyntaxException extends IllegalArgumentException
    {
        public PatternSyntaxException(String description,
                               String patString,
                               int index)
        {
            super(description+" near index "+index
                             +System.getProperty("line.separator")
                             +patString
                             +System.getProperty("line.separator")
                             +spaces(index)
                             +"^");
        }

        // Could just do Format.sprintf("%*s", n, "") but
        // Format depends on regex so that would form
        // a cyclic compilation dependency, which I try to avoid
        private static String spaces(int n)
        {
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < n; ++i)
                sb.append(' ');
            return sb.toString();
        }
    } // PatternSyntaxException

    public static boolean matches(String input, String patString)
    {
        //return input.matches(patString); // only exists in >=1.4
        return Pattern.compile(patString).matcher(input).matches();
    }
    public static String[] split(String input, String patString, int limit)
    {
        //return input.split(patString, limit); // only exists in >=1.4
        return Pattern.compile(patString).split(input, limit);
    }
    public static String[] split(String input, String patString)
    {
        //return input.split(patString); // only exists in >=1.4
        return split(input, patString, 0);
    }
    public static String replaceAll(String input, String patString, String replacement)
    {
        //return input.replaceAll(patString, replacement); // only exists in >=1.4
        return Pattern.compile(patString).matcher(input).replaceAll(replacement);
    }

    public static class Pattern
    {
        private java_util_regex.Pattern theirPattern;
        private My.Pattern myPattern;

        private Pattern(java_util_regex.Pattern theirPattern, My.Pattern myPattern)
        {
            this.theirPattern = theirPattern;
            this.myPattern = myPattern;
        }

        public static Pattern compile(String patString)
        {
            if (!java_util_regex.exists())
            {
                // We're on our own!
                useStandardVersion = false;
                checkAgainstStandardVersion = false;
            }

            java_util_regex.Pattern theirs = null;
            My.Pattern mine = null;
            if (useStandardVersion || checkAgainstStandardVersion)
                theirs = java_util_regex.Pattern.compile(patString);
            if (!useStandardVersion || checkAgainstStandardVersion)
                mine = My.Pattern.compile(patString);
            return new Pattern(theirs, mine);
        }
        public Matcher matcher(String input)
        {
            java_util_regex.Matcher theirs = null;
            My.Matcher mine = null;
            if (useStandardVersion || checkAgainstStandardVersion)
                theirs = theirPattern.matcher(input);
            if (!useStandardVersion || checkAgainstStandardVersion)
                mine = myPattern.matcher(input);
            return new Matcher(theirs, mine);
                               
        }
        public String[] split(String input, int limit)
        {
            String theirs[] = null, mine[] = null;
            if (useStandardVersion || checkAgainstStandardVersion)
                theirs = theirPattern.split(input, limit);
            if (!useStandardVersion || checkAgainstStandardVersion)
                mine = myPattern.split(input, limit);
            if (checkAgainstStandardVersion)
            {
                if (verboseLevel >= 1) System.out.println("    theirs = "+Arrays.toStringCompact(theirs));
                if (verboseLevel >= 1) System.out.println("    mine = "+Arrays.toStringCompact(mine));
                assert(theirs != null && mine != null);
                assert(theirs.length == mine.length);
                for (int i = 0; i < theirs.length; ++i)
                    assert(theirs[i].equals(mine[i]));
            }
            return useStandardVersion ? theirs : mine;
        } // split
    } // class Pattern
    public static class Matcher
    {
        private java_util_regex.Matcher theirMatcher;
        private My.Matcher myMatcher;
        private Matcher(java_util_regex.Matcher theirMatcher, My.Matcher myMatcher)
        {
            this.theirMatcher = theirMatcher;
            this.myMatcher = myMatcher;
        }

        private boolean _find_or_matches(boolean isFind, boolean isFindWithStart, int inputStartIfIsFindWithStart)
        {
            boolean theirs = false, mine = false;
            if (useStandardVersion || checkAgainstStandardVersion)
                theirs = isFindWithStart ? theirMatcher.find(inputStartIfIsFindWithStart) : isFind ? theirMatcher.find() : theirMatcher.matches();
            if (!useStandardVersion || checkAgainstStandardVersion)
                mine = isFindWithStart ? myMatcher.find(inputStartIfIsFindWithStart) : isFind ? myMatcher.find() : myMatcher.matches();
            if (checkAgainstStandardVersion)
            {
                int theirGroups[][/*2*/] = null;
                if (theirs)
                {
                    theirGroups = new int[theirMatcher.groupCount()+1][2]; // note the +1
                    for (int iGroup = 0; iGroup < theirGroups.length; ++iGroup)
                    {
                        theirGroups[iGroup][0] = theirMatcher.start(iGroup);
                        theirGroups[iGroup][1] = theirMatcher.end(iGroup);
                    }
                }

                int myGroups[][/*2*/] = null;
                if (mine)
                {
                    myGroups = new int[theirMatcher.groupCount()+1][2]; // note the +1
                    for (int iGroup = 0; iGroup < myGroups.length; ++iGroup)
                    {
                        myGroups[iGroup][0] = myMatcher.start(iGroup);
                        myGroups[iGroup][1] = myMatcher.end(iGroup);
                    }
                }

                if (verboseLevel >= 2)
                {
                    PRINT(theirs);
                    PRINT(mine);
                    if (theirGroups != null) PRINT(theirGroups.length);
                    PRINTARRAY(theirGroups);
                    if (myGroups != null) PRINT(myGroups.length);
                    PRINTARRAY(myGroups);
                }
                assert(theirs == mine);
                if (theirs)
                {
                    assert(theirGroups != null && myGroups != null);
                    assert(theirGroups.length == myGroups.length);
                    for (int iGroup = 0; iGroup < theirGroups.length; ++iGroup)
                    {
                        assert(theirGroups[iGroup].length == 2 && myGroups[iGroup].length == 2);
                        assert(theirGroups[iGroup][0] == myGroups[iGroup][0]);
                        assert(theirGroups[iGroup][1] == myGroups[iGroup][1]);
                    }
                }
            }
            return useStandardVersion ? theirs : mine;
        }
        public boolean find(int inputStart)
        {
            return _find_or_matches(true, true, inputStart);
        }
        public boolean find()
        {
            return _find_or_matches(true, false, 12345);
        }

        // Attempts to match the internally stored string
        // against the internally stored pattern.
        // If it succeeds, returns true and stores
        // the group starts and ends of the matched substrings.
        public boolean matches()
        {
            return _find_or_matches(false, false, 12345);
        }
        public int groupCount()
        {
            int theirs = -1, mine = -1;
            if (useStandardVersion || checkAgainstStandardVersion)
                theirs = theirMatcher.groupCount();
            if (!useStandardVersion || checkAgainstStandardVersion)
                mine = myMatcher.groupCount();
            if (checkAgainstStandardVersion)
            {
                assert(theirs == mine);
            }
            return useStandardVersion ? theirs : mine;
        }
        public String group(int iGroup)
        {
            String theirs = null, mine = null;
            if (useStandardVersion || checkAgainstStandardVersion)
            {
                theirs = theirMatcher.group(iGroup);
                /* XXX argh, we didn't save input
                assert(theirs.equals(input.substring(theirMatcher.start(iGroup),
                                                     theirMatcher.end(iGroup))));
                */
            }
            if (!useStandardVersion || checkAgainstStandardVersion)
            {
                mine = myMatcher.group(iGroup);
                /* XXX argh, we didn't save input
                assert(mine.equals(input.substring(myMatcher.start(iGroup),
                                                   myMatcher.end(iGroup))));
                */
            }
            if (checkAgainstStandardVersion)
            {
                //PRINT(theirs);
                //PRINT(mine);
                assert((theirs != null) == (mine != null));
                if (theirs != null)
                    assert(theirs.equals(mine));
            }
            return useStandardVersion ? theirs : mine;
        }
        public int start(int iGroup)
        {
            int theirs = -1, mine = -1;
            if (useStandardVersion || checkAgainstStandardVersion)
                theirs = theirMatcher.start(iGroup);
            if (!useStandardVersion || checkAgainstStandardVersion)
                mine = myMatcher.start(iGroup);
            //PRINT(iGroup);
            //PRINT(theirs);
            //PRINT(mine);
            //PRINT(myMatcher.myGroups.length);
            //PRINTARRAY(myMatcher.myGroups);
            if (checkAgainstStandardVersion)
                assert(theirs == mine);
            return useStandardVersion ? theirs : mine;
        }
        public int end(int iGroup)
        {
            int theirs = -1, mine = -1;
            if (useStandardVersion || checkAgainstStandardVersion)
                theirs = theirMatcher.end(iGroup);
            if (!useStandardVersion || checkAgainstStandardVersion)
                mine = myMatcher.end(iGroup);
            if (checkAgainstStandardVersion)
                assert(theirs == mine);
            return useStandardVersion ? theirs : mine;
        }
        public int end()
        {
            int theirs = -1, mine = -1;
            if (useStandardVersion || checkAgainstStandardVersion)
                theirs = theirMatcher.end();
            if (!useStandardVersion || checkAgainstStandardVersion)
                mine = myMatcher.end();
            if (checkAgainstStandardVersion)
                assert(theirs == mine);
            return useStandardVersion ? theirs : mine;
        }
        public String replaceAll(String replacement)
        {
            String theirs = null, mine = null;
            if (useStandardVersion || checkAgainstStandardVersion)
                theirs = theirMatcher.replaceAll(replacement);
            if (!useStandardVersion || checkAgainstStandardVersion)
                mine = myMatcher.replaceAll(replacement);
            if (checkAgainstStandardVersion)
            {
                if (verboseLevel >= 1) System.out.println("    theirs = "+Arrays.toStringCompact(theirs));
                if (verboseLevel >= 1) System.out.println("    mine = "+Arrays.toStringCompact(mine));
                assert(theirs != null && mine != null);
                assert(theirs.equals(mine));
            }
            return useStandardVersion ? theirs : mine;
        }
    } // class Matcher



    // My implementation of Pattern and Matcher.
    private static class My
    {
        //
        // Nondeterministic finite state machine
        // representing a regular expression.
        //
        private static class FSM
        {
            public String patString; // for debugging so we can print where we are
            public State states[];
            public int nCaptureGroups;

            public static class State
            {
                public Transition transitions[] = new Transition[0];
                // XXX gee, a state doesn't have much... states could really just be a Transition[][]
            }
            public static class Transition
            {
                public String chars; // null means go right there without eating a char of input
                public boolean complement;
                public int nextState;
                public int captureGroupIndex; // -1 except for '(' or ')' transitions
                public Transition(String chars, boolean complement, int nextState, int captureGroupIndex)
                {
                    this.chars = chars;
                    this.complement = complement;
                    this.nextState = nextState;
                    this.captureGroupIndex = captureGroupIndex;
                }
            }
            public FSM(String patString)
            {
                this.patString = patString;
                int patStringLength = patString.length();

                this.states = new State[patStringLength];
                for (int iState = 0; iState < states.length; ++iState)
                    states[iState] = new State();

                this.nCaptureGroups = 0; // and counting

                int openParensStack[] = new int[patStringLength];
                int nOpenParens = 0;
                int otherParen[] = new int[patStringLength]; // from each paren to its opposite
                int patIndexToCaptureGroupIndex[] = new int[patStringLength];
                for (int i = 0; i < patStringLength; ++i)
                    otherParen[i] = -1;
                int thingStart = -1; // start of thing that ?,*,+ will be applied to if there is one following
                for (int i = 0; i < patStringLength; ++i)
                {
                    int iState = i;
                    Transition transition = null;

                    char c = patString.charAt(i);
                    if (c == '(')
                    {
                        if (i+1 < patStringLength && patString.charAt(i+1) == '?')
                        {
                            // Non-capturing special constructs
                            unimplemented();
                        }
                        openParensStack[nOpenParens++] = i; // push the open paren position on stack
                        patIndexToCaptureGroupIndex[i] = ++this.nCaptureGroups;
                        transition = new Transition(null, false, i+1, 2*patIndexToCaptureGroupIndex[i]+0);
                        thingStart = -1; // following ?,*,+ is illegal
                    }
                    else if (c == ')')
                    {
                        // Add a free transition from the end of
                        // each alternative to just before this close paren
                        // XXX somewhat duplicated code in the ')' case and end of pattern
                        while (nOpenParens > 0
                            && patString.charAt(openParensStack[nOpenParens-1]) == '|')
                        {
                            int j = openParensStack[--nOpenParens]; // actually position of the '|'
                            states[j].transitions = (Transition[])Arrays.append(states[j].transitions, new Transition(null, false, i, -1));
                        }

                        if (nOpenParens == 0)
                            throw new PatternSyntaxException("Unmatched '"+c+"'", patString, i); // XXX escapify!
                        int j = openParensStack[--nOpenParens]; // pop matching open paren off stack
                        otherParen[i] = j;
                        otherParen[j] = i; // XXX unused other than this? if so, can get rid
                        transition = new Transition(null, false, i+1, 2*patIndexToCaptureGroupIndex[j]+1);
                        thingStart = j; // before the matching '('
                    }
                    else if (c == '|')
                    {
                        // Append a free transition from the beginning of the most recently opened
                        // paren block (or the beginning of the pattern, if there was none) to here.
                        // Do NOT put any transitions from here yet... there will be
                        // a free transition from here to the end of the current paren block
                        // or end of string.

                        // look for the top *real* open paren, not bar
                        int iOpenParen = nOpenParens-1;
                        while (iOpenParen > 0 && openParensStack[iOpenParen] == '|')
                            iOpenParen--;
                        int fromState = (iOpenParen>=0 ? openParensStack[iOpenParen]+1 : 0);

                        // XXX do this into a Vector first
                        states[fromState].transitions = (Transition[])Arrays.append(states[fromState].transitions, new Transition(null, false, i+1, -1));
                        thingStart = -1; // following ?,*,+ is illegal
                        openParensStack[nOpenParens++] = i; // push the '|' paren position on stack
                    }
                    else if (c == '?')
                    {
                        // the previous thing, once or not at all
                        if (i > 0 && "?*+}".indexOf(patString.charAt(i-1)) != -1)
                            unimplemented(); // reluctant quantifier
                        if (thingStart == -1)
                            throw new PatternSyntaxException("Illegal '"+c+"'", patString, i);// XXX escapify!
                        // add free transition from thingStart to past the ?
                        states[thingStart].transitions = (Transition[])Arrays.append(states[thingStart].transitions, new Transition(null, false, i+1, -1));
                        transition = new Transition(null, false, i+1, -1);
                    }
                    else if (c == '*')
                    {
                        // the previous thing, zero or more times
                        if (thingStart == -1)
                            throw new PatternSyntaxException("Illegal '"+c+"'", patString, i);// XXX escapify!
                        // add free transition from the end of thing to beginning,
                        // and from beginning to past the * (making it optional)
                        states[i].transitions = (Transition[])Arrays.append(states[i].transitions, new Transition(null, false, thingStart, -1));
                        states[thingStart].transitions = (Transition[])Arrays.append(states[thingStart].transitions, new Transition(null, false, i+1, -1));

                    }
                    else if (c == '+')
                    {
                        // the previous thing, one or more times
                        if (i > 0 && "?*+}".indexOf(patString.charAt(i-1)) != -1)
                            unimplemented(); // possessive quantifier
                        // add free transition from the end of thing to beginning (preferred)
                        // and from the end to past the + (non-preferred)
                        states[i].transitions = (Transition[])Arrays.append(states[i].transitions, new Transition(null, false, thingStart, -1));
                        states[i].transitions = (Transition[])Arrays.append(states[i].transitions, new Transition(null, false, i+1, -1));
                    }
                    else if (c == '[')
                    {
                        // Get the character class beginning here
                        StringBuffer sb = new StringBuffer();
                        thingStart = i;
                        int j = i+1;
                        boolean complement = false;
                        while (j < patStringLength && patString.charAt(j) != ']')
                        {
                            if (j == i+1 && patString.charAt(j) == '^')
                            {
                                complement = true;
                                j++;
                            }
                            else if (j+2 < patStringLength
                                 && patString.charAt(j+1) == '-')
                            {
                                char rangeStart = patString.charAt(j);
                                char rangeEnd = patString.charAt(j+2);
                                if (rangeStart > rangeEnd)
                                    throw new PatternSyntaxException("Backwards character range", patString, j+2);
                                for (char k = rangeStart; k <= rangeEnd; ++k)
                                    sb.append(k);
                                j += 3;
                            }
                            else
                            {
                                sb.append(patString.charAt(j));
                                j++;
                            }
                        }
                        if (j == patStringLength)
                            throw new PatternSyntaxException("Unmatched '['", patString, i);
                        transition = new Transition(sb.toString(), complement, j+1, -1);
                        i = j; // the ']'
                    }
                    else if (c == '.')
                    {
                        // Any character (may or may not match line terminators)
                        // XXX not doing the line terminator thing currently
                        thingStart = i;
                        transition = new Transition("", true, i+1, -1);
                    }
                    else if (c == '^')
                    {
                        // The beginning of a line
                        unimplemented(); // XXX what do do here?
                    }
                    else if (c == '$')
                    {
                        // The end of a line
                        unimplemented(); // XXX what do do here?
                    }
                    else if (c == '{')
                    {
                        // {n} means the previous thing, exactly n times
                        // {n,} means the previous thing, at least n times
                        // {n,m} means the previous thing, at least n but not more than m times
                        unimplemented();
                    }
                    else if (c == '\\')
                    {
                        thingStart = i;
                        if (i+1 == patStringLength)
                        {
                            // XXX need better msg
                            throw new PatternSyntaxException("pattern ends in a backslash!", patString, i);
                        }
                        char d = patString.charAt(++i); // advance and get next char from pat
                        if (d == '\\')
                            transition = new Transition("\\", false, i+1, -1);
                        else if (d == '0')
                            unimplemented();
                        else if (d == 'x')
                            unimplemented();
                        else if (d == 'u')
                            unimplemented();
                        else if (d == 't')
                            transition = new Transition("\t", false, i+1, -1);
                        else if (d == 'n')
                            transition = new Transition("\n", false, i+1, -1);
                        else if (d == 'r')
                            transition = new Transition("\r", false, i+1, -1);
                        else if (d == 'f')
                            transition = new Transition("\f", false, i+1, -1);
                        else if (d == 'a')
                            transition = new Transition("\007", false, i+1, -1);
                        else if (d == 'e')
                            transition = new Transition("\033", false, i+1, -1);
                        else if (d == 'c' && i+1 < patStringLength)
                        {
                            char e = patString.charAt(++i); // advance and get next char from pat
                            transition = new Transition(""+(e-'A'), false, i+1, -1); // XXX 'a' or 'A' or what???
                        }
                        else if (d == 'd')
                            transition = new Transition("0123456789", false, i+1, -1);
                        else if (d == 'D')
                            transition = new Transition("0123456789", true, i+1, -1);
                        else if (d == 's')
                            transition = new Transition(" \t\n\013\f\r", false, i+1, -1);
                        else if (d == 'S')
                            transition = new Transition(" \t\n\013\f\r", true, i+1, -1);
                        else if (d == 'w')
                            transition = new Transition("a-zA-Z_0-9", false, i+1, -1);
                        else if (d == 'W')
                            transition = new Transition("a-zA-Z_0-9", true, i+1, -1);
                        else if (d == 'p' || d == 'P')
                        {
                            // Posix character classes
                            unimplemented();
                        }
                        else if (d == 'b')
                        {
                            // A word boundary
                            unimplemented();
                        }
                        else if (d == 'B')
                        {
                            // A non-word boundary
                            unimplemented();
                        }
                        else if (d == 'A')
                        {
                            // The beginning of the input
                            unimplemented();
                        }
                        else if (d == 'G')
                        {
                            // The end of the previous match
                            unimplemented();
                        }
                        else if (d == 'Z')
                        {
                            // The end of the input but for the final terminator, if any
                            unimplemented();
                        }
                        else if (d == 'Z')
                        {
                            // The end of the input
                            unimplemented();
                        }
                        else if ("0123456789".indexOf(d) != -1)
                        {
                            // Whatever the n'th capturing group matched
                            // XXX only a single digit, or not?
                            unimplemented();
                        }
                        else if (d == 'Q')
                        {
                            // Nothing, but quotes all characters until \E
                            // XXX what the hell does this mean?
                            unimplemented();
                        }
                        else if (d == 'E')
                        {
                            // Nothing, but ends quoting started by \Q
                            // XXX what the hell does this mean?
                            unimplemented();
                        }
                        else
                        {
                            // quote a character that otherwise
                            // would be interpreted as unescaped constructs
                            transition = new Transition(""+d, false, i+1, -1);
                        }
                    } // c == '\\'
                    else
                    {
                        // Just a char literal.
                        thingStart = i;
                        transition = new Transition(""+c, false, i+1, -1);
                    }

                    if (transition != null)
                    {
                        assert(states[iState].transitions.length == 0);
                        states[iState].transitions = (Transition[])Arrays.append(states[iState].transitions, transition);
                    }
                }

                // Add a free transition from the end of
                // each alternative to the end of the pattern
                // XXX somewhat duplicated code in the ')' case and end of pattern
                while (nOpenParens > 0
                    && patString.charAt(openParensStack[nOpenParens-1]) == '|')
                {
                    int j = openParensStack[--nOpenParens]; // actually position of the '|'
                    states[j].transitions = (Transition[])Arrays.append(states[j].transitions, new Transition(null, false, patStringLength, -1));
                }
            } // FSM ctor

            public String toString()
            {
                StringBuffer sb = new StringBuffer();
                sb.append("    patString=\""+patString+"\"\n");
                sb.append("    "+states.length+" states\n");
                for (int iState = 0; iState < states.length; ++iState)
                {
                    sb.append("        "+iState+":\n");
                    Transition transitions[] = states[iState].transitions;
                    for (int iTransition = 0; iTransition < transitions.length; ++iTransition)
                    {
                        Transition t = transitions[iTransition];
                        if (t.chars == null)
                            sb.append("            --> "+t.nextState+"\n");
                        else
                            sb.append("            -"+(t.complement?"^":"")+"\""+t.chars+"\"-> "+t.nextState+"\n");

                    }
                }
                return sb.toString();
            } // FSM.toString

            // Return the end of the greedy match,
            // or -1 if no match.
            private int __match(String input, int inputStart, int inputEnd, int iState, int captureGroups[][/*2*/])
            {
                if (verboseLevel >= 2) System.out.println("    matching input \""+input.substring(inputStart, inputEnd)+"\" against pattern \""+patString.substring(iState)+"\"");
                if (iState == states.length)
                    return inputStart;
                Transition transitions[] = states[iState].transitions;
                for (int iTransition = 0; iTransition < transitions.length; ++iTransition)
                {
                    Transition transition = transitions[iTransition];
                    int matchEnd = -1;
                    if (transition.chars == null)
                    {
                        // Free transition-- don't eat a char
                        if (verboseLevel >= 2) System.out.println("    "+iState+" -----> "+(transition.nextState==states.length?"[":"")+transition.nextState+(transition.nextState==states.length?"]":""));
                        matchEnd = __match(input, inputStart, inputEnd, transition.nextState, captureGroups);
                        if (matchEnd != -1)
                        {
                            if (captureGroups != null
                             && transition.captureGroupIndex != -1
                             && captureGroups[transition.captureGroupIndex/2]
                                             [transition.captureGroupIndex%2] == -1) // for a * or +, we want the last one, so don't clobber it
                                captureGroups[transition.captureGroupIndex/2]
                                             [transition.captureGroupIndex%2] = inputStart;
                            return matchEnd;
                        }
                    }
                    else
                    {
                        // Transition, and eat the char, if it matches
                        if (inputStart < inputEnd)
                        {
                            char c = input.charAt(inputStart);
                            if ((transition.chars.indexOf(c) == -1) == transition.complement)
                            {
                                if (verboseLevel >= 2) System.out.println("    "+iState+" -("+c+")-> "+(transition.nextState==states.length?"[":"")+transition.nextState+(transition.nextState==states.length?"]":""));
                                matchEnd = __match(input, inputStart+1, inputEnd, transition.nextState, captureGroups);
                                if (matchEnd != -1)
                                {
                                    if (captureGroups != null
                                     && transition.captureGroupIndex != -1
                                     && captureGroups[transition.captureGroupIndex/2]
                                                     [transition.captureGroupIndex%2] == -1) // for a * or +, we want the last one, so don't clobber it
                                        captureGroups[transition.captureGroupIndex/2]
                                                     [transition.captureGroupIndex%2] = inputStart;
                                    return matchEnd;
                                }
                            }
                        }
                    }
                }
                return -1; // no way out
            } // FSM.__match
            public int match(String input, int inputStart, int inputEnd, int captureGroups[][/*2*/])
            {
                int matchEnd = __match(input, inputStart, inputEnd, 0, captureGroups);
                if (matchEnd != -1
                 && captureGroups != null)
                {
                    captureGroups[0][0] = inputStart;
                    captureGroups[0][1] = matchEnd;
                }
                return matchEnd;
            } // FSM.match
        } // class My.FSM

        public static class Pattern // My.Pattern
        {
            private String patString;
            private FSM fsm;

            private Pattern(String patString)
            {
                this.patString = patString;
                this.fsm = new FSM(patString);
            }

            public static Pattern compile(String patString)
            {
                if (verboseLevel >= 1)
                {
                    System.out.println("    =================");
                    System.out.println("    in Pattern.compile(patString=\""+patString+"\")");
                }
                Pattern pattern = new Pattern(patString);
                if (verboseLevel >= 1)
                {
                    System.out.println("    fsm = ");
                    System.out.println("    "+pattern.fsm);
                    System.out.println("    =================");
                }
                return pattern;
            }
            public Matcher matcher(String input)
            {
                return new Matcher(this, input);
            }

            public String[] split(String input, int limit)
            {
                if (verboseLevel >= 1)
                {
                    System.out.println("=================");
                    System.out.println("in Pattern.split(patString=\""+patString+"\", input=\""+input+"\", limit="+limit+")");
                }

                java.util.Vector resultVector = new java.util.Vector();
                {
                    int inputLength = input.length();
                    Matcher matcher = matcher(input);
                    int prevSearchStart = -1;
                    int i = 0;
                    while (true)
                    {
                        if (resultVector.size()+1 == limit)
                            break;
                        int searchStart = i==prevSearchStart ? i+1 : i; // never do the same search twice, or we will endless loop
                        if (searchStart > inputLength)
                            break;
                        if (!matcher.find(searchStart))
                            break;
                        prevSearchStart = searchStart;
                        // Found a match; send everything up to it
                        // and then advance past it.
                        resultVector.addElement(input.substring(i, matcher.start(0)));
                        i = matcher.end(0);
                    }
                    // Send the rest of the input.
                    resultVector.addElement(input.substring(i));
                }
                if (limit == 0)
                {
                    // special case: trailing empty strings are discarded
                    while (resultVector.size() >= 1
                        && ((String)resultVector.lastElement()).equals(""))
                        resultVector.removeElementAt(resultVector.size()-1); // not remove, for 1.1
                }
                String result[] = new String[resultVector.size()];
                resultVector.copyInto(result);

                // Fudge to make mine match theirs, even though
                // I don't think I agree...
                if (input.equals(""))
                    result = new String[]{""};

                return result;
            } // split
        } // class My.Pattern
        public static class Matcher // My.Matcher
        {
            private Pattern pattern; // the My.Pattern who made me
            private String input;
            private int groups[][/*2*/];
            private Matcher(Pattern pattern, String input) // XXX huh? why is javap showing this?
            {
                this.pattern = pattern;
                this.groups = new int[pattern.fsm.nCaptureGroups+1][2]; // note the +1
                reset(input);
            }

            public boolean find()
            {
                return find(groups[0][1] == -1 ? 0 : groups[0][1]);
            }
            public boolean find(int inputStart)
            {
                if (verboseLevel >= 1)
                {
                    System.out.println("=================");
                    System.out.println("in Matcher.find(patString=\""+pattern.patString+"\", input tail=\""+input.substring(inputStart)+"\")");
                }

                reset();

                int inputLength = input.length();
                int matchEnd = -1;
                while (inputStart <= inputLength) // yes, test even at end
                {
                    matchEnd = pattern.fsm.match(input, inputStart, inputLength, groups);
                    if (matchEnd != -1)
                    {
                        if (verboseLevel >= 1)
                        {
                            System.out.println("mine DID match");
                            System.out.println("=================");
                        }
                        return true;
                    }
                    inputStart++;
                }
                if (verboseLevel >= 1)
                {
                    System.out.println("mine DID NOT match");
                    System.out.println("=================");
                }
                return false;
            } // My.Matcher.find


            // Attempts to match the internally stored string
            // against the internally stored pattern.
            // If it succeeds, returns true and stores
            // the group starts and ends of the matched substrings.
            public boolean matches()
            {
                if (verboseLevel >= 1)
                {
                    System.out.println("=================");
                    System.out.println("in Matcher.matches(patString=\""+pattern.patString+"\", input=\""+input+"\")");
                }

                reset();

                int matchEnd = pattern.fsm.match(input, 0, input.length(), groups);
                boolean matched = (matchEnd == input.length());
                if (verboseLevel >= 1)
                {
                    System.out.println("mine "+(matched ? "DID" : "DID NOT")+" match");
                    System.out.println("=================");
                }
                return matched;
            } // My.Matcher.matches
            public int groupCount()
            {
                return pattern.fsm.nCaptureGroups;
            }
            public String group(int iGroup)
            {
                //PRINT(iGroup);
                //PRINTARRAY(groups);
                // XXX need to throw if there was no match
                return groups[iGroup][0] == -1 ? null :
                            input.substring(groups[iGroup][0], groups[iGroup][1]);
            }
            public int start(int iGroup)
            {
                // XXX need to throw if there was no match
                return groups[iGroup][0];
            }
            public int end(int iGroup)
            {
                // XXX need to throw if there was no match
                return groups[iGroup][1];
            }
            public int end()
            {
                return end(0);
            }
            // Resets the matcher and then replaces all.
            // Doesn't need to reset afterwards.
            public String replaceAll(String replacement)
            {
                if (verboseLevel >= 1)
                {
                    System.out.println("=================");
                    System.out.println("in Matcher.replaceAll()");
                    System.out.println("    pattern.patString = "+pattern.patString);
                    System.out.println("    input = "+input);
                    System.out.println("    replacement = "+replacement);
                }
                this.reset(); // so that we start at the beginning
                int replacementLength = replacement.length();
                StringBuffer sb = new StringBuffer();
                {
                    int inputLength = input.length();
                    int prevSearchStart = -1;
                    int i = 0;
                    while (true)
                    {
                        int searchStart = i==prevSearchStart ? i+1 : i; // never do the same search twice, or we will endless loop    XXX make sure we have a test case for this
                        if (searchStart > inputLength)
                            break;
                        if (!this.find(searchStart))
                            break;
                        prevSearchStart = searchStart;

                        // Found a match; send everything up to it...
                        sb.append(input.substring(i, this.start(0)));

                        // and send the replacement...
                        // dollar signs are backrefs, backslashes are
                        // escapes.
                        {
                            for (int iReplacement = 0; iReplacement < replacementLength; ++iReplacement)
                            {
                                char c = replacement.charAt(iReplacement);
                                if (c == '\\')
                                {
                                    if (iReplacement+1 == replacementLength)
                                        throw new IllegalArgumentException("replacement \""+replacement+"\" ends in a backslash!"); // XXX escapify   XXX don't need to check this every time, just sanity check once at start maybe
                                    sb.append(replacement.charAt(++iReplacement));
                                }
                                else if (c == '$')
                                {
                                    // XXX not clear on what happens if followed by more than one digit... we will just assume we should get a single digit.
                                    if (iReplacement+1 == replacementLength)
                                        throw new IllegalArgumentException("replacement \""+replacement+"\" ends in a dollar sign!"); // XXX escapify   XXX don't need to check this every time, just sanity check once at start maybe
                                    char d = replacement.charAt(++iReplacement);
                                    if (d < '0' || d > '9')
                                        throw new IllegalArgumentException("replacement \""+replacement+"\" has a dollar sign not followed by a digit!"); // XXX escapify   XXX don't need to check this every time, just sanity check once at start maybe
                                    int iGroup = d - '0';
                                    int iGroupMaybe;
                                    while (iReplacement+1 < replacementLength
                                        && (iGroupMaybe = iGroup*10 + (replacement.charAt(iReplacement+1)-'0')) < groups.length)
                                    {
                                        iGroup = iGroupMaybe;
                                        iReplacement++;
                                    }
                                    if (groups[iGroup][0] != -1)
                                        sb.append(input.substring(groups[iGroup][0], groups[iGroup][1]));
                                    else
                                    {
                                        // XXX am I doing the right thing here? need a test
                                    }
                                }
                                else
                                    sb.append(c);
                            }
                        }

                        // and advance past it.
                        i = this.end(0);
                    }
                    // Send the rest of the input.
                    sb.append(input.substring(i));
                }
                return sb.toString();
            } // replaceAll
            public Matcher reset(String input)
            {
                this.input = input;
                return reset();
            }
            public Matcher reset()
            {
                for (int iGroup = 0; iGroup < groups.length; ++iGroup)
                {
                    groups[iGroup][0] = -1;
                    groups[iGroup][1] = -1;
                }
                return this;
            }
        } // class My.Matcher
    } // class My



    //=========================================================================
    // Way to get at the native versions
    // using reflection, so it will compile on <1.4
    //
    private static class java_util_regex
    {
        // you MUST call this and make sure it returns true
        // before calling any of the other methods
        public static boolean exists()
        {
            init();
            return patternClass != null;
        }

        private static boolean inited;
        private static Class patternClass;
        private static Class matcherClass;
        private static Class charSequenceClass;
        private static java.lang.reflect.Method patternCompileMethod;
        private static java.lang.reflect.Method patternMatcherMethod;
        private static java.lang.reflect.Method patternSplitMethod;
        private static java.lang.reflect.Method matcherFind0Method;
        private static java.lang.reflect.Method matcherFind1Method;
        private static java.lang.reflect.Method matcherMatchesMethod;
        private static java.lang.reflect.Method matcherGroupCountMethod;
        private static java.lang.reflect.Method matcherStartMethod;
        private static java.lang.reflect.Method matcherEnd0Method;
        private static java.lang.reflect.Method matcherEnd1Method;
        private static java.lang.reflect.Method matcherGroupMethod;
        private static java.lang.reflect.Method matcherReplaceAllMethod;

        private static void init()
        {
            synchronized(Pattern.class) {
                if (inited)
                    return;
                inited = true;
            }
            try {
                patternClass = Class.forName("java.util.regex.Pattern");
                matcherClass = Class.forName("java.util.regex.Matcher");
                charSequenceClass = Class.forName("java.lang.CharSequence");
            } catch (ClassNotFoundException e) {
                // This is the <1.4 case.
                if (verboseLevel >= 1)
                {
                    System.out.println("I guess we don't have regex: "+e);
                }
                return;
            }

            try {
                patternCompileMethod = patternClass.getMethod("compile", new Class[]{String.class});
                patternMatcherMethod = patternClass.getMethod("matcher", new Class[]{charSequenceClass});
                patternSplitMethod = patternClass.getMethod("split", new Class[]{charSequenceClass, int.class});
                matcherFind0Method = matcherClass.getMethod("find", new Class[]{});
                matcherFind1Method = matcherClass.getMethod("find", new Class[]{int.class});
                matcherMatchesMethod = matcherClass.getMethod("matches", new Class[]{});
                matcherGroupCountMethod = matcherClass.getMethod("groupCount", new Class[]{});
                matcherStartMethod = matcherClass.getMethod("start", new Class[]{int.class});
                matcherEnd0Method = matcherClass.getMethod("end", new Class[]{});
                matcherEnd1Method = matcherClass.getMethod("end", new Class[]{int.class});
                matcherGroupMethod = matcherClass.getMethod("group", new Class[]{int.class});
                matcherReplaceAllMethod = matcherClass.getMethod("replaceAll", new Class[]{String.class});

            } catch (NoSuchMethodException e) {
                System.err.println("java_util_regex.Pattern: something went dreadfully wrong: "+e);
                assert(false);
            }
        } // java_util_regex.getMethods


        private static class Pattern
        {
            //private java.util.regex.Pattern nativePattern;
            private Object nativePattern;


            private Pattern(Object nativePattern)
            {
                this.nativePattern = nativePattern;
            }

            public static Pattern compile(String patString)
            {
                if (patternCompileMethod == null)
                {
                    throw new Error("java_util_regex.Pattern.compile called without first verifying java_util_regex.exists()"); // should neve happen
                }
                //java.util.regex.Pattern nativePattern = java.util.regex.Pattern.compile(patString);
                try {
                    Object nativePattern = patternCompileMethod.invoke(null, new Object[]{patString});
                    return new Pattern(nativePattern);
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Pattern.compile!?");
                    assert(false); // XXX should rethrow? maybe not if only checking?  get straight on this
                    return null;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Pattern.compile: "+e.getTargetException());
                    assert(false); // XXX should rethrow? maybe not if only checking?  get straight on this
                    return null;
                }
            }
            public Matcher matcher(String input)
            {
                //return new Matcher(nativePattern.matcher(input));
                try {
                    Object nativeMatcher = patternMatcherMethod.invoke(nativePattern, new Object[]{input});
                    return new Matcher(nativeMatcher);
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Pattern.matcher!?");
                    assert(false);
                    return null;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Pattern.matcher!?");
                    assert(false);
                    return null;
                }
            }
            public String[] split(String input, int limit)
            {
                // return nativePattern.split(input, limit);
                try {
                    return (String[])patternSplitMethod.invoke(nativePattern, new Object[]{input, new Integer(limit)});
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Pattern.split!?");
                    assert(false);
                    return null;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Pattern.split!?");
                    assert(false);
                    return null;
                }
            }
        } // java_util_regex.Pattern

        private static class Matcher
        {
            //private java.util.regex.Matcher nativeMatcher;
            private Object nativeMatcher;

            private Matcher(Object nativeMatcher)
            {
                this.nativeMatcher = nativeMatcher;
            }

            public boolean find(int inputStart)
            {
                //return nativeMatcher.find();
                try {
                    return ((java.lang.Boolean)matcherFind1Method.invoke(nativeMatcher, new Object[]{new Integer(inputStart)})).booleanValue(); // XXX why can I look in Pattern's privates?  that's messed up
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Matcher.find!?");
                    assert(false);
                    return false;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Matcher.find!?");
                    assert(false);
                    return false;
                }
            }
            public boolean find()
            {
                //return nativeMatcher.find();
                try {
                    return ((java.lang.Boolean)matcherFind0Method.invoke(nativeMatcher, new Object[]{})).booleanValue(); // XXX why can I look in Pattern's privates?  that's messed up
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Matcher.find!?");
                    assert(false);
                    return false;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Matcher.find!?");
                    assert(false);
                    return false;
                }
            }
            public boolean matches()
            {
                //return nativeMatcher.matches();
                try {
                    return ((java.lang.Boolean)matcherMatchesMethod.invoke(nativeMatcher, new Object[]{})).booleanValue(); // XXX why can I look in Pattern's privates?  that's messed up
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Matcher.matches!?");
                    assert(false);
                    return false;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Matcher.matches!?");
                    assert(false);
                    return false;
                }
            }
            public int groupCount() // XXX weird, why isn't this a method on the Pattern?
            {
                //return nativeMatcher.groupCount();
                try {
                    return ((Integer)matcherGroupCountMethod.invoke(nativeMatcher, new Object[]{})).intValue(); // XXX why can I look in Pattern's privates?  that's messed up
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Matcher.groupCount!?");
                    assert(false);
                    return -1;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Matcher.groupCount!?");
                    assert(false);
                    return -1;
                }
            }
            public int start(int iGroup)
            {
                //return nativeMatcher.start(iGroup);
                try {
                    return ((Integer)matcherStartMethod.invoke(nativeMatcher, new Object[]{new Integer(iGroup)})).intValue(); // XXX why can I look in Pattern's privates?  that's messed up
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Matcher.start!?");
                    assert(false);
                    return -1;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Matcher.start!?");
                    assert(false);
                    return -1;
                }
            }
            public int end(int iGroup)
            {
                //return nativeMatcher.end(iGroup);
                try {
                    return ((Integer)matcherEnd1Method.invoke(nativeMatcher, new Object[]{new Integer(iGroup)})).intValue(); // XXX why can I look in Pattern's privates?  that's messed up
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Matcher.end!?");
                    assert(false);
                    return -1;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Matcher.end!?");
                    assert(false);
                    return -1;
                }
            }
            public int end()
            {
                //return nativeMatcher.end(iGroup);
                try {
                    return ((Integer)matcherEnd0Method.invoke(nativeMatcher, new Object[]{})).intValue(); // XXX why can I look in Pattern's privates?  that's messed up
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Matcher.end!?");
                    assert(false);
                    return -1;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Matcher.end: "+e.getTargetException());
                    assert(false);
                    return -1;
                }
            }
            public String group(int iGroup)
            {
                //return nativeMatcher.group(iGroup);
                try {
                    return (String)matcherGroupMethod.invoke(nativeMatcher, new Object[]{new Integer(iGroup)}); // XXX why can I look in Pattern's privates?  that's messed up
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Matcher.group!?");
                    assert(false);
                    return null;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Matcher.group: "+e.getTargetException());
                    assert(false);
                    return null;
                }
            }
            public String replaceAll(String replacement)
            {
                //return nativeMatcher.replaceAll(input);
                try {
                    return (String)matcherReplaceAllMethod.invoke(nativeMatcher, new Object[]{replacement}); // XXX why can I look in Pattern's privates?  that's messed up
                } catch (IllegalAccessException e) {
                    System.err.println("IllegalAccessException trying to invoke Matcher.replaceAll!?");
                    assert(false);
                    return null;
                } catch (java.lang.reflect.InvocationTargetException e) {
                    System.err.println("InvocationTargetException trying to invoke Matcher.replaceAll!?");
                    assert(false);
                    return null;
                }
            }
        } // java_util_regex.Matcher
    } // java_util_regex

    //
    //=========================================================================

    private static void testSplit(String inputs[], String patStrings[], int limits[])
    {
        FORI (iInput, inputs.length)
        FORI (iPatString, patStrings.length)
        FORI (iLimit, limits.length)
        {
            split(inputs[iInput], patStrings[iPatString], limits[iLimit]);
            replaceAll(inputs[iInput], patStrings[iPatString], "");
            replaceAll(inputs[iInput], patStrings[iPatString], "howdy");
        }
    }


    // Some examples from the doc,
    // and others that exercise stuff.
    public static void main(String args[])
    {
        if (args.length == 1)
        {
            verboseLevel = Integer.parseInt(args[0]);
        }

        if (true)
        {
            testSplit(new String[]{"","a"},
                      new String[]{"","a","a?","a*","a+"},
                      new int[]{-1,0,1,2});

            split("boo:and:foo", ":", 2);
            split("boo:and:foo", ":", 5);
            split("boo:and:foo", ":", -2);
            split("boo:and:foo", "o", 5);
            split("boo:and:foo", "o", -2);
            split("boo:and:foo", "o", 0);

            split("boo:and:foo", "", 0);
            split("boo:and:foo", ".", 0);
            split("boo:and:foo", ".?", 0);
            split("boo:and:foo", ".*", 0);
            split("boo:and:foo", ".+", 0);

            split("b", "a", -1);
            split("b", "a?", -1);
            split("b", "a*", -1);
            split("b", "a+", -1);
            split("b", "[a]", -1);
            split("b", "[a]*", -1);
            split("b", "[a]+", -1);
            split("b", "[^a]", -1);
            split("b", "[^a]?", -1);
            split("b", "[^a]*", -1);
            split("b", "[^a]+", -1);
            split("bbabaabaaa", "a?", -1);
            split("bbabaabaaa", "a*", -1);
            split("bbabaabaaa", "a+", -1);
            split("bbabaabaaa", "[a]?", -1);
            split("bbabaabaaa", "[a]*", -1);
            split("bbabaabaaa", "[a]+", -1);
            split("bbabaabaaa", "[^a]?", -1);
            split("bbabaabaaa", "[^a]*", -1);
            split("bbabaabaaa", "[^a]+", -1);
            split("boo:and:foo", "o+", -1);
            split("boo:and:foo", "o?", -1);
            split("boo:and:foo", "o*", -1);
            split(" \n ", "\\s*\n\\s*", -1);
            split("(1)5/2(0)3(0)", "\\([^)]+\\)", -1);
            split("X144 13-cells:Y", "(\\d+) (\\d+)-cell[^:]*:", -1);
            split("X144 13-cell:Y", "(\\d+) (\\d+)-cell[^:]*:", -1);
            matches("X144 13-cells:Y", "(\\d+) (\\d+)-cell[^:]*:"); // no
            matches("X144 13-cell:Y", "(\\d+) (\\d+)-cell[^:]*:"); // no
            matches("X144 13-cells:", "(\\d+) (\\d+)-cell[^:]*:"); // no
            matches("X144 13-cell:", "(\\d+) (\\d+)-cell[^:]*:"); // no
            matches("144 13-cells:", "(\\d+) (\\d+)-cell[^:]*:"); // yes
            matches("144 13-cell:", "(\\d+) (\\d+)-cell[^:]*:"); // yes
            matches("a", "(a|b)");
            matches("a", "a|b");
            matches("%.2g", "%\\.((\\d+))g");
            matches("%.2g", "%\\.((\\d+)|(\\*))g");
            matches("%.2g", "%\\.((\\d+)|(\\*))?g");
            matches("abc%d%x%%%.17g", "(%|[^%])*");
            matches("abc%d%f%%%.17g", "((%(-)?((\\d+)|(\\*))?(\\.((\\d+)|(\\*)))?([gdf]))|(%%)|([^%]))*");
            matches("%%", "((%(-)?((\\d+)|(\\*))?(\\.((\\d+)|(\\*)))?([gdf]))|(%%)|([^%]))*");

            matches("b", "[a-z0-9]");
            matches("b", "[A-Z]");
            matches("b", "[A-Za-z]");
            matches("b", "[A-Za-z]");
            matches("B", "[A-Za-z]");
            matches("B", "[-Za-z]");
            matches("-", "[-Za-z]");
            matches("Z", "[-Za-z]");
            matches("z", "[a-z-]");
            matches("Z", "[a-z-]");
            matches("Z", "[----]");
            split("ab .abX 0cd dq.z hello(there)", "[._a-zA-Z][._a-zA-Z0-9]*");
            replaceAll("aabfooaabfooabfoob", "a*b", "-");
            String prepattern = " { genericPuzzleDescription = ([^\\n,]+) , \\n genericPuzzleState = ([^\\n,]+) , \\n history = ([^\\n,]+) , \\n undoPartSize = (\\d+) ";
            split(prepattern, " ");
            replaceAll(prepattern, " ", "\\\\s*");
            replaceAll(prepattern, " ", "\\s*");
            replaceAll("aaafoo", "(...)(...)", "$2bar");
            replaceAll("aaaaaaaaabbbbbbbbb", "(.)(.)(.)(.)(.)(.)(.)(.)(.)", "\\\\\\$$100"); // the back ref is $1 because $10 is illegal
            replaceAll("aaaaaaaaaabbbbbbbbbb", "(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)", "\\\\\\$$100"); // the back ref is $10
        }
        if (false)
        {
            // These fail currently
            split("XababacY", "((ab)*|aba)c?", -1); // XXX Oh frickin heck, they got the non-greedy longest match.  How did they do that??  This sucks.
            matches("b", "[A-]"); // XXX I considered this illegal... I guess it's not? weird
            matches("new foo(\"bar\")", "\\s*new\\s+([a-zA-Z0-9.]+)\\s*\\(\"(([^\\]|\\\\.)*)\"\\s*\\)\\s*"); // XXX they say that char range is unmatched...  oh guess it is, I forgot to make the \ inside the [] be \\\\... and mine accepts it, wrongly, because it doesn't properly parse escapes inside char ranges
            replaceAll("f\\oo", "\\\\(.)", "\\1"); // XXX I can't handle backrefs yet
        }
        if (false)
        {
            // Purposely try to throw exceptions to exercise that
            matches("b", "[z-b0-9]"); // Backwards range near index 3
            matches("%.2g", "%\\(.((\\d+)|(\\*  )  )  )?g"); // Unmatched closing ')' near index 22 (theirs says 21, I like mine better because it points to the ')')
        }
        if (true)
        {
        }

        System.out.println("All good!");
    } // main

} // class regex
